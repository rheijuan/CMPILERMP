// Generated from Grammar.g4 by ANTLR 4.7.2
// jshint ignore: start
var antlr4 = require('antlr4/index');
var GrammarListener = require('./GrammarListener').GrammarListener;
var GrammarVisitor = require('./GrammarVisitor').GrammarVisitor;

var grammarFileName = "Grammar.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003d\u041a\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004",
    "H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004N\tN\u0004",
    "O\tO\u0003\u0002\u0007\u0002\u00a0\n\u0002\f\u0002\u000e\u0002\u00a3",
    "\u000b\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0005\u0003",
    "\u00a9\n\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0007",
    "\u0004\u00af\n\u0004\f\u0004\u000e\u0004\u00b2\u000b\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0005\u0007\u0005\u00b7\n\u0005\f\u0005\u000e\u0005",
    "\u00ba\u000b\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0007\u0006\u00c2\n\u0006\f\u0006\u000e\u0006\u00c5",
    "\u000b\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0007\u0007\u00cc\n\u0007\f\u0007\u000e\u0007\u00cf\u000b\u0007\u0003",
    "\u0007\u0003\u0007\u0005\u0007\u00d3\n\u0007\u0003\u0007\u0003\u0007",
    "\u0003\b\u0003\b\u0005\b\u00d9\n\b\u0003\t\u0003\t\u0005\t\u00dd\n\t",
    "\u0003\n\u0003\n\u0003\n\u0003\n\u0007\n\u00e3\n\n\f\n\u000e\n\u00e6",
    "\u000b\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\u000b\u0007\u000b",
    "\u00ed\n\u000b\f\u000b\u000e\u000b\u00f0\u000b\u000b\u0003\u000b\u0003",
    "\u000b\u0003\u000b\u0003\f\u0007\f\u00f6\n\f\f\f\u000e\f\u00f9\u000b",
    "\f\u0003\f\u0003\f\u0003\f\u0007\f\u00fe\n\f\f\f\u000e\f\u0101\u000b",
    "\f\u0003\f\u0003\f\u0005\f\u0105\n\f\u0003\f\u0003\f\u0003\f\u0003\f",
    "\u0007\f\u010b\n\f\f\f\u000e\f\u010e\u000b\f\u0003\f\u0003\f\u0005\f",
    "\u0112\n\f\u0003\f\u0003\f\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u011a",
    "\n\r\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0007\u000f\u0122\n\u000f\f\u000f\u000e\u000f\u0125\u000b\u000f",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u012a\n\u0010\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0007\u0011\u012f\n\u0011\f\u0011\u000e",
    "\u0011\u0132\u000b\u0011\u0003\u0012\u0003\u0012\u0005\u0012\u0136\n",
    "\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0007\u0013\u013c",
    "\n\u0013\f\u0013\u000e\u0013\u013f\u000b\u0013\u0003\u0013\u0005\u0013",
    "\u0142\n\u0013\u0005\u0013\u0144\n\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0014\u0003\u0014\u0005\u0014\u014a\n\u0014\u0003\u0014\u0003\u0014",
    "\u0003\u0014\u0005\u0014\u014f\n\u0014\u0007\u0014\u0151\n\u0014\f\u0014",
    "\u000e\u0014\u0154\u000b\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0005",
    "\u0015\u0159\n\u0015\u0005\u0015\u015b\n\u0015\u0003\u0016\u0003\u0016",
    "\u0003\u0016\u0007\u0016\u0160\n\u0016\f\u0016\u000e\u0016\u0163\u000b",
    "\u0016\u0003\u0017\u0003\u0017\u0005\u0017\u0167\n\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0007\u0018\u016e\n",
    "\u0018\f\u0018\u000e\u0018\u0171\u000b\u0018\u0003\u0018\u0003\u0018",
    "\u0005\u0018\u0175\n\u0018\u0003\u0018\u0005\u0018\u0178\n\u0018\u0003",
    "\u0019\u0007\u0019\u017b\n\u0019\f\u0019\u000e\u0019\u017e\u000b\u0019",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u001a\u0007\u001a\u0184\n",
    "\u001a\f\u001a\u000e\u001a\u0187\u000b\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0007\u001b",
    "\u0190\n\u001b\f\u001b\u000e\u001b\u0193\u000b\u001b\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u019b",
    "\n\u001c\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u01a6\n",
    "\u001f\u0003\u001f\u0005\u001f\u01a9\n\u001f\u0003 \u0003 \u0003 \u0007",
    " \u01ae\n \f \u000e \u01b1\u000b \u0003!\u0003!\u0003!\u0003!\u0003",
    "\"\u0003\"\u0003\"\u0005\"\u01ba\n\"\u0003#\u0003#\u0003#\u0003#\u0007",
    "#\u01c0\n#\f#\u000e#\u01c3\u000b#\u0005#\u01c5\n#\u0003#\u0005#\u01c8",
    "\n#\u0003#\u0003#\u0003$\u0003$\u0003$\u0003%\u0003%\u0007%\u01d1\n",
    "%\f%\u000e%\u01d4\u000b%\u0003%\u0003%\u0005%\u01d8\n%\u0003&\u0003",
    "&\u0007&\u01dc\n&\f&\u000e&\u01df\u000b&\u0003&\u0003&\u0003\'\u0003",
    "\'\u0003\'\u0003\'\u0003\'\u0005\'\u01e8\n\'\u0003(\u0007(\u01eb\n(",
    "\f(\u000e(\u01ee\u000b(\u0003(\u0003(\u0003(\u0003)\u0003)\u0003)\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0005*\u01fb\n*\u0003*\u0003*\u0003*\u0005",
    "*\u0200\n*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0005",
    "*\u0214\n*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0005",
    "*\u021e\n*\u0003*\u0003*\u0003*\u0003*\u0003*\u0006*\u0225\n*\r*\u000e",
    "*\u0226\u0003*\u0005*\u022a\n*\u0003*\u0005*\u022d\n*\u0003*\u0003*",
    "\u0003*\u0003*\u0007*\u0233\n*\f*\u000e*\u0236\u000b*\u0003*\u0005*",
    "\u0239\n*\u0003*\u0003*\u0003*\u0003*\u0005*\u023f\n*\u0003*\u0003*",
    "\u0007*\u0243\n*\f*\u000e*\u0246\u000b*\u0003*\u0007*\u0249\n*\f*\u000e",
    "*\u024c\u000b*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0005*\u0254",
    "\n*\u0003*\u0003*\u0003*\u0003*\u0005*\u025a\n*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0005*\u0265\n*\u0003*\u0003",
    "*\u0003*\u0005*\u026a\n*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0005*\u0274\n*\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003",
    ",\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0007,\u0285",
    "\n,\f,\u000e,\u0288\u000b,\u0003,\u0003,\u0003,\u0003-\u0003-\u0003",
    "-\u0003-\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003",
    ".\u0007.\u029a\n.\f.\u000e.\u029d\u000b.\u0003/\u0003/\u0003/\u0003",
    "/\u0003/\u00030\u00030\u00030\u00030\u00030\u00030\u00060\u02aa\n0\r",
    "0\u000e0\u02ab\u00030\u00030\u00030\u00031\u00031\u00031\u00031\u0003",
    "1\u00031\u00051\u02b7\n1\u00032\u00032\u00052\u02bb\n2\u00033\u0003",
    "3\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00053\u02c7",
    "\n3\u00034\u00034\u00034\u00074\u02cc\n4\f4\u000e4\u02cf\u000b4\u0003",
    "4\u00034\u00034\u00034\u00034\u00035\u00035\u00035\u00075\u02d9\n5\f",
    "5\u000e5\u02dc\u000b5\u00036\u00036\u00036\u00037\u00037\u00037\u0005",
    "7\u02e4\n7\u00037\u00037\u00038\u00038\u00038\u00078\u02eb\n8\f8\u000e",
    "8\u02ee\u000b8\u00039\u00079\u02f1\n9\f9\u000e9\u02f4\u000b9\u00039",
    "\u00039\u00039\u00039\u00039\u0003:\u0006:\u02fc\n:\r:\u000e:\u02fd",
    "\u0003:\u0006:\u0301\n:\r:\u000e:\u0302\u0003;\u0003;\u0003;\u0005;",
    "\u0308\n;\u0003;\u0003;\u0003;\u0005;\u030d\n;\u0003<\u0003<\u0005<",
    "\u0311\n<\u0003<\u0003<\u0005<\u0315\n<\u0003<\u0003<\u0005<\u0319\n",
    "<\u0005<\u031b\n<\u0003=\u0003=\u0005=\u031f\n=\u0003>\u0007>\u0322",
    "\n>\f>\u000e>\u0325\u000b>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003",
    "?\u0003?\u0003?\u0003?\u0003@\u0003@\u0003@\u0003@\u0003@\u0003A\u0003",
    "A\u0003A\u0003A\u0003A\u0003B\u0003B\u0003B\u0007B\u033d\nB\fB\u000e",
    "B\u0340\u000bB\u0003C\u0003C\u0003C\u0005C\u0345\nC\u0003C\u0003C\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0005D\u035e\nD\u0003D\u0003D\u0003D\u0003D\u0005D\u0364\nD\u0005",
    "D\u0366\nD\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0003D\u0005D\u0376\nD\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0005D\u039b\nD\u0003D\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0005D\u03a5\nD\u0003D\u0007D\u03a8\nD\fD\u000eD\u03ab",
    "\u000bD\u0003E\u0003E\u0003E\u0003E\u0007E\u03b1\nE\fE\u000eE\u03b4",
    "\u000bE\u0003E\u0003E\u0007E\u03b8\nE\fE\u000eE\u03bb\u000bE\u0003E",
    "\u0005E\u03be\nE\u0003F\u0003F\u0003F\u0003F\u0003F\u0005F\u03c5\nF",
    "\u0003G\u0003G\u0003G\u0003H\u0003H\u0003H\u0003I\u0003I\u0003I\u0003",
    "I\u0003I\u0003I\u0003I\u0003I\u0003I\u0005I\u03d6\nI\u0003J\u0003J\u0003",
    "J\u0003J\u0007J\u03dc\nJ\fJ\u000eJ\u03df\u000bJ\u0003J\u0003J\u0003",
    "J\u0003J\u0003J\u0003J\u0003J\u0007J\u03e8\nJ\fJ\u000eJ\u03eb\u000b",
    "J\u0003J\u0003J\u0007J\u03ef\nJ\fJ\u000eJ\u03f2\u000bJ\u0005J\u03f4",
    "\nJ\u0003K\u0003K\u0003K\u0007K\u03f9\nK\fK\u000eK\u03fc\u000bK\u0003",
    "L\u0003L\u0003L\u0003L\u0007L\u0402\nL\fL\u000eL\u0405\u000bL\u0003",
    "M\u0003M\u0003N\u0003N\u0003N\u0003N\u0007N\u040d\nN\fN\u000eN\u0410",
    "\u000bN\u0003N\u0003N\u0003O\u0003O\u0005O\u0416\nO\u0003O\u0003O\u0003",
    "O\u0002\u0003\u0086P\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014",
    "\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bd",
    "fhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090",
    "\u0092\u0094\u0096\u0098\u009a\u009c\u0002\u0010\u0003\u0002\'*\u0003",
    "\u0002+,\u0004\u0002//cc\u0004\u0002;<AD\u0003\u0002IL\u0003\u0002G",
    "J\u0003\u0002=>\u0003\u0002GH\u0004\u0002KLPP\u0003\u0002IJ\u0004\u0002",
    ";<BC\u0004\u0002AADD\u0004\u0002::Q[\t\u0002\u0003\u0003\u0005\u0005",
    "\b\b\r\r\u0011\u0011\u0015\u0016\u0019\u0019\u0002\u0478\u0002\u00a1",
    "\u0003\u0002\u0002\u0002\u0004\u00a8\u0003\u0002\u0002\u0002\u0006\u00aa",
    "\u0003\u0002\u0002\u0002\b\u00b8\u0003\u0002\u0002\u0002\n\u00be\u0003",
    "\u0002\u0002\u0002\f\u00c6\u0003\u0002\u0002\u0002\u000e\u00d8\u0003",
    "\u0002\u0002\u0002\u0010\u00dc\u0003\u0002\u0002\u0002\u0012\u00de\u0003",
    "\u0002\u0002\u0002\u0014\u00e9\u0003\u0002\u0002\u0002\u0016\u00f7\u0003",
    "\u0002\u0002\u0002\u0018\u0119\u0003\u0002\u0002\u0002\u001a\u011b\u0003",
    "\u0002\u0002\u0002\u001c\u011e\u0003\u0002\u0002\u0002\u001e\u0126\u0003",
    "\u0002\u0002\u0002 \u012b\u0003\u0002\u0002\u0002\"\u0135\u0003\u0002",
    "\u0002\u0002$\u0137\u0003\u0002\u0002\u0002&\u0147\u0003\u0002\u0002",
    "\u0002(\u015a\u0003\u0002\u0002\u0002*\u015c\u0003\u0002\u0002\u0002",
    ",\u0164\u0003\u0002\u0002\u0002.\u0177\u0003\u0002\u0002\u00020\u017c",
    "\u0003\u0002\u0002\u00022\u0185\u0003\u0002\u0002\u00024\u018c\u0003",
    "\u0002\u0002\u00026\u019a\u0003\u0002\u0002\u00028\u019c\u0003\u0002",
    "\u0002\u0002:\u019e\u0003\u0002\u0002\u0002<\u01a0\u0003\u0002\u0002",
    "\u0002>\u01aa\u0003\u0002\u0002\u0002@\u01b2\u0003\u0002\u0002\u0002",
    "B\u01b9\u0003\u0002\u0002\u0002D\u01bb\u0003\u0002\u0002\u0002F\u01cb",
    "\u0003\u0002\u0002\u0002H\u01d7\u0003\u0002\u0002\u0002J\u01d9\u0003",
    "\u0002\u0002\u0002L\u01e7\u0003\u0002\u0002\u0002N\u01ec\u0003\u0002",
    "\u0002\u0002P\u01f2\u0003\u0002\u0002\u0002R\u0273\u0003\u0002\u0002",
    "\u0002T\u0275\u0003\u0002\u0002\u0002V\u027b\u0003\u0002\u0002\u0002",
    "X\u028c\u0003\u0002\u0002\u0002Z\u0290\u0003\u0002\u0002\u0002\\\u029e",
    "\u0003\u0002\u0002\u0002^\u02a3\u0003\u0002\u0002\u0002`\u02b6\u0003",
    "\u0002\u0002\u0002b\u02b8\u0003\u0002\u0002\u0002d\u02c6\u0003\u0002",
    "\u0002\u0002f\u02c8\u0003\u0002\u0002\u0002h\u02d5\u0003\u0002\u0002",
    "\u0002j\u02dd\u0003\u0002\u0002\u0002l\u02e0\u0003\u0002\u0002\u0002",
    "n\u02e7\u0003\u0002\u0002\u0002p\u02f2\u0003\u0002\u0002\u0002r\u02fb",
    "\u0003\u0002\u0002\u0002t\u030c\u0003\u0002\u0002\u0002v\u031a\u0003",
    "\u0002\u0002\u0002x\u031e\u0003\u0002\u0002\u0002z\u0323\u0003\u0002",
    "\u0002\u0002|\u032b\u0003\u0002\u0002\u0002~\u032f\u0003\u0002\u0002",
    "\u0002\u0080\u0334\u0003\u0002\u0002\u0002\u0082\u0339\u0003\u0002\u0002",
    "\u0002\u0084\u0341\u0003\u0002\u0002\u0002\u0086\u0365\u0003\u0002\u0002",
    "\u0002\u0088\u03bd\u0003\u0002\u0002\u0002\u008a\u03c4\u0003\u0002\u0002",
    "\u0002\u008c\u03c6\u0003\u0002\u0002\u0002\u008e\u03c9\u0003\u0002\u0002",
    "\u0002\u0090\u03d5\u0003\u0002\u0002\u0002\u0092\u03d7\u0003\u0002\u0002",
    "\u0002\u0094\u03f5\u0003\u0002\u0002\u0002\u0096\u03fd\u0003\u0002\u0002",
    "\u0002\u0098\u0406\u0003\u0002\u0002\u0002\u009a\u0408\u0003\u0002\u0002",
    "\u0002\u009c\u0413\u0003\u0002\u0002\u0002\u009e\u00a0\u0005\f\u0007",
    "\u0002\u009f\u009e\u0003\u0002\u0002\u0002\u00a0\u00a3\u0003\u0002\u0002",
    "\u0002\u00a1\u009f\u0003\u0002\u0002\u0002\u00a1\u00a2\u0003\u0002\u0002",
    "\u0002\u00a2\u00a4\u0003\u0002\u0002\u0002\u00a3\u00a1\u0003\u0002\u0002",
    "\u0002\u00a4\u00a5\u0007\u0002\u0002\u0003\u00a5\u0003\u0003\u0002\u0002",
    "\u0002\u00a6\u00a9\u0007\u000f\u0002\u0002\u00a7\u00a9\u0005<\u001f",
    "\u0002\u00a8\u00a6\u0003\u0002\u0002\u0002\u00a8\u00a7\u0003\u0002\u0002",
    "\u0002\u00a9\u0005\u0003\u0002\u0002\u0002\u00aa\u00ab\u0007<\u0002",
    "\u0002\u00ab\u00b0\u0005\b\u0005\u0002\u00ac\u00ad\u00078\u0002\u0002",
    "\u00ad\u00af\u0005\b\u0005\u0002\u00ae\u00ac\u0003\u0002\u0002\u0002",
    "\u00af\u00b2\u0003\u0002\u0002\u0002\u00b0\u00ae\u0003\u0002\u0002\u0002",
    "\u00b0\u00b1\u0003\u0002\u0002\u0002\u00b1\u00b3\u0003\u0002\u0002\u0002",
    "\u00b2\u00b0\u0003\u0002\u0002\u0002\u00b3\u00b4\u0007;\u0002\u0002",
    "\u00b4\u0007\u0003\u0002\u0002\u0002\u00b5\u00b7\u0005<\u001f\u0002",
    "\u00b6\u00b5\u0003\u0002\u0002\u0002\u00b7\u00ba\u0003\u0002\u0002\u0002",
    "\u00b8\u00b6\u0003\u0002\u0002\u0002\u00b8\u00b9\u0003\u0002\u0002\u0002",
    "\u00b9\u00bb\u0003\u0002\u0002\u0002\u00ba\u00b8\u0003\u0002\u0002\u0002",
    "\u00bb\u00bc\u0007c\u0002\u0002\u00bc\u00bd\u0005\n\u0006\u0002\u00bd",
    "\t\u0003\u0002\u0002\u0002\u00be\u00c3\u0005\u0096L\u0002\u00bf\u00c0",
    "\u0007M\u0002\u0002\u00c0\u00c2\u0005\u0096L\u0002\u00c1\u00bf\u0003",
    "\u0002\u0002\u0002\u00c2\u00c5\u0003\u0002\u0002\u0002\u00c3\u00c1\u0003",
    "\u0002\u0002\u0002\u00c3\u00c4\u0003\u0002\u0002\u0002\u00c4\u000b\u0003",
    "\u0002\u0002\u0002\u00c5\u00c3\u0003\u0002\u0002\u0002\u00c6\u00c7\u0005",
    "\u0010\t\u0002\u00c7\u00c8\u0007c\u0002\u0002\u00c8\u00cd\u0005,\u0017",
    "\u0002\u00c9\u00ca\u00075\u0002\u0002\u00ca\u00cc\u00076\u0002\u0002",
    "\u00cb\u00c9\u0003\u0002\u0002\u0002\u00cc\u00cf\u0003\u0002\u0002\u0002",
    "\u00cd\u00cb\u0003\u0002\u0002\u0002\u00cd\u00ce\u0003\u0002\u0002\u0002",
    "\u00ce\u00d2\u0003\u0002\u0002\u0002\u00cf\u00cd\u0003\u0002\u0002\u0002",
    "\u00d0\u00d1\u0007\u001f\u0002\u0002\u00d1\u00d3\u0005*\u0016\u0002",
    "\u00d2\u00d0\u0003\u0002\u0002\u0002\u00d2\u00d3\u0003\u0002\u0002\u0002",
    "\u00d3\u00d4\u0003\u0002\u0002\u0002\u00d4\u00d5\u0005\u000e\b\u0002",
    "\u00d5\r\u0003\u0002\u0002\u0002\u00d6\u00d9\u0005H%\u0002\u00d7\u00d9",
    "\u00077\u0002\u0002\u00d8\u00d6\u0003\u0002\u0002\u0002\u00d8\u00d7",
    "\u0003\u0002\u0002\u0002\u00d9\u000f\u0003\u0002\u0002\u0002\u00da\u00dd",
    "\u0005\u0096L\u0002\u00db\u00dd\u0007\"\u0002\u0002\u00dc\u00da\u0003",
    "\u0002\u0002\u0002\u00dc\u00db\u0003\u0002\u0002\u0002\u00dd\u0011\u0003",
    "\u0002\u0002\u0002\u00de\u00df\u0005\u0096L\u0002\u00df\u00e4\u0005",
    "\u0014\u000b\u0002\u00e0\u00e1\u00078\u0002\u0002\u00e1\u00e3\u0005",
    "\u0014\u000b\u0002\u00e2\u00e0\u0003\u0002\u0002\u0002\u00e3\u00e6\u0003",
    "\u0002\u0002\u0002\u00e4\u00e2\u0003\u0002\u0002\u0002\u00e4\u00e5\u0003",
    "\u0002\u0002\u0002\u00e5\u00e7\u0003\u0002\u0002\u0002\u00e6\u00e4\u0003",
    "\u0002\u0002\u0002\u00e7\u00e8\u00077\u0002\u0002\u00e8\u0013\u0003",
    "\u0002\u0002\u0002\u00e9\u00ee\u0007c\u0002\u0002\u00ea\u00eb\u0007",
    "5\u0002\u0002\u00eb\u00ed\u00076\u0002\u0002\u00ec\u00ea\u0003\u0002",
    "\u0002\u0002\u00ed\u00f0\u0003\u0002\u0002\u0002\u00ee\u00ec\u0003\u0002",
    "\u0002\u0002\u00ee\u00ef\u0003\u0002\u0002\u0002\u00ef\u00f1\u0003\u0002",
    "\u0002\u0002\u00f0\u00ee\u0003\u0002\u0002\u0002\u00f1\u00f2\u0007:",
    "\u0002\u0002\u00f2\u00f3\u0005\"\u0012\u0002\u00f3\u0015\u0003\u0002",
    "\u0002\u0002\u00f4\u00f6\u0005\u0018\r\u0002\u00f5\u00f4\u0003\u0002",
    "\u0002\u0002\u00f6\u00f9\u0003\u0002\u0002\u0002\u00f7\u00f5\u0003\u0002",
    "\u0002\u0002\u00f7\u00f8\u0003\u0002\u0002\u0002\u00f8\u0104\u0003\u0002",
    "\u0002\u0002\u00f9\u00f7\u0003\u0002\u0002\u0002\u00fa\u0105\u0005\u0010",
    "\t\u0002\u00fb\u00ff\u0005\u0006\u0004\u0002\u00fc\u00fe\u0005<\u001f",
    "\u0002\u00fd\u00fc\u0003\u0002\u0002\u0002\u00fe\u0101\u0003\u0002\u0002",
    "\u0002\u00ff\u00fd\u0003\u0002\u0002\u0002\u00ff\u0100\u0003\u0002\u0002",
    "\u0002\u0100\u0102\u0003\u0002\u0002\u0002\u0101\u00ff\u0003\u0002\u0002",
    "\u0002\u0102\u0103\u0005\u0010\t\u0002\u0103\u0105\u0003\u0002\u0002",
    "\u0002\u0104\u00fa\u0003\u0002\u0002\u0002\u0104\u00fb\u0003\u0002\u0002",
    "\u0002\u0105\u0106\u0003\u0002\u0002\u0002\u0106\u0107\u0007c\u0002",
    "\u0002\u0107\u010c\u0005,\u0017\u0002\u0108\u0109\u00075\u0002\u0002",
    "\u0109\u010b\u00076\u0002\u0002\u010a\u0108\u0003\u0002\u0002\u0002",
    "\u010b\u010e\u0003\u0002\u0002\u0002\u010c\u010a\u0003\u0002\u0002\u0002",
    "\u010c\u010d\u0003\u0002\u0002\u0002\u010d\u0111\u0003\u0002\u0002\u0002",
    "\u010e\u010c\u0003\u0002\u0002\u0002\u010f\u0110\u0007\u001f\u0002\u0002",
    "\u0110\u0112\u0005*\u0016\u0002\u0111\u010f\u0003\u0002\u0002\u0002",
    "\u0111\u0112\u0003\u0002\u0002\u0002\u0112\u0113\u0003\u0002\u0002\u0002",
    "\u0113\u0114\u0005\u000e\b\u0002\u0114\u0017\u0003\u0002\u0002\u0002",
    "\u0115\u011a\u0005<\u001f\u0002\u0116\u011a\u0007\u000b\u0002\u0002",
    "\u0117\u011a\u0007\u001a\u0002\u0002\u0118\u011a\u0007\u001b\u0002\u0002",
    "\u0119\u0115\u0003\u0002\u0002\u0002\u0119\u0116\u0003\u0002\u0002\u0002",
    "\u0119\u0117\u0003\u0002\u0002\u0002\u0119\u0118\u0003\u0002\u0002\u0002",
    "\u011a\u0019\u0003\u0002\u0002\u0002\u011b\u011c\u0005\u0006\u0004\u0002",
    "\u011c\u011d\u0005\u0016\f\u0002\u011d\u001b\u0003\u0002\u0002\u0002",
    "\u011e\u0123\u0005\u001e\u0010\u0002\u011f\u0120\u00078\u0002\u0002",
    "\u0120\u0122\u0005\u001e\u0010\u0002\u0121\u011f\u0003\u0002\u0002\u0002",
    "\u0122\u0125\u0003\u0002\u0002\u0002\u0123\u0121\u0003\u0002\u0002\u0002",
    "\u0123\u0124\u0003\u0002\u0002\u0002\u0124\u001d\u0003\u0002\u0002\u0002",
    "\u0125\u0123\u0003\u0002\u0002\u0002\u0126\u0129\u0005 \u0011\u0002",
    "\u0127\u0128\u0007:\u0002\u0002\u0128\u012a\u0005\"\u0012\u0002\u0129",
    "\u0127\u0003\u0002\u0002\u0002\u0129\u012a\u0003\u0002\u0002\u0002\u012a",
    "\u001f\u0003\u0002\u0002\u0002\u012b\u0130\u0007c\u0002\u0002\u012c",
    "\u012d\u00075\u0002\u0002\u012d\u012f\u00076\u0002\u0002\u012e\u012c",
    "\u0003\u0002\u0002\u0002\u012f\u0132\u0003\u0002\u0002\u0002\u0130\u012e",
    "\u0003\u0002\u0002\u0002\u0130\u0131\u0003\u0002\u0002\u0002\u0131!",
    "\u0003\u0002\u0002\u0002\u0132\u0130\u0003\u0002\u0002\u0002\u0133\u0136",
    "\u0005$\u0013\u0002\u0134\u0136\u0005\u0086D\u0002\u0135\u0133\u0003",
    "\u0002\u0002\u0002\u0135\u0134\u0003\u0002\u0002\u0002\u0136#\u0003",
    "\u0002\u0002\u0002\u0137\u0143\u00073\u0002\u0002\u0138\u013d\u0005",
    "\"\u0012\u0002\u0139\u013a\u00078\u0002\u0002\u013a\u013c\u0005\"\u0012",
    "\u0002\u013b\u0139\u0003\u0002\u0002\u0002\u013c\u013f\u0003\u0002\u0002",
    "\u0002\u013d\u013b\u0003\u0002\u0002\u0002\u013d\u013e\u0003\u0002\u0002",
    "\u0002\u013e\u0141\u0003\u0002\u0002\u0002\u013f\u013d\u0003\u0002\u0002",
    "\u0002\u0140\u0142\u00078\u0002\u0002\u0141\u0140\u0003\u0002\u0002",
    "\u0002\u0141\u0142\u0003\u0002\u0002\u0002\u0142\u0144\u0003\u0002\u0002",
    "\u0002\u0143\u0138\u0003\u0002\u0002\u0002\u0143\u0144\u0003\u0002\u0002",
    "\u0002\u0144\u0145\u0003\u0002\u0002\u0002\u0145\u0146\u00074\u0002",
    "\u0002\u0146%\u0003\u0002\u0002\u0002\u0147\u0149\u0007c\u0002\u0002",
    "\u0148\u014a\u0005\u009aN\u0002\u0149\u0148\u0003\u0002\u0002\u0002",
    "\u0149\u014a\u0003\u0002\u0002\u0002\u014a\u0152\u0003\u0002\u0002\u0002",
    "\u014b\u014c\u00079\u0002\u0002\u014c\u014e\u0007c\u0002\u0002\u014d",
    "\u014f\u0005\u009aN\u0002\u014e\u014d\u0003\u0002\u0002\u0002\u014e",
    "\u014f\u0003\u0002\u0002\u0002\u014f\u0151\u0003\u0002\u0002\u0002\u0150",
    "\u014b\u0003\u0002\u0002\u0002\u0151\u0154\u0003\u0002\u0002\u0002\u0152",
    "\u0150\u0003\u0002\u0002\u0002\u0152\u0153\u0003\u0002\u0002\u0002\u0153",
    "\'\u0003\u0002\u0002\u0002\u0154\u0152\u0003\u0002\u0002\u0002\u0155",
    "\u015b\u0005\u0096L\u0002\u0156\u0158\u0007?\u0002\u0002\u0157\u0159",
    "\u0005\u0096L\u0002\u0158\u0157\u0003\u0002\u0002\u0002\u0158\u0159",
    "\u0003\u0002\u0002\u0002\u0159\u015b\u0003\u0002\u0002\u0002\u015a\u0155",
    "\u0003\u0002\u0002\u0002\u015a\u0156\u0003\u0002\u0002\u0002\u015b)",
    "\u0003\u0002\u0002\u0002\u015c\u0161\u00054\u001b\u0002\u015d\u015e",
    "\u00078\u0002\u0002\u015e\u0160\u00054\u001b\u0002\u015f\u015d\u0003",
    "\u0002\u0002\u0002\u0160\u0163\u0003\u0002\u0002\u0002\u0161\u015f\u0003",
    "\u0002\u0002\u0002\u0161\u0162\u0003\u0002\u0002\u0002\u0162+\u0003",
    "\u0002\u0002\u0002\u0163\u0161\u0003\u0002\u0002\u0002\u0164\u0166\u0007",
    "1\u0002\u0002\u0165\u0167\u0005.\u0018\u0002\u0166\u0165\u0003\u0002",
    "\u0002\u0002\u0166\u0167\u0003\u0002\u0002\u0002\u0167\u0168\u0003\u0002",
    "\u0002\u0002\u0168\u0169\u00072\u0002\u0002\u0169-\u0003\u0002\u0002",
    "\u0002\u016a\u016f\u00050\u0019\u0002\u016b\u016c\u00078\u0002\u0002",
    "\u016c\u016e\u00050\u0019\u0002\u016d\u016b\u0003\u0002\u0002\u0002",
    "\u016e\u0171\u0003\u0002\u0002\u0002\u016f\u016d\u0003\u0002\u0002\u0002",
    "\u016f\u0170\u0003\u0002\u0002\u0002\u0170\u0174\u0003\u0002\u0002\u0002",
    "\u0171\u016f\u0003\u0002\u0002\u0002\u0172\u0173\u00078\u0002\u0002",
    "\u0173\u0175\u00052\u001a\u0002\u0174\u0172\u0003\u0002\u0002\u0002",
    "\u0174\u0175\u0003\u0002\u0002\u0002\u0175\u0178\u0003\u0002\u0002\u0002",
    "\u0176\u0178\u00052\u001a\u0002\u0177\u016a\u0003\u0002\u0002\u0002",
    "\u0177\u0176\u0003\u0002\u0002\u0002\u0178/\u0003\u0002\u0002\u0002",
    "\u0179\u017b\u0005\u0004\u0003\u0002\u017a\u0179\u0003\u0002\u0002\u0002",
    "\u017b\u017e\u0003\u0002\u0002\u0002\u017c\u017a\u0003\u0002\u0002\u0002",
    "\u017c\u017d\u0003\u0002\u0002\u0002\u017d\u017f\u0003\u0002\u0002\u0002",
    "\u017e\u017c\u0003\u0002\u0002\u0002\u017f\u0180\u0005\u0096L\u0002",
    "\u0180\u0181\u0005 \u0011\u0002\u01811\u0003\u0002\u0002\u0002\u0182",
    "\u0184\u0005\u0004\u0003\u0002\u0183\u0182\u0003\u0002\u0002\u0002\u0184",
    "\u0187\u0003\u0002\u0002\u0002\u0185\u0183\u0003\u0002\u0002\u0002\u0185",
    "\u0186\u0003\u0002\u0002\u0002\u0186\u0188\u0003\u0002\u0002\u0002\u0187",
    "\u0185\u0003\u0002\u0002\u0002\u0188\u0189\u0005\u0096L\u0002\u0189",
    "\u018a\u0007_\u0002\u0002\u018a\u018b\u0005 \u0011\u0002\u018b3\u0003",
    "\u0002\u0002\u0002\u018c\u0191\u0007c\u0002\u0002\u018d\u018e\u0007",
    "9\u0002\u0002\u018e\u0190\u0007c\u0002\u0002\u018f\u018d\u0003\u0002",
    "\u0002\u0002\u0190\u0193\u0003\u0002\u0002\u0002\u0191\u018f\u0003\u0002",
    "\u0002\u0002\u0191\u0192\u0003\u0002\u0002\u0002\u01925\u0003\u0002",
    "\u0002\u0002\u0193\u0191\u0003\u0002\u0002\u0002\u0194\u019b\u00058",
    "\u001d\u0002\u0195\u019b\u0005:\u001e\u0002\u0196\u019b\u0007.\u0002",
    "\u0002\u0197\u019b\u0007/\u0002\u0002\u0198\u019b\u0007-\u0002\u0002",
    "\u0199\u019b\u00070\u0002\u0002\u019a\u0194\u0003\u0002\u0002\u0002",
    "\u019a\u0195\u0003\u0002\u0002\u0002\u019a\u0196\u0003\u0002\u0002\u0002",
    "\u019a\u0197\u0003\u0002\u0002\u0002\u019a\u0198\u0003\u0002\u0002\u0002",
    "\u019a\u0199\u0003\u0002\u0002\u0002\u019b7\u0003\u0002\u0002\u0002",
    "\u019c\u019d\t\u0002\u0002\u0002\u019d9\u0003\u0002\u0002\u0002\u019e",
    "\u019f\t\u0003\u0002\u0002\u019f;\u0003\u0002\u0002\u0002\u01a0\u01a1",
    "\u0007^\u0002\u0002\u01a1\u01a8\u00054\u001b\u0002\u01a2\u01a5\u0007",
    "1\u0002\u0002\u01a3\u01a6\u0005> \u0002\u01a4\u01a6\u0005B\"\u0002\u01a5",
    "\u01a3\u0003\u0002\u0002\u0002\u01a5\u01a4\u0003\u0002\u0002\u0002\u01a5",
    "\u01a6\u0003\u0002\u0002\u0002\u01a6\u01a7\u0003\u0002\u0002\u0002\u01a7",
    "\u01a9\u00072\u0002\u0002\u01a8\u01a2\u0003\u0002\u0002\u0002\u01a8",
    "\u01a9\u0003\u0002\u0002\u0002\u01a9=\u0003\u0002\u0002\u0002\u01aa",
    "\u01af\u0005@!\u0002\u01ab\u01ac\u00078\u0002\u0002\u01ac\u01ae\u0005",
    "@!\u0002\u01ad\u01ab\u0003\u0002\u0002\u0002\u01ae\u01b1\u0003\u0002",
    "\u0002\u0002\u01af\u01ad\u0003\u0002\u0002\u0002\u01af\u01b0\u0003\u0002",
    "\u0002\u0002\u01b0?\u0003\u0002\u0002\u0002\u01b1\u01af\u0003\u0002",
    "\u0002\u0002\u01b2\u01b3\u0007c\u0002\u0002\u01b3\u01b4\u0007:\u0002",
    "\u0002\u01b4\u01b5\u0005B\"\u0002\u01b5A\u0003\u0002\u0002\u0002\u01b6",
    "\u01ba\u0005\u0086D\u0002\u01b7\u01ba\u0005<\u001f\u0002\u01b8\u01ba",
    "\u0005D#\u0002\u01b9\u01b6\u0003\u0002\u0002\u0002\u01b9\u01b7\u0003",
    "\u0002\u0002\u0002\u01b9\u01b8\u0003\u0002\u0002\u0002\u01baC\u0003",
    "\u0002\u0002\u0002\u01bb\u01c4\u00073\u0002\u0002\u01bc\u01c1\u0005",
    "B\"\u0002\u01bd\u01be\u00078\u0002\u0002\u01be\u01c0\u0005B\"\u0002",
    "\u01bf\u01bd\u0003\u0002\u0002\u0002\u01c0\u01c3\u0003\u0002\u0002\u0002",
    "\u01c1\u01bf\u0003\u0002\u0002\u0002\u01c1\u01c2\u0003\u0002\u0002\u0002",
    "\u01c2\u01c5\u0003\u0002\u0002\u0002\u01c3\u01c1\u0003\u0002\u0002\u0002",
    "\u01c4\u01bc\u0003\u0002\u0002\u0002\u01c4\u01c5\u0003\u0002\u0002\u0002",
    "\u01c5\u01c7\u0003\u0002\u0002\u0002\u01c6\u01c8\u00078\u0002\u0002",
    "\u01c7\u01c6\u0003\u0002\u0002\u0002\u01c7\u01c8\u0003\u0002\u0002\u0002",
    "\u01c8\u01c9\u0003\u0002\u0002\u0002\u01c9\u01ca\u00074\u0002\u0002",
    "\u01caE\u0003\u0002\u0002\u0002\u01cb\u01cc\u0007\u000b\u0002\u0002",
    "\u01cc\u01cd\u0005B\"\u0002\u01cdG\u0003\u0002\u0002\u0002\u01ce\u01d2",
    "\u00073\u0002\u0002\u01cf\u01d1\u0005L\'\u0002\u01d0\u01cf\u0003\u0002",
    "\u0002\u0002\u01d1\u01d4\u0003\u0002\u0002\u0002\u01d2\u01d0\u0003\u0002",
    "\u0002\u0002\u01d2\u01d3\u0003\u0002\u0002\u0002\u01d3\u01d5\u0003\u0002",
    "\u0002\u0002\u01d4\u01d2\u0003\u0002\u0002\u0002\u01d5\u01d8\u00074",
    "\u0002\u0002\u01d6\u01d8\u0005J&\u0002\u01d7\u01ce\u0003\u0002\u0002",
    "\u0002\u01d7\u01d6\u0003\u0002\u0002\u0002\u01d8I\u0003\u0002\u0002",
    "\u0002\u01d9\u01dd\u00073\u0002\u0002\u01da\u01dc\u0005L\'\u0002\u01db",
    "\u01da\u0003\u0002\u0002\u0002\u01dc\u01df\u0003\u0002\u0002\u0002\u01dd",
    "\u01db\u0003\u0002\u0002\u0002\u01dd\u01de\u0003\u0002\u0002\u0002\u01de",
    "\u01e0\u0003\u0002\u0002\u0002\u01df\u01dd\u0003\u0002\u0002\u0002\u01e0",
    "\u01e1\u0005L\'\u0002\u01e1K\u0003\u0002\u0002\u0002\u01e2\u01e3\u0005",
    "P)\u0002\u01e3\u01e4\u00077\u0002\u0002\u01e4\u01e8\u0003\u0002\u0002",
    "\u0002\u01e5\u01e8\u0005N(\u0002\u01e6\u01e8\u0005R*\u0002\u01e7\u01e2",
    "\u0003\u0002\u0002\u0002\u01e7\u01e5\u0003\u0002\u0002\u0002\u01e7\u01e6",
    "\u0003\u0002\u0002\u0002\u01e8M\u0003\u0002\u0002\u0002\u01e9\u01eb",
    "\u0005\u0004\u0003\u0002\u01ea\u01e9\u0003\u0002\u0002\u0002\u01eb\u01ee",
    "\u0003\u0002\u0002\u0002\u01ec\u01ea\u0003\u0002\u0002\u0002\u01ec\u01ed",
    "\u0003\u0002\u0002\u0002\u01ed\u01ef\u0003\u0002\u0002\u0002\u01ee\u01ec",
    "\u0003\u0002\u0002\u0002\u01ef\u01f0\u0005\u0096L\u0002\u01f0\u01f1",
    "\u0005\u001c\u000f\u0002\u01f1O\u0003\u0002\u0002\u0002\u01f2\u01f3",
    "\u0005\u0096L\u0002\u01f3\u01f4\u0005\u001c\u000f\u0002\u01f4Q\u0003",
    "\u0002\u0002\u0002\u01f5\u0274\u0005H%\u0002\u01f6\u01fa\u0007\u0013",
    "\u0002\u0002\u01f7\u01fb\u0005|?\u0002\u01f8\u01fb\u0005~@\u0002\u01f9",
    "\u01fb\u0005\u0080A\u0002\u01fa\u01f7\u0003\u0002\u0002\u0002\u01fa",
    "\u01f8\u0003\u0002\u0002\u0002\u01fa\u01f9\u0003\u0002\u0002\u0002\u01fb",
    "\u01fc\u0003\u0002\u0002\u0002\u01fc\u01ff\u0005R*\u0002\u01fd\u01fe",
    "\u0007\u000e\u0002\u0002\u01fe\u0200\u0005R*\u0002\u01ff\u01fd\u0003",
    "\u0002\u0002\u0002\u01ff\u0200\u0003\u0002\u0002\u0002\u0200\u0274\u0003",
    "\u0002\u0002\u0002\u0201\u0202\u0007\u0012\u0002\u0002\u0202\u0203\u0007",
    "1\u0002\u0002\u0203\u0204\u0005v<\u0002\u0204\u0205\u00072\u0002\u0002",
    "\u0205\u0206\u0005R*\u0002\u0206\u0274\u0003\u0002\u0002\u0002\u0207",
    "\u0274\u0005T+\u0002\u0208\u0274\u0005V,\u0002\u0209\u0274\u0005^0\u0002",
    "\u020a\u0274\u0005X-\u0002\u020b\u020c\u0007&\u0002\u0002\u020c\u020d",
    "\u00071\u0002\u0002\u020d\u020e\u0007c\u0002\u0002\u020e\u0274\u0007",
    "2\u0002\u0002\u020f\u0213\u0007$\u0002\u0002\u0210\u0214\u0005|?\u0002",
    "\u0211\u0214\u0005~@\u0002\u0212\u0214\u0005\u0080A\u0002\u0213\u0210",
    "\u0003\u0002\u0002\u0002\u0213\u0211\u0003\u0002\u0002\u0002\u0213\u0212",
    "\u0003\u0002\u0002\u0002\u0214\u0215\u0003\u0002\u0002\u0002\u0215\u0216",
    "\u0005R*\u0002\u0216\u0274\u0003\u0002\u0002\u0002\u0217\u0218\u0007",
    "\f\u0002\u0002\u0218\u0219\u0005R*\u0002\u0219\u021d\u0007$\u0002\u0002",
    "\u021a\u021e\u0005|?\u0002\u021b\u021e\u0005~@\u0002\u021c\u021e\u0005",
    "\u0080A\u0002\u021d\u021a\u0003\u0002\u0002\u0002\u021d\u021b\u0003",
    "\u0002\u0002\u0002\u021d\u021c\u0003\u0002\u0002\u0002\u021e\u021f\u0003",
    "\u0002\u0002\u0002\u021f\u0220\u00077\u0002\u0002\u0220\u0274\u0003",
    "\u0002\u0002\u0002\u0221\u0222\u0007!\u0002\u0002\u0222\u022c\u0005",
    "H%\u0002\u0223\u0225\u0005f4\u0002\u0224\u0223\u0003\u0002\u0002\u0002",
    "\u0225\u0226\u0003\u0002\u0002\u0002\u0226\u0224\u0003\u0002\u0002\u0002",
    "\u0226\u0227\u0003\u0002\u0002\u0002\u0227\u0229\u0003\u0002\u0002\u0002",
    "\u0228\u022a\u0005j6\u0002\u0229\u0228\u0003\u0002\u0002\u0002\u0229",
    "\u022a\u0003\u0002\u0002\u0002\u022a\u022d\u0003\u0002\u0002\u0002\u022b",
    "\u022d\u0005j6\u0002\u022c\u0224\u0003\u0002\u0002\u0002\u022c\u022b",
    "\u0003\u0002\u0002\u0002\u022d\u0274\u0003\u0002\u0002\u0002\u022e\u022f",
    "\u0007!\u0002\u0002\u022f\u0230\u0005l7\u0002\u0230\u0234\u0005H%\u0002",
    "\u0231\u0233\u0005f4\u0002\u0232\u0231\u0003\u0002\u0002\u0002\u0233",
    "\u0236\u0003\u0002\u0002\u0002\u0234\u0232\u0003\u0002\u0002\u0002\u0234",
    "\u0235\u0003\u0002\u0002\u0002\u0235\u0238\u0003\u0002\u0002\u0002\u0236",
    "\u0234\u0003\u0002\u0002\u0002\u0237\u0239\u0005j6\u0002\u0238\u0237",
    "\u0003\u0002\u0002\u0002\u0238\u0239\u0003\u0002\u0002\u0002\u0239\u0274",
    "\u0003\u0002\u0002\u0002\u023a\u023e\u0007\u001c\u0002\u0002\u023b\u023f",
    "\u0005|?\u0002\u023c\u023f\u0005~@\u0002\u023d\u023f\u0005\u0080A\u0002",
    "\u023e\u023b\u0003\u0002\u0002\u0002\u023e\u023c\u0003\u0002\u0002\u0002",
    "\u023e\u023d\u0003\u0002\u0002\u0002\u023f\u0240\u0003\u0002\u0002\u0002",
    "\u0240\u0244\u00073\u0002\u0002\u0241\u0243\u0005r:\u0002\u0242\u0241",
    "\u0003\u0002\u0002\u0002\u0243\u0246\u0003\u0002\u0002\u0002\u0244\u0242",
    "\u0003\u0002\u0002\u0002\u0244\u0245\u0003\u0002\u0002\u0002\u0245\u024a",
    "\u0003\u0002\u0002\u0002\u0246\u0244\u0003\u0002\u0002\u0002\u0247\u0249",
    "\u0005t;\u0002\u0248\u0247\u0003\u0002\u0002\u0002\u0249\u024c\u0003",
    "\u0002\u0002\u0002\u024a\u0248\u0003\u0002\u0002\u0002\u024a\u024b\u0003",
    "\u0002\u0002\u0002\u024b\u024d\u0003\u0002\u0002\u0002\u024c\u024a\u0003",
    "\u0002\u0002\u0002\u024d\u024e\u00074\u0002\u0002\u024e\u0274\u0003",
    "\u0002\u0002\u0002\u024f\u0253\u0007\u001d\u0002\u0002\u0250\u0254\u0005",
    "|?\u0002\u0251\u0254\u0005~@\u0002\u0252\u0254\u0005\u0080A\u0002\u0253",
    "\u0250\u0003\u0002\u0002\u0002\u0253\u0251\u0003\u0002\u0002\u0002\u0253",
    "\u0252\u0003\u0002\u0002\u0002\u0254\u0255\u0003\u0002\u0002\u0002\u0255",
    "\u0256\u0005H%\u0002\u0256\u0274\u0003\u0002\u0002\u0002\u0257\u0259",
    "\u0007\u0018\u0002\u0002\u0258\u025a\u0005\u0086D\u0002\u0259\u0258",
    "\u0003\u0002\u0002\u0002\u0259\u025a\u0003\u0002\u0002\u0002\u025a\u025b",
    "\u0003\u0002\u0002\u0002\u025b\u0274\u00077\u0002\u0002\u025c\u0274",
    "\u0005`1\u0002\u025d\u0274\u0005b2\u0002\u025e\u025f\u0007\u001e\u0002",
    "\u0002\u025f\u0260\u0005\u0086D\u0002\u0260\u0261\u00077\u0002\u0002",
    "\u0261\u0274\u0003\u0002\u0002\u0002\u0262\u0264\u0007\u0004\u0002\u0002",
    "\u0263\u0265\u0007c\u0002\u0002\u0264\u0263\u0003\u0002\u0002\u0002",
    "\u0264\u0265\u0003\u0002\u0002\u0002\u0265\u0266\u0003\u0002\u0002\u0002",
    "\u0266\u0274\u00077\u0002\u0002\u0267\u0269\u0007\n\u0002\u0002\u0268",
    "\u026a\u0007c\u0002\u0002\u0269\u0268\u0003\u0002\u0002\u0002\u0269",
    "\u026a\u0003\u0002\u0002\u0002\u026a\u026b\u0003\u0002\u0002\u0002\u026b",
    "\u0274\u00077\u0002\u0002\u026c\u0274\u00077\u0002\u0002\u026d\u026e",
    "\u0005\u0086D\u0002\u026e\u026f\u00077\u0002\u0002\u026f\u0274\u0003",
    "\u0002\u0002\u0002\u0270\u0271\u0007c\u0002\u0002\u0271\u0272\u0007",
    "@\u0002\u0002\u0272\u0274\u0005R*\u0002\u0273\u01f5\u0003\u0002\u0002",
    "\u0002\u0273\u01f6\u0003\u0002\u0002\u0002\u0273\u0201\u0003\u0002\u0002",
    "\u0002\u0273\u0207\u0003\u0002\u0002\u0002\u0273\u0208\u0003\u0002\u0002",
    "\u0002\u0273\u0209\u0003\u0002\u0002\u0002\u0273\u020a\u0003\u0002\u0002",
    "\u0002\u0273\u020b\u0003\u0002\u0002\u0002\u0273\u020f\u0003\u0002\u0002",
    "\u0002\u0273\u0217\u0003\u0002\u0002\u0002\u0273\u0221\u0003\u0002\u0002",
    "\u0002\u0273\u022e\u0003\u0002\u0002\u0002\u0273\u023a\u0003\u0002\u0002",
    "\u0002\u0273\u024f\u0003\u0002\u0002\u0002\u0273\u0257\u0003\u0002\u0002",
    "\u0002\u0273\u025c\u0003\u0002\u0002\u0002\u0273\u025d\u0003\u0002\u0002",
    "\u0002\u0273\u025e\u0003\u0002\u0002\u0002\u0273\u0262\u0003\u0002\u0002",
    "\u0002\u0273\u0267\u0003\u0002\u0002\u0002\u0273\u026c\u0003\u0002\u0002",
    "\u0002\u0273\u026d\u0003\u0002\u0002\u0002\u0273\u0270\u0003\u0002\u0002",
    "\u0002\u0274S\u0003\u0002\u0002\u0002\u0275\u0276\u0007%\u0002\u0002",
    "\u0276\u0277\u00071\u0002\u0002\u0277\u0278\t\u0004\u0002\u0002\u0278",
    "\u0279\u00072\u0002\u0002\u0279\u027a\u00077\u0002\u0002\u027aU\u0003",
    "\u0002\u0002\u0002\u027b\u027c\u0007%\u0002\u0002\u027c\u027d\u0007",
    "1\u0002\u0002\u027d\u027e\u0007/\u0002\u0002\u027e\u027f\u0007I\u0002",
    "\u0002\u027f\u0286\u0007c\u0002\u0002\u0280\u0281\u0007I\u0002\u0002",
    "\u0281\u0282\u0007/\u0002\u0002\u0282\u0283\u0007I\u0002\u0002\u0283",
    "\u0285\u0007c\u0002\u0002\u0284\u0280\u0003\u0002\u0002\u0002\u0285",
    "\u0288\u0003\u0002\u0002\u0002\u0286\u0284\u0003\u0002\u0002\u0002\u0286",
    "\u0287\u0003\u0002\u0002\u0002\u0287\u0289\u0003\u0002\u0002\u0002\u0288",
    "\u0286\u0003\u0002\u0002\u0002\u0289\u028a\u00072\u0002\u0002\u028a",
    "\u028b\u00077\u0002\u0002\u028bW\u0003\u0002\u0002\u0002\u028c\u028d",
    "\u0007&\u0002\u0002\u028d\u028e\u00071\u0002\u0002\u028e\u028f\u0007",
    "2\u0002\u0002\u028fY\u0003\u0002\u0002\u0002\u0290\u0291\u0005\u0090",
    "I\u0002\u0291\u0292\t\u0005\u0002\u0002\u0292\u0293\u0005\u0090I\u0002",
    "\u0293\u029b\u0003\u0002\u0002\u0002\u0294\u029a\u0007E\u0002\u0002",
    "\u0295\u0296\u0007F\u0002\u0002\u0296\u0297\u0005\u0090I\u0002\u0297",
    "\u0298\t\u0005\u0002\u0002\u0298\u029a\u0003\u0002\u0002\u0002\u0299",
    "\u0294\u0003\u0002\u0002\u0002\u0299\u0295\u0003\u0002\u0002\u0002\u029a",
    "\u029d\u0003\u0002\u0002\u0002\u029b\u0299\u0003\u0002\u0002\u0002\u029b",
    "\u029c\u0003\u0002\u0002\u0002\u029c[\u0003\u0002\u0002\u0002\u029d",
    "\u029b\u0003\u0002\u0002\u0002\u029e\u029f\u0007%\u0002\u0002\u029f",
    "\u02a0\u00071\u0002\u0002\u02a0\u02a1\u0007d\u0002\u0002\u02a1\u02a2",
    "\u00072\u0002\u0002\u02a2]\u0003\u0002\u0002\u0002\u02a3\u02a4\u0007",
    "%\u0002\u0002\u02a4\u02a5\u00071\u0002\u0002\u02a5\u02a6\t\u0004\u0002",
    "\u0002\u02a6\u02a7\u0007I\u0002\u0002\u02a7\u02a9\u0007c\u0002\u0002",
    "\u02a8\u02aa\t\u0006\u0002\u0002\u02a9\u02a8\u0003\u0002\u0002\u0002",
    "\u02aa\u02ab\u0003\u0002\u0002\u0002\u02ab\u02a9\u0003\u0002\u0002\u0002",
    "\u02ab\u02ac\u0003\u0002\u0002\u0002\u02ac\u02ad\u0003\u0002\u0002\u0002",
    "\u02ad\u02ae\u00072\u0002\u0002\u02ae\u02af\u00077\u0002\u0002\u02af",
    "_\u0003\u0002\u0002\u0002\u02b0\u02b1\u0007\u0018\u0002\u0002\u02b1",
    "\u02b2\u0005\u0098M\u0002\u02b2\u02b3\u00077\u0002\u0002\u02b3\u02b7",
    "\u0003\u0002\u0002\u0002\u02b4\u02b5\u0007\u0018\u0002\u0002\u02b5\u02b7",
    "\u0005\u0098M\u0002\u02b6\u02b0\u0003\u0002\u0002\u0002\u02b6\u02b4",
    "\u0003\u0002\u0002\u0002\u02b7a\u0003\u0002\u0002\u0002\u02b8\u02ba",
    "\u0007\u0018\u0002\u0002\u02b9\u02bb\u0005\u0086D\u0002\u02ba\u02b9",
    "\u0003\u0002\u0002\u0002\u02ba\u02bb\u0003\u0002\u0002\u0002\u02bbc",
    "\u0003\u0002\u0002\u0002\u02bc\u02bd\u0007\u0012\u0002\u0002\u02bd\u02be",
    "\u00071\u0002\u0002\u02be\u02bf\u0005v<\u0002\u02bf\u02c0\u0005R*\u0002",
    "\u02c0\u02c7\u0003\u0002\u0002\u0002\u02c1\u02c2\u0007\u0012\u0002\u0002",
    "\u02c2\u02c3\u0005v<\u0002\u02c3\u02c4\u00072\u0002\u0002\u02c4\u02c5",
    "\u0005R*\u0002\u02c5\u02c7\u0003\u0002\u0002\u0002\u02c6\u02bc\u0003",
    "\u0002\u0002\u0002\u02c6\u02c1\u0003\u0002\u0002\u0002\u02c7e\u0003",
    "\u0002\u0002\u0002\u02c8\u02c9\u0007\u0007\u0002\u0002\u02c9\u02cd\u0007",
    "1\u0002\u0002\u02ca\u02cc\u0005\u0004\u0003\u0002\u02cb\u02ca\u0003",
    "\u0002\u0002\u0002\u02cc\u02cf\u0003\u0002\u0002\u0002\u02cd\u02cb\u0003",
    "\u0002\u0002\u0002\u02cd\u02ce\u0003\u0002\u0002\u0002\u02ce\u02d0\u0003",
    "\u0002\u0002\u0002\u02cf\u02cd\u0003\u0002\u0002\u0002\u02d0\u02d1\u0005",
    "h5\u0002\u02d1\u02d2\u0007c\u0002\u0002\u02d2\u02d3\u00072\u0002\u0002",
    "\u02d3\u02d4\u0005H%\u0002\u02d4g\u0003\u0002\u0002\u0002\u02d5\u02da",
    "\u00054\u001b\u0002\u02d6\u02d7\u0007N\u0002\u0002\u02d7\u02d9\u0005",
    "4\u001b\u0002\u02d8\u02d6\u0003\u0002\u0002\u0002\u02d9\u02dc\u0003",
    "\u0002\u0002\u0002\u02da\u02d8\u0003\u0002\u0002\u0002\u02da\u02db\u0003",
    "\u0002\u0002\u0002\u02dbi\u0003\u0002\u0002\u0002\u02dc\u02da\u0003",
    "\u0002\u0002\u0002\u02dd\u02de\u0007\u0010\u0002\u0002\u02de\u02df\u0005",
    "H%\u0002\u02dfk\u0003\u0002\u0002\u0002\u02e0\u02e1\u00071\u0002\u0002",
    "\u02e1\u02e3\u0005n8\u0002\u02e2\u02e4\u00077\u0002\u0002\u02e3\u02e2",
    "\u0003\u0002\u0002\u0002\u02e3\u02e4\u0003\u0002\u0002\u0002\u02e4\u02e5",
    "\u0003\u0002\u0002\u0002\u02e5\u02e6\u00072\u0002\u0002\u02e6m\u0003",
    "\u0002\u0002\u0002\u02e7\u02ec\u0005p9\u0002\u02e8\u02e9\u00077\u0002",
    "\u0002\u02e9\u02eb\u0005p9\u0002\u02ea\u02e8\u0003\u0002\u0002\u0002",
    "\u02eb\u02ee\u0003\u0002\u0002\u0002\u02ec\u02ea\u0003\u0002\u0002\u0002",
    "\u02ec\u02ed\u0003\u0002\u0002\u0002\u02edo\u0003\u0002\u0002\u0002",
    "\u02ee\u02ec\u0003\u0002\u0002\u0002\u02ef\u02f1\u0005\u0004\u0003\u0002",
    "\u02f0\u02ef\u0003\u0002\u0002\u0002\u02f1\u02f4\u0003\u0002\u0002\u0002",
    "\u02f2\u02f0\u0003\u0002\u0002\u0002\u02f2\u02f3\u0003\u0002\u0002\u0002",
    "\u02f3\u02f5\u0003\u0002\u0002\u0002\u02f4\u02f2\u0003\u0002\u0002\u0002",
    "\u02f5\u02f6\u0005&\u0014\u0002\u02f6\u02f7\u0005 \u0011\u0002\u02f7",
    "\u02f8\u0007:\u0002\u0002\u02f8\u02f9\u0005\u0086D\u0002\u02f9q\u0003",
    "\u0002\u0002\u0002\u02fa\u02fc\u0005t;\u0002\u02fb\u02fa\u0003\u0002",
    "\u0002\u0002\u02fc\u02fd\u0003\u0002\u0002\u0002\u02fd\u02fb\u0003\u0002",
    "\u0002\u0002\u02fd\u02fe\u0003\u0002\u0002\u0002\u02fe\u0300\u0003\u0002",
    "\u0002\u0002\u02ff\u0301\u0005L\'\u0002\u0300\u02ff\u0003\u0002\u0002",
    "\u0002\u0301\u0302\u0003\u0002\u0002\u0002\u0302\u0300\u0003\u0002\u0002",
    "\u0002\u0302\u0303\u0003\u0002\u0002\u0002\u0303s\u0003\u0002\u0002",
    "\u0002\u0304\u0307\u0007\u0006\u0002\u0002\u0305\u0308\u0005\u0086D",
    "\u0002\u0306\u0308\u0007c\u0002\u0002\u0307\u0305\u0003\u0002\u0002",
    "\u0002\u0307\u0306\u0003\u0002\u0002\u0002\u0308\u0309\u0003\u0002\u0002",
    "\u0002\u0309\u030d\u0007@\u0002\u0002\u030a\u030b\u0007\u000b\u0002",
    "\u0002\u030b\u030d\u0007@\u0002\u0002\u030c\u0304\u0003\u0002\u0002",
    "\u0002\u030c\u030a\u0003\u0002\u0002\u0002\u030du\u0003\u0002\u0002",
    "\u0002\u030e\u031b\u0005z>\u0002\u030f\u0311\u0005x=\u0002\u0310\u030f",
    "\u0003\u0002\u0002\u0002\u0310\u0311\u0003\u0002\u0002\u0002\u0311\u0312",
    "\u0003\u0002\u0002\u0002\u0312\u0314\u00077\u0002\u0002\u0313\u0315",
    "\u0005\u0086D\u0002\u0314\u0313\u0003\u0002\u0002\u0002\u0314\u0315",
    "\u0003\u0002\u0002\u0002\u0315\u0316\u0003\u0002\u0002\u0002\u0316\u0318",
    "\u00077\u0002\u0002\u0317\u0319\u0005\u0082B\u0002\u0318\u0317\u0003",
    "\u0002\u0002\u0002\u0318\u0319\u0003\u0002\u0002\u0002\u0319\u031b\u0003",
    "\u0002\u0002\u0002\u031a\u030e\u0003\u0002\u0002\u0002\u031a\u0310\u0003",
    "\u0002\u0002\u0002\u031bw\u0003\u0002\u0002\u0002\u031c\u031f\u0005",
    "P)\u0002\u031d\u031f\u0005\u0082B\u0002\u031e\u031c\u0003\u0002\u0002",
    "\u0002\u031e\u031d\u0003\u0002\u0002\u0002\u031fy\u0003\u0002\u0002",
    "\u0002\u0320\u0322\u0005\u0004\u0003\u0002\u0321\u0320\u0003\u0002\u0002",
    "\u0002\u0322\u0325\u0003\u0002\u0002\u0002\u0323\u0321\u0003\u0002\u0002",
    "\u0002\u0323\u0324\u0003\u0002\u0002\u0002\u0324\u0326\u0003\u0002\u0002",
    "\u0002\u0325\u0323\u0003\u0002\u0002\u0002\u0326\u0327\u0005\u0096L",
    "\u0002\u0327\u0328\u0005 \u0011\u0002\u0328\u0329\u0007@\u0002\u0002",
    "\u0329\u032a\u0005\u0086D\u0002\u032a{\u0003\u0002\u0002\u0002\u032b",
    "\u032c\u00071\u0002\u0002\u032c\u032d\u0005\u0086D\u0002\u032d\u032e",
    "\u00072\u0002\u0002\u032e}\u0003\u0002\u0002\u0002\u032f\u0330\u0007",
    "1\u0002\u0002\u0330\u0331\u00071\u0002\u0002\u0331\u0332\u0005\u0086",
    "D\u0002\u0332\u0333\u00072\u0002\u0002\u0333\u007f\u0003\u0002\u0002",
    "\u0002\u0334\u0335\u00071\u0002\u0002\u0335\u0336\u0005\u0086D\u0002",
    "\u0336\u0337\u00072\u0002\u0002\u0337\u0338\u00072\u0002\u0002\u0338",
    "\u0081\u0003\u0002\u0002\u0002\u0339\u033e\u0005\u0086D\u0002\u033a",
    "\u033b\u00078\u0002\u0002\u033b\u033d\u0005\u0086D\u0002\u033c\u033a",
    "\u0003\u0002\u0002\u0002\u033d\u0340\u0003\u0002\u0002\u0002\u033e\u033c",
    "\u0003\u0002\u0002\u0002\u033e\u033f\u0003\u0002\u0002\u0002\u033f\u0083",
    "\u0003\u0002\u0002\u0002\u0340\u033e\u0003\u0002\u0002\u0002\u0341\u0342",
    "\u0007c\u0002\u0002\u0342\u0344\u00071\u0002\u0002\u0343\u0345\u0005",
    "\u0082B\u0002\u0344\u0343\u0003\u0002\u0002\u0002\u0344\u0345\u0003",
    "\u0002\u0002\u0002\u0345\u0346\u0003\u0002\u0002\u0002\u0346\u0347\u0007",
    "2\u0002\u0002\u0347\u0085\u0003\u0002\u0002\u0002\u0348\u0349\bD\u0001",
    "\u0002\u0349\u0366\u0005\u0090I\u0002\u034a\u0366\u0005\u0088E\u0002",
    "\u034b\u0366\u0005\u0084C\u0002\u034c\u034d\u00071\u0002\u0002\u034d",
    "\u034e\u0005\u0096L\u0002\u034e\u034f\u00072\u0002\u0002\u034f\u0350",
    "\u0005\u0086D\u0018\u0350\u0366\u0003\u0002\u0002\u0002\u0351\u0352",
    "\t\u0007\u0002\u0002\u0352\u0366\u0005\u0086D\u0017\u0353\u0354\t\b",
    "\u0002\u0002\u0354\u0366\u0005\u0086D\u0016\u0355\u0356\u0007c\u0002",
    "\u0002\u0356\u0366\t\t\u0002\u0002\u0357\u0366\u0005\u008aF\u0002\u0358",
    "\u0366\u0005\u008cG\u0002\u0359\u0366\u0005\u008eH\u0002\u035a\u035b",
    "\u0005\u0096L\u0002\u035b\u035d\u0007]\u0002\u0002\u035c\u035e\u0005",
    "\u009aN\u0002\u035d\u035c\u0003\u0002\u0002\u0002\u035d\u035e\u0003",
    "\u0002\u0002\u0002\u035e\u035f\u0003\u0002\u0002\u0002\u035f\u0360\u0007",
    "c\u0002\u0002\u0360\u0366\u0003\u0002\u0002\u0002\u0361\u0363\u0007",
    "]\u0002\u0002\u0362\u0364\u0005\u009aN\u0002\u0363\u0362\u0003\u0002",
    "\u0002\u0002\u0363\u0364\u0003\u0002\u0002\u0002\u0364\u0366\u0003\u0002",
    "\u0002\u0002\u0365\u0348\u0003\u0002\u0002\u0002\u0365\u034a\u0003\u0002",
    "\u0002\u0002\u0365\u034b\u0003\u0002\u0002\u0002\u0365\u034c\u0003\u0002",
    "\u0002\u0002\u0365\u0351\u0003\u0002\u0002\u0002\u0365\u0353\u0003\u0002",
    "\u0002\u0002\u0365\u0355\u0003\u0002\u0002\u0002\u0365\u0357\u0003\u0002",
    "\u0002\u0002\u0365\u0358\u0003\u0002\u0002\u0002\u0365\u0359\u0003\u0002",
    "\u0002\u0002\u0365\u035a\u0003\u0002\u0002\u0002\u0365\u0361\u0003\u0002",
    "\u0002\u0002\u0366\u03a9\u0003\u0002\u0002\u0002\u0367\u0368\f\u0011",
    "\u0002\u0002\u0368\u0369\t\n\u0002\u0002\u0369\u03a8\u0005\u0086D\u0012",
    "\u036a\u036b\f\u0010\u0002\u0002\u036b\u036c\t\u000b\u0002\u0002\u036c",
    "\u03a8\u0005\u0086D\u0011\u036d\u0375\f\u000f\u0002\u0002\u036e\u036f",
    "\u0007<\u0002\u0002\u036f\u0376\u0007<\u0002\u0002\u0370\u0371\u0007",
    ";\u0002\u0002\u0371\u0372\u0007;\u0002\u0002\u0372\u0376\u0007;\u0002",
    "\u0002\u0373\u0374\u0007;\u0002\u0002\u0374\u0376\u0007;\u0002\u0002",
    "\u0375\u036e\u0003\u0002\u0002\u0002\u0375\u0370\u0003\u0002\u0002\u0002",
    "\u0375\u0373\u0003\u0002\u0002\u0002\u0376\u0377\u0003\u0002\u0002\u0002",
    "\u0377\u03a8\u0005\u0086D\u0010\u0378\u0379\f\u000e\u0002\u0002\u0379",
    "\u037a\t\f\u0002\u0002\u037a\u03a8\u0005\u0086D\u000f\u037b\u037c\f",
    "\r\u0002\u0002\u037c\u037d\t\r\u0002\u0002\u037d\u03a8\u0005\u0086D",
    "\u000e\u037e\u037f\f\f\u0002\u0002\u037f\u0380\u0007M\u0002\u0002\u0380",
    "\u03a8\u0005\u0086D\r\u0381\u0382\f\u000b\u0002\u0002\u0382\u0383\u0007",
    "O\u0002\u0002\u0383\u03a8\u0005\u0086D\f\u0384\u0385\f\n\u0002\u0002",
    "\u0385\u0386\u0007N\u0002\u0002\u0386\u03a8\u0005\u0086D\u000b\u0387",
    "\u0388\f\t\u0002\u0002\u0388\u0389\u0007E\u0002\u0002\u0389\u03a8\u0005",
    "\u0086D\n\u038a\u038b\f\b\u0002\u0002\u038b\u038c\u0007F\u0002\u0002",
    "\u038c\u03a8\u0005\u0086D\t\u038d\u038e\f\u0007\u0002\u0002\u038e\u038f",
    "\u0007?\u0002\u0002\u038f\u0390\u0005\u0086D\u0002\u0390\u0391\u0007",
    "@\u0002\u0002\u0391\u0392\u0005\u0086D\u0007\u0392\u03a8\u0003\u0002",
    "\u0002\u0002\u0393\u0394\f\u0006\u0002\u0002\u0394\u0395\t\u000e\u0002",
    "\u0002\u0395\u03a8\u0005\u0086D\u0006\u0396\u0397\f\u001b\u0002\u0002",
    "\u0397\u039a\u00079\u0002\u0002\u0398\u039b\u0007c\u0002\u0002\u0399",
    "\u039b\u0005\u0084C\u0002\u039a\u0398\u0003\u0002\u0002\u0002\u039a",
    "\u0399\u0003\u0002\u0002\u0002\u039b\u03a8\u0003\u0002\u0002\u0002\u039c",
    "\u039d\f\u001a\u0002\u0002\u039d\u039e\u00075\u0002\u0002\u039e\u039f",
    "\u0005\u0086D\u0002\u039f\u03a0\u00076\u0002\u0002\u03a0\u03a8\u0003",
    "\u0002\u0002\u0002\u03a1\u03a2\f\u0005\u0002\u0002\u03a2\u03a4\u0007",
    "]\u0002\u0002\u03a3\u03a5\u0005\u009aN\u0002\u03a4\u03a3\u0003\u0002",
    "\u0002\u0002\u03a4\u03a5\u0003\u0002\u0002\u0002\u03a5\u03a6\u0003\u0002",
    "\u0002\u0002\u03a6\u03a8\u0007c\u0002\u0002\u03a7\u0367\u0003\u0002",
    "\u0002\u0002\u03a7\u036a\u0003\u0002\u0002\u0002\u03a7\u036d\u0003\u0002",
    "\u0002\u0002\u03a7\u0378\u0003\u0002\u0002\u0002\u03a7\u037b\u0003\u0002",
    "\u0002\u0002\u03a7\u037e\u0003\u0002\u0002\u0002\u03a7\u0381\u0003\u0002",
    "\u0002\u0002\u03a7\u0384\u0003\u0002\u0002\u0002\u03a7\u0387\u0003\u0002",
    "\u0002\u0002\u03a7\u038a\u0003\u0002\u0002\u0002\u03a7\u038d\u0003\u0002",
    "\u0002\u0002\u03a7\u0393\u0003\u0002\u0002\u0002\u03a7\u0396\u0003\u0002",
    "\u0002\u0002\u03a7\u039c\u0003\u0002\u0002\u0002\u03a7\u03a1\u0003\u0002",
    "\u0002\u0002\u03a8\u03ab\u0003\u0002\u0002\u0002\u03a9\u03a7\u0003\u0002",
    "\u0002\u0002\u03a9\u03aa\u0003\u0002\u0002\u0002\u03aa\u0087\u0003\u0002",
    "\u0002\u0002\u03ab\u03a9\u0003\u0002\u0002\u0002\u03ac\u03ad\u00071",
    "\u0002\u0002\u03ad\u03ae\u0005\u0086D\u0002\u03ae\u03b2\u00072\u0002",
    "\u0002\u03af\u03b1\u00072\u0002\u0002\u03b0\u03af\u0003\u0002\u0002",
    "\u0002\u03b1\u03b4\u0003\u0002\u0002\u0002\u03b2\u03b0\u0003\u0002\u0002",
    "\u0002\u03b2\u03b3\u0003\u0002\u0002\u0002\u03b3\u03be\u0003\u0002\u0002",
    "\u0002\u03b4\u03b2\u0003\u0002\u0002\u0002\u03b5\u03b9\u00071\u0002",
    "\u0002\u03b6\u03b8\u00071\u0002\u0002\u03b7\u03b6\u0003\u0002\u0002",
    "\u0002\u03b8\u03bb\u0003\u0002\u0002\u0002\u03b9\u03b7\u0003\u0002\u0002",
    "\u0002\u03b9\u03ba\u0003\u0002\u0002\u0002\u03ba\u03bc\u0003\u0002\u0002",
    "\u0002\u03bb\u03b9\u0003\u0002\u0002\u0002\u03bc\u03be\u0005\u0086D",
    "\u0002\u03bd\u03ac\u0003\u0002\u0002\u0002\u03bd\u03b5\u0003\u0002\u0002",
    "\u0002\u03be\u0089\u0003\u0002\u0002\u0002\u03bf\u03c0\u00056\u001c",
    "\u0002\u03c0\u03c1\t\t\u0002\u0002\u03c1\u03c5\u0003\u0002\u0002\u0002",
    "\u03c2\u03c3\t\t\u0002\u0002\u03c3\u03c5\u0005\u0086D\u0002\u03c4\u03bf",
    "\u0003\u0002\u0002\u0002\u03c4\u03c2\u0003\u0002\u0002\u0002\u03c5\u008b",
    "\u0003\u0002\u0002\u0002\u03c6\u03c7\u00056\u001c\u0002\u03c7\u03c8",
    "\u0007G\u0002\u0002\u03c8\u008d\u0003\u0002\u0002\u0002\u03c9\u03ca",
    "\u00056\u001c\u0002\u03ca\u03cb\u0007H\u0002\u0002\u03cb\u008f\u0003",
    "\u0002\u0002\u0002\u03cc\u03cd\u00071\u0002\u0002\u03cd\u03ce\u0005",
    "\u0086D\u0002\u03ce\u03cf\u00072\u0002\u0002\u03cf\u03d6\u0003\u0002",
    "\u0002\u0002\u03d0\u03d6\u00056\u001c\u0002\u03d1\u03d6\u0007c\u0002",
    "\u0002\u03d2\u03d3\u0005\u0010\t\u0002\u03d3\u03d4\u00079\u0002\u0002",
    "\u03d4\u03d6\u0003\u0002\u0002\u0002\u03d5\u03cc\u0003\u0002\u0002\u0002",
    "\u03d5\u03d0\u0003\u0002\u0002\u0002\u03d5\u03d1\u0003\u0002\u0002\u0002",
    "\u03d5\u03d2\u0003\u0002\u0002\u0002\u03d6\u0091\u0003\u0002\u0002\u0002",
    "\u03d7\u03f3\u00075\u0002\u0002\u03d8\u03dd\u00076\u0002\u0002\u03d9",
    "\u03da\u00075\u0002\u0002\u03da\u03dc\u00076\u0002\u0002\u03db\u03d9",
    "\u0003\u0002\u0002\u0002\u03dc\u03df\u0003\u0002\u0002\u0002\u03dd\u03db",
    "\u0003\u0002\u0002\u0002\u03dd\u03de\u0003\u0002\u0002\u0002\u03de\u03e0",
    "\u0003\u0002\u0002\u0002\u03df\u03dd\u0003\u0002\u0002\u0002\u03e0\u03f4",
    "\u0005$\u0013\u0002\u03e1\u03e2\u0005\u0086D\u0002\u03e2\u03e9\u0007",
    "6\u0002\u0002\u03e3\u03e4\u00075\u0002\u0002\u03e4\u03e5\u0005\u0086",
    "D\u0002\u03e5\u03e6\u00076\u0002\u0002\u03e6\u03e8\u0003\u0002\u0002",
    "\u0002\u03e7\u03e3\u0003\u0002\u0002\u0002\u03e8\u03eb\u0003\u0002\u0002",
    "\u0002\u03e9\u03e7\u0003\u0002\u0002\u0002\u03e9\u03ea\u0003\u0002\u0002",
    "\u0002\u03ea\u03f0\u0003\u0002\u0002\u0002\u03eb\u03e9\u0003\u0002\u0002",
    "\u0002\u03ec\u03ed\u00075\u0002\u0002\u03ed\u03ef\u00076\u0002\u0002",
    "\u03ee\u03ec\u0003\u0002\u0002\u0002\u03ef\u03f2\u0003\u0002\u0002\u0002",
    "\u03f0\u03ee\u0003\u0002\u0002\u0002\u03f0\u03f1\u0003\u0002\u0002\u0002",
    "\u03f1\u03f4\u0003\u0002\u0002\u0002\u03f2\u03f0\u0003\u0002\u0002\u0002",
    "\u03f3\u03d8\u0003\u0002\u0002\u0002\u03f3\u03e1\u0003\u0002\u0002\u0002",
    "\u03f4\u0093\u0003\u0002\u0002\u0002\u03f5\u03fa\u0005\u0096L\u0002",
    "\u03f6\u03f7\u00078\u0002\u0002\u03f7\u03f9\u0005\u0096L\u0002\u03f8",
    "\u03f6\u0003\u0002\u0002\u0002\u03f9\u03fc\u0003\u0002\u0002\u0002\u03fa",
    "\u03f8\u0003\u0002\u0002\u0002\u03fa\u03fb\u0003\u0002\u0002\u0002\u03fb",
    "\u0095\u0003\u0002\u0002\u0002\u03fc\u03fa\u0003\u0002\u0002\u0002\u03fd",
    "\u0403\u0005\u0098M\u0002\u03fe\u03ff\u00075\u0002\u0002\u03ff\u0400",
    "\u0007\'\u0002\u0002\u0400\u0402\u00076\u0002\u0002\u0401\u03fe\u0003",
    "\u0002\u0002\u0002\u0402\u0405\u0003\u0002\u0002\u0002\u0403\u0401\u0003",
    "\u0002\u0002\u0002\u0403\u0404\u0003\u0002\u0002\u0002\u0404\u0097\u0003",
    "\u0002\u0002\u0002\u0405\u0403\u0003\u0002\u0002\u0002\u0406\u0407\t",
    "\u000f\u0002\u0002\u0407\u0099\u0003\u0002\u0002\u0002\u0408\u0409\u0007",
    "<\u0002\u0002\u0409\u040e\u0005(\u0015\u0002\u040a\u040b\u00078\u0002",
    "\u0002\u040b\u040d\u0005(\u0015\u0002\u040c\u040a\u0003\u0002\u0002",
    "\u0002\u040d\u0410\u0003\u0002\u0002\u0002\u040e\u040c\u0003\u0002\u0002",
    "\u0002\u040e\u040f\u0003\u0002\u0002\u0002\u040f\u0411\u0003\u0002\u0002",
    "\u0002\u0410\u040e\u0003\u0002\u0002\u0002\u0411\u0412\u0007;\u0002",
    "\u0002\u0412\u009b\u0003\u0002\u0002\u0002\u0413\u0415\u00071\u0002",
    "\u0002\u0414\u0416\u0005\u0082B\u0002\u0415\u0414\u0003\u0002\u0002",
    "\u0002\u0415\u0416\u0003\u0002\u0002\u0002\u0416\u0417\u0003\u0002\u0002",
    "\u0002\u0417\u0418\u00072\u0002\u0002\u0418\u009d\u0003\u0002\u0002",
    "\u0002r\u00a1\u00a8\u00b0\u00b8\u00c3\u00cd\u00d2\u00d8\u00dc\u00e4",
    "\u00ee\u00f7\u00ff\u0104\u010c\u0111\u0119\u0123\u0129\u0130\u0135\u013d",
    "\u0141\u0143\u0149\u014e\u0152\u0158\u015a\u0161\u0166\u016f\u0174\u0177",
    "\u017c\u0185\u0191\u019a\u01a5\u01a8\u01af\u01b9\u01c1\u01c4\u01c7\u01d2",
    "\u01d7\u01dd\u01e7\u01ec\u01fa\u01ff\u0213\u021d\u0226\u0229\u022c\u0234",
    "\u0238\u023e\u0244\u024a\u0253\u0259\u0264\u0269\u0273\u0286\u0299\u029b",
    "\u02ab\u02b6\u02ba\u02c6\u02cd\u02da\u02e3\u02ec\u02f2\u02fd\u0302\u0307",
    "\u030c\u0310\u0314\u0318\u031a\u031e\u0323\u033e\u0344\u035d\u0363\u0365",
    "\u0375\u039a\u03a4\u03a7\u03a9\u03b2\u03b9\u03bd\u03c4\u03d5\u03dd\u03e9",
    "\u03f0\u03f3\u03fa\u0403\u040e\u0415"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'bulalo'", "'kitkat'", "'bite'", "'caserola'", 
                     "'ketchup'", "'chicharon'", "'tubig'", "'coconut'", 
                     "'plain'", "'donut'", "'adobo'", "'eel'", "'garnish'", 
                     "'serve'", "'mango'", "'pork'", "'beef'", "'goto'", 
                     "'pint'", "'longganisa'", "'kangkong'", "'rice'", "'shortcake'", 
                     "'stove'", "'baking'", "'sugar'", "'stir'", "'turon'", 
                     "'turons'", "'truffle'", "'fry'", "'boil'", "'bolabola'", 
                     "'wine'", "'plate'", "'shop'", null, null, null, null, 
                     null, null, null, null, null, "'null'", "'('", "')'", 
                     "'{'", "'}'", "'['", "']'", "';'", "','", "'.'", "'='", 
                     "'>'", "'<'", "'!'", "'~'", "'?'", "':'", "'=='", "'<='", 
                     "'>='", "'!='", "'&&'", "'||'", "'++'", "'--'", "'+'", 
                     "'-'", "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", "'+='", 
                     "'-='", "'*='", "'/='", "'&='", "'|='", "'^='", "'%='", 
                     "'<<='", "'>>='", "'>>>='", "'->'", "'::'", "'@'", 
                     "'...'" ];

var symbolicNames = [ null, "BOOLEAN", "BREAK", "BYTE", "CASE", "CATCH", 
                      "CHAR", "CONST", "CONTINUE", "DEFAULT", "DO", "DOUBLE", 
                      "ELSE", "FINAL", "FINALLY", "FLOAT", "FOR", "IF", 
                      "GOTO", "INT", "LONG", "NATIVE", "RETURN", "SHORT", 
                      "STATIC", "STRICTFP", "SWITCH", "SYNCHRONIZED", "THROW", 
                      "THROWS", "TRANSIENT", "TRY", "VOID", "VOLATILE", 
                      "WHILE", "PRINT", "SCAN", "DECIMAL_LITERAL", "HEX_LITERAL", 
                      "OCT_LITERAL", "BINARY_LITERAL", "FLOAT_LITERAL", 
                      "HEX_FLOAT_LITERAL", "BOOL_LITERAL", "CHAR_LITERAL", 
                      "STRING_LITERAL", "NULL_LITERAL", "LPAREN", "RPAREN", 
                      "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", "COMMA", 
                      "DOT", "ASSIGN", "GT", "LT", "BANG", "TILDE", "QUESTION", 
                      "COLON", "EQUAL", "LE", "GE", "NOTEQUAL", "AND", "OR", 
                      "INC", "DEC", "ADD", "SUB", "MUL", "DIV", "BITAND", 
                      "BITOR", "CARET", "MOD", "ADD_ASSIGN", "SUB_ASSIGN", 
                      "MUL_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", 
                      "XOR_ASSIGN", "MOD_ASSIGN", "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", 
                      "URSHIFT_ASSIGN", "ARROW", "COLONCOLON", "AT", "ELLIPSIS", 
                      "WS", "COMMENT", "LINE_COMMENT", "IDENTIFIER", "ERROR_STRING_LITERAL" ];

var ruleNames =  [ "compilationUnit", "variableModifier", "typeParameters", 
                   "typeParameter", "typeBound", "methodDeclaration", "methodBody", 
                   "typeTypeOrVoid", "constDeclaration", "constantDeclarator", 
                   "interfaceMethodDeclaration", "interfaceMethodModifier", 
                   "genericInterfaceMethodDeclaration", "variableDeclarators", 
                   "variableDeclarator", "variableDeclaratorId", "variableInitializer", 
                   "arrayInitializer", "classOrInterfaceType", "typeArgument", 
                   "qualifiedNameList", "formalParameters", "formalParameterList", 
                   "formalParameter", "lastFormalParameter", "qualifiedName", 
                   "literal", "integerLiteral", "floatLiteral", "annotation", 
                   "elementValuePairs", "elementValuePair", "elementValue", 
                   "elementValueArrayInitializer", "defaultValue", "block", 
                   "wrongBlockStatement", "blockStatement", "wrongLocalVariableDeclaration", 
                   "localVariableDeclaration", "statement", "printStatement", 
                   "printWithIdentifier", "scanMissingIdentifierError", 
                   "compareExpression", "printMissingQuotesError", "wrongPrintStatement", 
                   "returnPrimitiveTypeError", "returnMissingError", "forError", 
                   "catchClause", "catchType", "finallyBlock", "resourceSpecification", 
                   "resources", "resource", "switchBlockStatementGroup", 
                   "switchLabel", "forControl", "forInit", "enhancedForControl", 
                   "parExpression", "excessLParenExpression", "excessRParenExpression", 
                   "expressionList", "methodCall", "expression", "primaryError", 
                   "expressionError", "expressionAdditionError", "expressionSubtractionError", 
                   "primary", "arrayCreatorRest", "typeList", "typeType", 
                   "primitiveType", "typeArguments", "arguments" ];

function GrammarParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

GrammarParser.prototype = Object.create(antlr4.Parser.prototype);
GrammarParser.prototype.constructor = GrammarParser;

Object.defineProperty(GrammarParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

GrammarParser.EOF = antlr4.Token.EOF;
GrammarParser.BOOLEAN = 1;
GrammarParser.BREAK = 2;
GrammarParser.BYTE = 3;
GrammarParser.CASE = 4;
GrammarParser.CATCH = 5;
GrammarParser.CHAR = 6;
GrammarParser.CONST = 7;
GrammarParser.CONTINUE = 8;
GrammarParser.DEFAULT = 9;
GrammarParser.DO = 10;
GrammarParser.DOUBLE = 11;
GrammarParser.ELSE = 12;
GrammarParser.FINAL = 13;
GrammarParser.FINALLY = 14;
GrammarParser.FLOAT = 15;
GrammarParser.FOR = 16;
GrammarParser.IF = 17;
GrammarParser.GOTO = 18;
GrammarParser.INT = 19;
GrammarParser.LONG = 20;
GrammarParser.NATIVE = 21;
GrammarParser.RETURN = 22;
GrammarParser.SHORT = 23;
GrammarParser.STATIC = 24;
GrammarParser.STRICTFP = 25;
GrammarParser.SWITCH = 26;
GrammarParser.SYNCHRONIZED = 27;
GrammarParser.THROW = 28;
GrammarParser.THROWS = 29;
GrammarParser.TRANSIENT = 30;
GrammarParser.TRY = 31;
GrammarParser.VOID = 32;
GrammarParser.VOLATILE = 33;
GrammarParser.WHILE = 34;
GrammarParser.PRINT = 35;
GrammarParser.SCAN = 36;
GrammarParser.DECIMAL_LITERAL = 37;
GrammarParser.HEX_LITERAL = 38;
GrammarParser.OCT_LITERAL = 39;
GrammarParser.BINARY_LITERAL = 40;
GrammarParser.FLOAT_LITERAL = 41;
GrammarParser.HEX_FLOAT_LITERAL = 42;
GrammarParser.BOOL_LITERAL = 43;
GrammarParser.CHAR_LITERAL = 44;
GrammarParser.STRING_LITERAL = 45;
GrammarParser.NULL_LITERAL = 46;
GrammarParser.LPAREN = 47;
GrammarParser.RPAREN = 48;
GrammarParser.LBRACE = 49;
GrammarParser.RBRACE = 50;
GrammarParser.LBRACK = 51;
GrammarParser.RBRACK = 52;
GrammarParser.SEMI = 53;
GrammarParser.COMMA = 54;
GrammarParser.DOT = 55;
GrammarParser.ASSIGN = 56;
GrammarParser.GT = 57;
GrammarParser.LT = 58;
GrammarParser.BANG = 59;
GrammarParser.TILDE = 60;
GrammarParser.QUESTION = 61;
GrammarParser.COLON = 62;
GrammarParser.EQUAL = 63;
GrammarParser.LE = 64;
GrammarParser.GE = 65;
GrammarParser.NOTEQUAL = 66;
GrammarParser.AND = 67;
GrammarParser.OR = 68;
GrammarParser.INC = 69;
GrammarParser.DEC = 70;
GrammarParser.ADD = 71;
GrammarParser.SUB = 72;
GrammarParser.MUL = 73;
GrammarParser.DIV = 74;
GrammarParser.BITAND = 75;
GrammarParser.BITOR = 76;
GrammarParser.CARET = 77;
GrammarParser.MOD = 78;
GrammarParser.ADD_ASSIGN = 79;
GrammarParser.SUB_ASSIGN = 80;
GrammarParser.MUL_ASSIGN = 81;
GrammarParser.DIV_ASSIGN = 82;
GrammarParser.AND_ASSIGN = 83;
GrammarParser.OR_ASSIGN = 84;
GrammarParser.XOR_ASSIGN = 85;
GrammarParser.MOD_ASSIGN = 86;
GrammarParser.LSHIFT_ASSIGN = 87;
GrammarParser.RSHIFT_ASSIGN = 88;
GrammarParser.URSHIFT_ASSIGN = 89;
GrammarParser.ARROW = 90;
GrammarParser.COLONCOLON = 91;
GrammarParser.AT = 92;
GrammarParser.ELLIPSIS = 93;
GrammarParser.WS = 94;
GrammarParser.COMMENT = 95;
GrammarParser.LINE_COMMENT = 96;
GrammarParser.IDENTIFIER = 97;
GrammarParser.ERROR_STRING_LITERAL = 98;

GrammarParser.RULE_compilationUnit = 0;
GrammarParser.RULE_variableModifier = 1;
GrammarParser.RULE_typeParameters = 2;
GrammarParser.RULE_typeParameter = 3;
GrammarParser.RULE_typeBound = 4;
GrammarParser.RULE_methodDeclaration = 5;
GrammarParser.RULE_methodBody = 6;
GrammarParser.RULE_typeTypeOrVoid = 7;
GrammarParser.RULE_constDeclaration = 8;
GrammarParser.RULE_constantDeclarator = 9;
GrammarParser.RULE_interfaceMethodDeclaration = 10;
GrammarParser.RULE_interfaceMethodModifier = 11;
GrammarParser.RULE_genericInterfaceMethodDeclaration = 12;
GrammarParser.RULE_variableDeclarators = 13;
GrammarParser.RULE_variableDeclarator = 14;
GrammarParser.RULE_variableDeclaratorId = 15;
GrammarParser.RULE_variableInitializer = 16;
GrammarParser.RULE_arrayInitializer = 17;
GrammarParser.RULE_classOrInterfaceType = 18;
GrammarParser.RULE_typeArgument = 19;
GrammarParser.RULE_qualifiedNameList = 20;
GrammarParser.RULE_formalParameters = 21;
GrammarParser.RULE_formalParameterList = 22;
GrammarParser.RULE_formalParameter = 23;
GrammarParser.RULE_lastFormalParameter = 24;
GrammarParser.RULE_qualifiedName = 25;
GrammarParser.RULE_literal = 26;
GrammarParser.RULE_integerLiteral = 27;
GrammarParser.RULE_floatLiteral = 28;
GrammarParser.RULE_annotation = 29;
GrammarParser.RULE_elementValuePairs = 30;
GrammarParser.RULE_elementValuePair = 31;
GrammarParser.RULE_elementValue = 32;
GrammarParser.RULE_elementValueArrayInitializer = 33;
GrammarParser.RULE_defaultValue = 34;
GrammarParser.RULE_block = 35;
GrammarParser.RULE_wrongBlockStatement = 36;
GrammarParser.RULE_blockStatement = 37;
GrammarParser.RULE_wrongLocalVariableDeclaration = 38;
GrammarParser.RULE_localVariableDeclaration = 39;
GrammarParser.RULE_statement = 40;
GrammarParser.RULE_printStatement = 41;
GrammarParser.RULE_printWithIdentifier = 42;
GrammarParser.RULE_scanMissingIdentifierError = 43;
GrammarParser.RULE_compareExpression = 44;
GrammarParser.RULE_printMissingQuotesError = 45;
GrammarParser.RULE_wrongPrintStatement = 46;
GrammarParser.RULE_returnPrimitiveTypeError = 47;
GrammarParser.RULE_returnMissingError = 48;
GrammarParser.RULE_forError = 49;
GrammarParser.RULE_catchClause = 50;
GrammarParser.RULE_catchType = 51;
GrammarParser.RULE_finallyBlock = 52;
GrammarParser.RULE_resourceSpecification = 53;
GrammarParser.RULE_resources = 54;
GrammarParser.RULE_resource = 55;
GrammarParser.RULE_switchBlockStatementGroup = 56;
GrammarParser.RULE_switchLabel = 57;
GrammarParser.RULE_forControl = 58;
GrammarParser.RULE_forInit = 59;
GrammarParser.RULE_enhancedForControl = 60;
GrammarParser.RULE_parExpression = 61;
GrammarParser.RULE_excessLParenExpression = 62;
GrammarParser.RULE_excessRParenExpression = 63;
GrammarParser.RULE_expressionList = 64;
GrammarParser.RULE_methodCall = 65;
GrammarParser.RULE_expression = 66;
GrammarParser.RULE_primaryError = 67;
GrammarParser.RULE_expressionError = 68;
GrammarParser.RULE_expressionAdditionError = 69;
GrammarParser.RULE_expressionSubtractionError = 70;
GrammarParser.RULE_primary = 71;
GrammarParser.RULE_arrayCreatorRest = 72;
GrammarParser.RULE_typeList = 73;
GrammarParser.RULE_typeType = 74;
GrammarParser.RULE_primitiveType = 75;
GrammarParser.RULE_typeArguments = 76;
GrammarParser.RULE_arguments = 77;


function CompilationUnitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_compilationUnit;
    return this;
}

CompilationUnitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CompilationUnitContext.prototype.constructor = CompilationUnitContext;

CompilationUnitContext.prototype.EOF = function() {
    return this.getToken(GrammarParser.EOF, 0);
};

CompilationUnitContext.prototype.methodDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MethodDeclarationContext);
    } else {
        return this.getTypedRuleContext(MethodDeclarationContext,i);
    }
};

CompilationUnitContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterCompilationUnit(this);
	}
};

CompilationUnitContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitCompilationUnit(this);
	}
};

CompilationUnitContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitCompilationUnit(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.CompilationUnitContext = CompilationUnitContext;

GrammarParser.prototype.compilationUnit = function() {

    var localctx = new CompilationUnitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, GrammarParser.RULE_compilationUnit);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 159;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 1)) & ~0x1f) == 0 && ((1 << (_la - 1)) & ((1 << (GrammarParser.BOOLEAN - 1)) | (1 << (GrammarParser.BYTE - 1)) | (1 << (GrammarParser.CHAR - 1)) | (1 << (GrammarParser.DOUBLE - 1)) | (1 << (GrammarParser.FLOAT - 1)) | (1 << (GrammarParser.INT - 1)) | (1 << (GrammarParser.LONG - 1)) | (1 << (GrammarParser.SHORT - 1)) | (1 << (GrammarParser.VOID - 1)))) !== 0)) {
            this.state = 156;
            this.methodDeclaration();
            this.state = 161;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 162;
        this.match(GrammarParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_variableModifier;
    return this;
}

VariableModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableModifierContext.prototype.constructor = VariableModifierContext;

VariableModifierContext.prototype.FINAL = function() {
    return this.getToken(GrammarParser.FINAL, 0);
};

VariableModifierContext.prototype.annotation = function() {
    return this.getTypedRuleContext(AnnotationContext,0);
};

VariableModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterVariableModifier(this);
	}
};

VariableModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitVariableModifier(this);
	}
};

VariableModifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitVariableModifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.VariableModifierContext = VariableModifierContext;

GrammarParser.prototype.variableModifier = function() {

    var localctx = new VariableModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, GrammarParser.RULE_variableModifier);
    try {
        this.state = 166;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GrammarParser.FINAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 164;
            this.match(GrammarParser.FINAL);
            break;
        case GrammarParser.AT:
            this.enterOuterAlt(localctx, 2);
            this.state = 165;
            this.annotation();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_typeParameters;
    return this;
}

TypeParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeParametersContext.prototype.constructor = TypeParametersContext;

TypeParametersContext.prototype.LT = function() {
    return this.getToken(GrammarParser.LT, 0);
};

TypeParametersContext.prototype.typeParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeParameterContext);
    } else {
        return this.getTypedRuleContext(TypeParameterContext,i);
    }
};

TypeParametersContext.prototype.GT = function() {
    return this.getToken(GrammarParser.GT, 0);
};

TypeParametersContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.COMMA);
    } else {
        return this.getToken(GrammarParser.COMMA, i);
    }
};


TypeParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterTypeParameters(this);
	}
};

TypeParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitTypeParameters(this);
	}
};

TypeParametersContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitTypeParameters(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.TypeParametersContext = TypeParametersContext;

GrammarParser.prototype.typeParameters = function() {

    var localctx = new TypeParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, GrammarParser.RULE_typeParameters);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 168;
        this.match(GrammarParser.LT);
        this.state = 169;
        this.typeParameter();
        this.state = 174;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GrammarParser.COMMA) {
            this.state = 170;
            this.match(GrammarParser.COMMA);
            this.state = 171;
            this.typeParameter();
            this.state = 176;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 177;
        this.match(GrammarParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_typeParameter;
    return this;
}

TypeParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeParameterContext.prototype.constructor = TypeParameterContext;

TypeParameterContext.prototype.IDENTIFIER = function() {
    return this.getToken(GrammarParser.IDENTIFIER, 0);
};

TypeParameterContext.prototype.typeBound = function() {
    return this.getTypedRuleContext(TypeBoundContext,0);
};

TypeParameterContext.prototype.annotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationContext);
    } else {
        return this.getTypedRuleContext(AnnotationContext,i);
    }
};

TypeParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterTypeParameter(this);
	}
};

TypeParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitTypeParameter(this);
	}
};

TypeParameterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitTypeParameter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.TypeParameterContext = TypeParameterContext;

GrammarParser.prototype.typeParameter = function() {

    var localctx = new TypeParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, GrammarParser.RULE_typeParameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 182;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GrammarParser.AT) {
            this.state = 179;
            this.annotation();
            this.state = 184;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 185;
        this.match(GrammarParser.IDENTIFIER);
        this.state = 186;
        this.typeBound();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeBoundContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_typeBound;
    return this;
}

TypeBoundContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeBoundContext.prototype.constructor = TypeBoundContext;

TypeBoundContext.prototype.typeType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeTypeContext);
    } else {
        return this.getTypedRuleContext(TypeTypeContext,i);
    }
};

TypeBoundContext.prototype.BITAND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.BITAND);
    } else {
        return this.getToken(GrammarParser.BITAND, i);
    }
};


TypeBoundContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterTypeBound(this);
	}
};

TypeBoundContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitTypeBound(this);
	}
};

TypeBoundContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitTypeBound(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.TypeBoundContext = TypeBoundContext;

GrammarParser.prototype.typeBound = function() {

    var localctx = new TypeBoundContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, GrammarParser.RULE_typeBound);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 188;
        this.typeType();
        this.state = 193;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GrammarParser.BITAND) {
            this.state = 189;
            this.match(GrammarParser.BITAND);
            this.state = 190;
            this.typeType();
            this.state = 195;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MethodDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_methodDeclaration;
    return this;
}

MethodDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodDeclarationContext.prototype.constructor = MethodDeclarationContext;

MethodDeclarationContext.prototype.typeTypeOrVoid = function() {
    return this.getTypedRuleContext(TypeTypeOrVoidContext,0);
};

MethodDeclarationContext.prototype.IDENTIFIER = function() {
    return this.getToken(GrammarParser.IDENTIFIER, 0);
};

MethodDeclarationContext.prototype.formalParameters = function() {
    return this.getTypedRuleContext(FormalParametersContext,0);
};

MethodDeclarationContext.prototype.methodBody = function() {
    return this.getTypedRuleContext(MethodBodyContext,0);
};

MethodDeclarationContext.prototype.LBRACK = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.LBRACK);
    } else {
        return this.getToken(GrammarParser.LBRACK, i);
    }
};


MethodDeclarationContext.prototype.RBRACK = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.RBRACK);
    } else {
        return this.getToken(GrammarParser.RBRACK, i);
    }
};


MethodDeclarationContext.prototype.THROWS = function() {
    return this.getToken(GrammarParser.THROWS, 0);
};

MethodDeclarationContext.prototype.qualifiedNameList = function() {
    return this.getTypedRuleContext(QualifiedNameListContext,0);
};

MethodDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterMethodDeclaration(this);
	}
};

MethodDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitMethodDeclaration(this);
	}
};

MethodDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitMethodDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.MethodDeclarationContext = MethodDeclarationContext;

GrammarParser.prototype.methodDeclaration = function() {

    var localctx = new MethodDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, GrammarParser.RULE_methodDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 196;
        this.typeTypeOrVoid();
        this.state = 197;
        this.match(GrammarParser.IDENTIFIER);
        this.state = 198;
        this.formalParameters();
        this.state = 203;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GrammarParser.LBRACK) {
            this.state = 199;
            this.match(GrammarParser.LBRACK);
            this.state = 200;
            this.match(GrammarParser.RBRACK);
            this.state = 205;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 208;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===GrammarParser.THROWS) {
            this.state = 206;
            this.match(GrammarParser.THROWS);
            this.state = 207;
            this.qualifiedNameList();
        }

        this.state = 210;
        this.methodBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MethodBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_methodBody;
    return this;
}

MethodBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodBodyContext.prototype.constructor = MethodBodyContext;

MethodBodyContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

MethodBodyContext.prototype.SEMI = function() {
    return this.getToken(GrammarParser.SEMI, 0);
};

MethodBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterMethodBody(this);
	}
};

MethodBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitMethodBody(this);
	}
};

MethodBodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitMethodBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.MethodBodyContext = MethodBodyContext;

GrammarParser.prototype.methodBody = function() {

    var localctx = new MethodBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, GrammarParser.RULE_methodBody);
    try {
        this.state = 214;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GrammarParser.LBRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 212;
            this.block();
            break;
        case GrammarParser.SEMI:
            this.enterOuterAlt(localctx, 2);
            this.state = 213;
            this.match(GrammarParser.SEMI);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeTypeOrVoidContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_typeTypeOrVoid;
    return this;
}

TypeTypeOrVoidContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeTypeOrVoidContext.prototype.constructor = TypeTypeOrVoidContext;

TypeTypeOrVoidContext.prototype.typeType = function() {
    return this.getTypedRuleContext(TypeTypeContext,0);
};

TypeTypeOrVoidContext.prototype.VOID = function() {
    return this.getToken(GrammarParser.VOID, 0);
};

TypeTypeOrVoidContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterTypeTypeOrVoid(this);
	}
};

TypeTypeOrVoidContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitTypeTypeOrVoid(this);
	}
};

TypeTypeOrVoidContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitTypeTypeOrVoid(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.TypeTypeOrVoidContext = TypeTypeOrVoidContext;

GrammarParser.prototype.typeTypeOrVoid = function() {

    var localctx = new TypeTypeOrVoidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, GrammarParser.RULE_typeTypeOrVoid);
    try {
        this.state = 218;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GrammarParser.BOOLEAN:
        case GrammarParser.BYTE:
        case GrammarParser.CHAR:
        case GrammarParser.DOUBLE:
        case GrammarParser.FLOAT:
        case GrammarParser.INT:
        case GrammarParser.LONG:
        case GrammarParser.SHORT:
            this.enterOuterAlt(localctx, 1);
            this.state = 216;
            this.typeType();
            break;
        case GrammarParser.VOID:
            this.enterOuterAlt(localctx, 2);
            this.state = 217;
            this.match(GrammarParser.VOID);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_constDeclaration;
    return this;
}

ConstDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstDeclarationContext.prototype.constructor = ConstDeclarationContext;

ConstDeclarationContext.prototype.typeType = function() {
    return this.getTypedRuleContext(TypeTypeContext,0);
};

ConstDeclarationContext.prototype.constantDeclarator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantDeclaratorContext);
    } else {
        return this.getTypedRuleContext(ConstantDeclaratorContext,i);
    }
};

ConstDeclarationContext.prototype.SEMI = function() {
    return this.getToken(GrammarParser.SEMI, 0);
};

ConstDeclarationContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.COMMA);
    } else {
        return this.getToken(GrammarParser.COMMA, i);
    }
};


ConstDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterConstDeclaration(this);
	}
};

ConstDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitConstDeclaration(this);
	}
};

ConstDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitConstDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ConstDeclarationContext = ConstDeclarationContext;

GrammarParser.prototype.constDeclaration = function() {

    var localctx = new ConstDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, GrammarParser.RULE_constDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 220;
        this.typeType();
        this.state = 221;
        this.constantDeclarator();
        this.state = 226;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GrammarParser.COMMA) {
            this.state = 222;
            this.match(GrammarParser.COMMA);
            this.state = 223;
            this.constantDeclarator();
            this.state = 228;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 229;
        this.match(GrammarParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstantDeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_constantDeclarator;
    return this;
}

ConstantDeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantDeclaratorContext.prototype.constructor = ConstantDeclaratorContext;

ConstantDeclaratorContext.prototype.IDENTIFIER = function() {
    return this.getToken(GrammarParser.IDENTIFIER, 0);
};

ConstantDeclaratorContext.prototype.ASSIGN = function() {
    return this.getToken(GrammarParser.ASSIGN, 0);
};

ConstantDeclaratorContext.prototype.variableInitializer = function() {
    return this.getTypedRuleContext(VariableInitializerContext,0);
};

ConstantDeclaratorContext.prototype.LBRACK = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.LBRACK);
    } else {
        return this.getToken(GrammarParser.LBRACK, i);
    }
};


ConstantDeclaratorContext.prototype.RBRACK = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.RBRACK);
    } else {
        return this.getToken(GrammarParser.RBRACK, i);
    }
};


ConstantDeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterConstantDeclarator(this);
	}
};

ConstantDeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitConstantDeclarator(this);
	}
};

ConstantDeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitConstantDeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ConstantDeclaratorContext = ConstantDeclaratorContext;

GrammarParser.prototype.constantDeclarator = function() {

    var localctx = new ConstantDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, GrammarParser.RULE_constantDeclarator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 231;
        this.match(GrammarParser.IDENTIFIER);
        this.state = 236;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GrammarParser.LBRACK) {
            this.state = 232;
            this.match(GrammarParser.LBRACK);
            this.state = 233;
            this.match(GrammarParser.RBRACK);
            this.state = 238;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 239;
        this.match(GrammarParser.ASSIGN);
        this.state = 240;
        this.variableInitializer();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InterfaceMethodDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_interfaceMethodDeclaration;
    return this;
}

InterfaceMethodDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceMethodDeclarationContext.prototype.constructor = InterfaceMethodDeclarationContext;

InterfaceMethodDeclarationContext.prototype.IDENTIFIER = function() {
    return this.getToken(GrammarParser.IDENTIFIER, 0);
};

InterfaceMethodDeclarationContext.prototype.formalParameters = function() {
    return this.getTypedRuleContext(FormalParametersContext,0);
};

InterfaceMethodDeclarationContext.prototype.methodBody = function() {
    return this.getTypedRuleContext(MethodBodyContext,0);
};

InterfaceMethodDeclarationContext.prototype.typeTypeOrVoid = function() {
    return this.getTypedRuleContext(TypeTypeOrVoidContext,0);
};

InterfaceMethodDeclarationContext.prototype.typeParameters = function() {
    return this.getTypedRuleContext(TypeParametersContext,0);
};

InterfaceMethodDeclarationContext.prototype.interfaceMethodModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InterfaceMethodModifierContext);
    } else {
        return this.getTypedRuleContext(InterfaceMethodModifierContext,i);
    }
};

InterfaceMethodDeclarationContext.prototype.LBRACK = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.LBRACK);
    } else {
        return this.getToken(GrammarParser.LBRACK, i);
    }
};


InterfaceMethodDeclarationContext.prototype.RBRACK = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.RBRACK);
    } else {
        return this.getToken(GrammarParser.RBRACK, i);
    }
};


InterfaceMethodDeclarationContext.prototype.THROWS = function() {
    return this.getToken(GrammarParser.THROWS, 0);
};

InterfaceMethodDeclarationContext.prototype.qualifiedNameList = function() {
    return this.getTypedRuleContext(QualifiedNameListContext,0);
};

InterfaceMethodDeclarationContext.prototype.annotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationContext);
    } else {
        return this.getTypedRuleContext(AnnotationContext,i);
    }
};

InterfaceMethodDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterInterfaceMethodDeclaration(this);
	}
};

InterfaceMethodDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitInterfaceMethodDeclaration(this);
	}
};

InterfaceMethodDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitInterfaceMethodDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.InterfaceMethodDeclarationContext = InterfaceMethodDeclarationContext;

GrammarParser.prototype.interfaceMethodDeclaration = function() {

    var localctx = new InterfaceMethodDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, GrammarParser.RULE_interfaceMethodDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 245;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GrammarParser.DEFAULT) | (1 << GrammarParser.STATIC) | (1 << GrammarParser.STRICTFP))) !== 0) || _la===GrammarParser.AT) {
            this.state = 242;
            this.interfaceMethodModifier();
            this.state = 247;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 258;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GrammarParser.BOOLEAN:
        case GrammarParser.BYTE:
        case GrammarParser.CHAR:
        case GrammarParser.DOUBLE:
        case GrammarParser.FLOAT:
        case GrammarParser.INT:
        case GrammarParser.LONG:
        case GrammarParser.SHORT:
        case GrammarParser.VOID:
            this.state = 248;
            this.typeTypeOrVoid();
            break;
        case GrammarParser.LT:
            this.state = 249;
            this.typeParameters();
            this.state = 253;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===GrammarParser.AT) {
                this.state = 250;
                this.annotation();
                this.state = 255;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 256;
            this.typeTypeOrVoid();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 260;
        this.match(GrammarParser.IDENTIFIER);
        this.state = 261;
        this.formalParameters();
        this.state = 266;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GrammarParser.LBRACK) {
            this.state = 262;
            this.match(GrammarParser.LBRACK);
            this.state = 263;
            this.match(GrammarParser.RBRACK);
            this.state = 268;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 271;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===GrammarParser.THROWS) {
            this.state = 269;
            this.match(GrammarParser.THROWS);
            this.state = 270;
            this.qualifiedNameList();
        }

        this.state = 273;
        this.methodBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InterfaceMethodModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_interfaceMethodModifier;
    return this;
}

InterfaceMethodModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceMethodModifierContext.prototype.constructor = InterfaceMethodModifierContext;

InterfaceMethodModifierContext.prototype.annotation = function() {
    return this.getTypedRuleContext(AnnotationContext,0);
};

InterfaceMethodModifierContext.prototype.DEFAULT = function() {
    return this.getToken(GrammarParser.DEFAULT, 0);
};

InterfaceMethodModifierContext.prototype.STATIC = function() {
    return this.getToken(GrammarParser.STATIC, 0);
};

InterfaceMethodModifierContext.prototype.STRICTFP = function() {
    return this.getToken(GrammarParser.STRICTFP, 0);
};

InterfaceMethodModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterInterfaceMethodModifier(this);
	}
};

InterfaceMethodModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitInterfaceMethodModifier(this);
	}
};

InterfaceMethodModifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitInterfaceMethodModifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.InterfaceMethodModifierContext = InterfaceMethodModifierContext;

GrammarParser.prototype.interfaceMethodModifier = function() {

    var localctx = new InterfaceMethodModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, GrammarParser.RULE_interfaceMethodModifier);
    try {
        this.state = 279;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GrammarParser.AT:
            this.enterOuterAlt(localctx, 1);
            this.state = 275;
            this.annotation();
            break;
        case GrammarParser.DEFAULT:
            this.enterOuterAlt(localctx, 2);
            this.state = 276;
            this.match(GrammarParser.DEFAULT);
            break;
        case GrammarParser.STATIC:
            this.enterOuterAlt(localctx, 3);
            this.state = 277;
            this.match(GrammarParser.STATIC);
            break;
        case GrammarParser.STRICTFP:
            this.enterOuterAlt(localctx, 4);
            this.state = 278;
            this.match(GrammarParser.STRICTFP);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GenericInterfaceMethodDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_genericInterfaceMethodDeclaration;
    return this;
}

GenericInterfaceMethodDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GenericInterfaceMethodDeclarationContext.prototype.constructor = GenericInterfaceMethodDeclarationContext;

GenericInterfaceMethodDeclarationContext.prototype.typeParameters = function() {
    return this.getTypedRuleContext(TypeParametersContext,0);
};

GenericInterfaceMethodDeclarationContext.prototype.interfaceMethodDeclaration = function() {
    return this.getTypedRuleContext(InterfaceMethodDeclarationContext,0);
};

GenericInterfaceMethodDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterGenericInterfaceMethodDeclaration(this);
	}
};

GenericInterfaceMethodDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitGenericInterfaceMethodDeclaration(this);
	}
};

GenericInterfaceMethodDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitGenericInterfaceMethodDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.GenericInterfaceMethodDeclarationContext = GenericInterfaceMethodDeclarationContext;

GrammarParser.prototype.genericInterfaceMethodDeclaration = function() {

    var localctx = new GenericInterfaceMethodDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, GrammarParser.RULE_genericInterfaceMethodDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 281;
        this.typeParameters();
        this.state = 282;
        this.interfaceMethodDeclaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableDeclaratorsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_variableDeclarators;
    return this;
}

VariableDeclaratorsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclaratorsContext.prototype.constructor = VariableDeclaratorsContext;

VariableDeclaratorsContext.prototype.variableDeclarator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableDeclaratorContext);
    } else {
        return this.getTypedRuleContext(VariableDeclaratorContext,i);
    }
};

VariableDeclaratorsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.COMMA);
    } else {
        return this.getToken(GrammarParser.COMMA, i);
    }
};


VariableDeclaratorsContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterVariableDeclarators(this);
	}
};

VariableDeclaratorsContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitVariableDeclarators(this);
	}
};

VariableDeclaratorsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitVariableDeclarators(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.VariableDeclaratorsContext = VariableDeclaratorsContext;

GrammarParser.prototype.variableDeclarators = function() {

    var localctx = new VariableDeclaratorsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, GrammarParser.RULE_variableDeclarators);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 284;
        this.variableDeclarator();
        this.state = 289;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GrammarParser.COMMA) {
            this.state = 285;
            this.match(GrammarParser.COMMA);
            this.state = 286;
            this.variableDeclarator();
            this.state = 291;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableDeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_variableDeclarator;
    return this;
}

VariableDeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclaratorContext.prototype.constructor = VariableDeclaratorContext;

VariableDeclaratorContext.prototype.variableDeclaratorId = function() {
    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
};

VariableDeclaratorContext.prototype.ASSIGN = function() {
    return this.getToken(GrammarParser.ASSIGN, 0);
};

VariableDeclaratorContext.prototype.variableInitializer = function() {
    return this.getTypedRuleContext(VariableInitializerContext,0);
};

VariableDeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterVariableDeclarator(this);
	}
};

VariableDeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitVariableDeclarator(this);
	}
};

VariableDeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitVariableDeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.VariableDeclaratorContext = VariableDeclaratorContext;

GrammarParser.prototype.variableDeclarator = function() {

    var localctx = new VariableDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, GrammarParser.RULE_variableDeclarator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 292;
        this.variableDeclaratorId();
        this.state = 295;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===GrammarParser.ASSIGN) {
            this.state = 293;
            this.match(GrammarParser.ASSIGN);
            this.state = 294;
            this.variableInitializer();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableDeclaratorIdContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_variableDeclaratorId;
    return this;
}

VariableDeclaratorIdContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclaratorIdContext.prototype.constructor = VariableDeclaratorIdContext;

VariableDeclaratorIdContext.prototype.IDENTIFIER = function() {
    return this.getToken(GrammarParser.IDENTIFIER, 0);
};

VariableDeclaratorIdContext.prototype.LBRACK = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.LBRACK);
    } else {
        return this.getToken(GrammarParser.LBRACK, i);
    }
};


VariableDeclaratorIdContext.prototype.RBRACK = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.RBRACK);
    } else {
        return this.getToken(GrammarParser.RBRACK, i);
    }
};


VariableDeclaratorIdContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterVariableDeclaratorId(this);
	}
};

VariableDeclaratorIdContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitVariableDeclaratorId(this);
	}
};

VariableDeclaratorIdContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitVariableDeclaratorId(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.VariableDeclaratorIdContext = VariableDeclaratorIdContext;

GrammarParser.prototype.variableDeclaratorId = function() {

    var localctx = new VariableDeclaratorIdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, GrammarParser.RULE_variableDeclaratorId);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 297;
        this.match(GrammarParser.IDENTIFIER);
        this.state = 302;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GrammarParser.LBRACK) {
            this.state = 298;
            this.match(GrammarParser.LBRACK);
            this.state = 299;
            this.match(GrammarParser.RBRACK);
            this.state = 304;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableInitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_variableInitializer;
    return this;
}

VariableInitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableInitializerContext.prototype.constructor = VariableInitializerContext;

VariableInitializerContext.prototype.arrayInitializer = function() {
    return this.getTypedRuleContext(ArrayInitializerContext,0);
};

VariableInitializerContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

VariableInitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterVariableInitializer(this);
	}
};

VariableInitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitVariableInitializer(this);
	}
};

VariableInitializerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitVariableInitializer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.VariableInitializerContext = VariableInitializerContext;

GrammarParser.prototype.variableInitializer = function() {

    var localctx = new VariableInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, GrammarParser.RULE_variableInitializer);
    try {
        this.state = 307;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GrammarParser.LBRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 305;
            this.arrayInitializer();
            break;
        case GrammarParser.BOOLEAN:
        case GrammarParser.BYTE:
        case GrammarParser.CHAR:
        case GrammarParser.DOUBLE:
        case GrammarParser.FLOAT:
        case GrammarParser.INT:
        case GrammarParser.LONG:
        case GrammarParser.SHORT:
        case GrammarParser.VOID:
        case GrammarParser.DECIMAL_LITERAL:
        case GrammarParser.HEX_LITERAL:
        case GrammarParser.OCT_LITERAL:
        case GrammarParser.BINARY_LITERAL:
        case GrammarParser.FLOAT_LITERAL:
        case GrammarParser.HEX_FLOAT_LITERAL:
        case GrammarParser.BOOL_LITERAL:
        case GrammarParser.CHAR_LITERAL:
        case GrammarParser.STRING_LITERAL:
        case GrammarParser.NULL_LITERAL:
        case GrammarParser.LPAREN:
        case GrammarParser.BANG:
        case GrammarParser.TILDE:
        case GrammarParser.INC:
        case GrammarParser.DEC:
        case GrammarParser.ADD:
        case GrammarParser.SUB:
        case GrammarParser.COLONCOLON:
        case GrammarParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 2);
            this.state = 306;
            this.expression(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArrayInitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_arrayInitializer;
    return this;
}

ArrayInitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayInitializerContext.prototype.constructor = ArrayInitializerContext;

ArrayInitializerContext.prototype.LBRACE = function() {
    return this.getToken(GrammarParser.LBRACE, 0);
};

ArrayInitializerContext.prototype.RBRACE = function() {
    return this.getToken(GrammarParser.RBRACE, 0);
};

ArrayInitializerContext.prototype.variableInitializer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableInitializerContext);
    } else {
        return this.getTypedRuleContext(VariableInitializerContext,i);
    }
};

ArrayInitializerContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.COMMA);
    } else {
        return this.getToken(GrammarParser.COMMA, i);
    }
};


ArrayInitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterArrayInitializer(this);
	}
};

ArrayInitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitArrayInitializer(this);
	}
};

ArrayInitializerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitArrayInitializer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ArrayInitializerContext = ArrayInitializerContext;

GrammarParser.prototype.arrayInitializer = function() {

    var localctx = new ArrayInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, GrammarParser.RULE_arrayInitializer);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 309;
        this.match(GrammarParser.LBRACE);
        this.state = 321;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GrammarParser.BOOLEAN) | (1 << GrammarParser.BYTE) | (1 << GrammarParser.CHAR) | (1 << GrammarParser.DOUBLE) | (1 << GrammarParser.FLOAT) | (1 << GrammarParser.INT) | (1 << GrammarParser.LONG) | (1 << GrammarParser.SHORT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (GrammarParser.VOID - 32)) | (1 << (GrammarParser.DECIMAL_LITERAL - 32)) | (1 << (GrammarParser.HEX_LITERAL - 32)) | (1 << (GrammarParser.OCT_LITERAL - 32)) | (1 << (GrammarParser.BINARY_LITERAL - 32)) | (1 << (GrammarParser.FLOAT_LITERAL - 32)) | (1 << (GrammarParser.HEX_FLOAT_LITERAL - 32)) | (1 << (GrammarParser.BOOL_LITERAL - 32)) | (1 << (GrammarParser.CHAR_LITERAL - 32)) | (1 << (GrammarParser.STRING_LITERAL - 32)) | (1 << (GrammarParser.NULL_LITERAL - 32)) | (1 << (GrammarParser.LPAREN - 32)) | (1 << (GrammarParser.LBRACE - 32)) | (1 << (GrammarParser.BANG - 32)) | (1 << (GrammarParser.TILDE - 32)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (GrammarParser.INC - 69)) | (1 << (GrammarParser.DEC - 69)) | (1 << (GrammarParser.ADD - 69)) | (1 << (GrammarParser.SUB - 69)) | (1 << (GrammarParser.COLONCOLON - 69)) | (1 << (GrammarParser.IDENTIFIER - 69)))) !== 0)) {
            this.state = 310;
            this.variableInitializer();
            this.state = 315;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,21,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 311;
                    this.match(GrammarParser.COMMA);
                    this.state = 312;
                    this.variableInitializer(); 
                }
                this.state = 317;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,21,this._ctx);
            }

            this.state = 319;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===GrammarParser.COMMA) {
                this.state = 318;
                this.match(GrammarParser.COMMA);
            }

        }

        this.state = 323;
        this.match(GrammarParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClassOrInterfaceTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_classOrInterfaceType;
    return this;
}

ClassOrInterfaceTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassOrInterfaceTypeContext.prototype.constructor = ClassOrInterfaceTypeContext;

ClassOrInterfaceTypeContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.IDENTIFIER);
    } else {
        return this.getToken(GrammarParser.IDENTIFIER, i);
    }
};


ClassOrInterfaceTypeContext.prototype.typeArguments = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeArgumentsContext);
    } else {
        return this.getTypedRuleContext(TypeArgumentsContext,i);
    }
};

ClassOrInterfaceTypeContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.DOT);
    } else {
        return this.getToken(GrammarParser.DOT, i);
    }
};


ClassOrInterfaceTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterClassOrInterfaceType(this);
	}
};

ClassOrInterfaceTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitClassOrInterfaceType(this);
	}
};

ClassOrInterfaceTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitClassOrInterfaceType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ClassOrInterfaceTypeContext = ClassOrInterfaceTypeContext;

GrammarParser.prototype.classOrInterfaceType = function() {

    var localctx = new ClassOrInterfaceTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, GrammarParser.RULE_classOrInterfaceType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 325;
        this.match(GrammarParser.IDENTIFIER);
        this.state = 327;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===GrammarParser.LT) {
            this.state = 326;
            this.typeArguments();
        }

        this.state = 336;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GrammarParser.DOT) {
            this.state = 329;
            this.match(GrammarParser.DOT);
            this.state = 330;
            this.match(GrammarParser.IDENTIFIER);
            this.state = 332;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===GrammarParser.LT) {
                this.state = 331;
                this.typeArguments();
            }

            this.state = 338;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeArgumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_typeArgument;
    return this;
}

TypeArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeArgumentContext.prototype.constructor = TypeArgumentContext;

TypeArgumentContext.prototype.typeType = function() {
    return this.getTypedRuleContext(TypeTypeContext,0);
};

TypeArgumentContext.prototype.QUESTION = function() {
    return this.getToken(GrammarParser.QUESTION, 0);
};

TypeArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterTypeArgument(this);
	}
};

TypeArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitTypeArgument(this);
	}
};

TypeArgumentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitTypeArgument(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.TypeArgumentContext = TypeArgumentContext;

GrammarParser.prototype.typeArgument = function() {

    var localctx = new TypeArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, GrammarParser.RULE_typeArgument);
    var _la = 0; // Token type
    try {
        this.state = 344;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GrammarParser.BOOLEAN:
        case GrammarParser.BYTE:
        case GrammarParser.CHAR:
        case GrammarParser.DOUBLE:
        case GrammarParser.FLOAT:
        case GrammarParser.INT:
        case GrammarParser.LONG:
        case GrammarParser.SHORT:
            this.enterOuterAlt(localctx, 1);
            this.state = 339;
            this.typeType();
            break;
        case GrammarParser.QUESTION:
            this.enterOuterAlt(localctx, 2);
            this.state = 340;
            this.match(GrammarParser.QUESTION);
            this.state = 342;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GrammarParser.BOOLEAN) | (1 << GrammarParser.BYTE) | (1 << GrammarParser.CHAR) | (1 << GrammarParser.DOUBLE) | (1 << GrammarParser.FLOAT) | (1 << GrammarParser.INT) | (1 << GrammarParser.LONG) | (1 << GrammarParser.SHORT))) !== 0)) {
                this.state = 341;
                this.typeType();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QualifiedNameListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_qualifiedNameList;
    return this;
}

QualifiedNameListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QualifiedNameListContext.prototype.constructor = QualifiedNameListContext;

QualifiedNameListContext.prototype.qualifiedName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QualifiedNameContext);
    } else {
        return this.getTypedRuleContext(QualifiedNameContext,i);
    }
};

QualifiedNameListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.COMMA);
    } else {
        return this.getToken(GrammarParser.COMMA, i);
    }
};


QualifiedNameListContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterQualifiedNameList(this);
	}
};

QualifiedNameListContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitQualifiedNameList(this);
	}
};

QualifiedNameListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitQualifiedNameList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.QualifiedNameListContext = QualifiedNameListContext;

GrammarParser.prototype.qualifiedNameList = function() {

    var localctx = new QualifiedNameListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, GrammarParser.RULE_qualifiedNameList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 346;
        this.qualifiedName();
        this.state = 351;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GrammarParser.COMMA) {
            this.state = 347;
            this.match(GrammarParser.COMMA);
            this.state = 348;
            this.qualifiedName();
            this.state = 353;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FormalParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_formalParameters;
    return this;
}

FormalParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParametersContext.prototype.constructor = FormalParametersContext;

FormalParametersContext.prototype.LPAREN = function() {
    return this.getToken(GrammarParser.LPAREN, 0);
};

FormalParametersContext.prototype.RPAREN = function() {
    return this.getToken(GrammarParser.RPAREN, 0);
};

FormalParametersContext.prototype.formalParameterList = function() {
    return this.getTypedRuleContext(FormalParameterListContext,0);
};

FormalParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterFormalParameters(this);
	}
};

FormalParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitFormalParameters(this);
	}
};

FormalParametersContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitFormalParameters(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.FormalParametersContext = FormalParametersContext;

GrammarParser.prototype.formalParameters = function() {

    var localctx = new FormalParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, GrammarParser.RULE_formalParameters);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 354;
        this.match(GrammarParser.LPAREN);
        this.state = 356;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GrammarParser.BOOLEAN) | (1 << GrammarParser.BYTE) | (1 << GrammarParser.CHAR) | (1 << GrammarParser.DOUBLE) | (1 << GrammarParser.FINAL) | (1 << GrammarParser.FLOAT) | (1 << GrammarParser.INT) | (1 << GrammarParser.LONG) | (1 << GrammarParser.SHORT))) !== 0) || _la===GrammarParser.AT) {
            this.state = 355;
            this.formalParameterList();
        }

        this.state = 358;
        this.match(GrammarParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FormalParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_formalParameterList;
    return this;
}

FormalParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParameterListContext.prototype.constructor = FormalParameterListContext;

FormalParameterListContext.prototype.formalParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FormalParameterContext);
    } else {
        return this.getTypedRuleContext(FormalParameterContext,i);
    }
};

FormalParameterListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.COMMA);
    } else {
        return this.getToken(GrammarParser.COMMA, i);
    }
};


FormalParameterListContext.prototype.lastFormalParameter = function() {
    return this.getTypedRuleContext(LastFormalParameterContext,0);
};

FormalParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterFormalParameterList(this);
	}
};

FormalParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitFormalParameterList(this);
	}
};

FormalParameterListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitFormalParameterList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.FormalParameterListContext = FormalParameterListContext;

GrammarParser.prototype.formalParameterList = function() {

    var localctx = new FormalParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, GrammarParser.RULE_formalParameterList);
    var _la = 0; // Token type
    try {
        this.state = 373;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 360;
            this.formalParameter();
            this.state = 365;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,31,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 361;
                    this.match(GrammarParser.COMMA);
                    this.state = 362;
                    this.formalParameter(); 
                }
                this.state = 367;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,31,this._ctx);
            }

            this.state = 370;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===GrammarParser.COMMA) {
                this.state = 368;
                this.match(GrammarParser.COMMA);
                this.state = 369;
                this.lastFormalParameter();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 372;
            this.lastFormalParameter();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FormalParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_formalParameter;
    return this;
}

FormalParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParameterContext.prototype.constructor = FormalParameterContext;

FormalParameterContext.prototype.typeType = function() {
    return this.getTypedRuleContext(TypeTypeContext,0);
};

FormalParameterContext.prototype.variableDeclaratorId = function() {
    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
};

FormalParameterContext.prototype.variableModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableModifierContext);
    } else {
        return this.getTypedRuleContext(VariableModifierContext,i);
    }
};

FormalParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterFormalParameter(this);
	}
};

FormalParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitFormalParameter(this);
	}
};

FormalParameterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitFormalParameter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.FormalParameterContext = FormalParameterContext;

GrammarParser.prototype.formalParameter = function() {

    var localctx = new FormalParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, GrammarParser.RULE_formalParameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 378;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GrammarParser.FINAL || _la===GrammarParser.AT) {
            this.state = 375;
            this.variableModifier();
            this.state = 380;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 381;
        this.typeType();
        this.state = 382;
        this.variableDeclaratorId();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LastFormalParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_lastFormalParameter;
    return this;
}

LastFormalParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LastFormalParameterContext.prototype.constructor = LastFormalParameterContext;

LastFormalParameterContext.prototype.typeType = function() {
    return this.getTypedRuleContext(TypeTypeContext,0);
};

LastFormalParameterContext.prototype.ELLIPSIS = function() {
    return this.getToken(GrammarParser.ELLIPSIS, 0);
};

LastFormalParameterContext.prototype.variableDeclaratorId = function() {
    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
};

LastFormalParameterContext.prototype.variableModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableModifierContext);
    } else {
        return this.getTypedRuleContext(VariableModifierContext,i);
    }
};

LastFormalParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterLastFormalParameter(this);
	}
};

LastFormalParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitLastFormalParameter(this);
	}
};

LastFormalParameterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitLastFormalParameter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.LastFormalParameterContext = LastFormalParameterContext;

GrammarParser.prototype.lastFormalParameter = function() {

    var localctx = new LastFormalParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, GrammarParser.RULE_lastFormalParameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 387;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GrammarParser.FINAL || _la===GrammarParser.AT) {
            this.state = 384;
            this.variableModifier();
            this.state = 389;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 390;
        this.typeType();
        this.state = 391;
        this.match(GrammarParser.ELLIPSIS);
        this.state = 392;
        this.variableDeclaratorId();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QualifiedNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_qualifiedName;
    return this;
}

QualifiedNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QualifiedNameContext.prototype.constructor = QualifiedNameContext;

QualifiedNameContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.IDENTIFIER);
    } else {
        return this.getToken(GrammarParser.IDENTIFIER, i);
    }
};


QualifiedNameContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.DOT);
    } else {
        return this.getToken(GrammarParser.DOT, i);
    }
};


QualifiedNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterQualifiedName(this);
	}
};

QualifiedNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitQualifiedName(this);
	}
};

QualifiedNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitQualifiedName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.QualifiedNameContext = QualifiedNameContext;

GrammarParser.prototype.qualifiedName = function() {

    var localctx = new QualifiedNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, GrammarParser.RULE_qualifiedName);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 394;
        this.match(GrammarParser.IDENTIFIER);
        this.state = 399;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GrammarParser.DOT) {
            this.state = 395;
            this.match(GrammarParser.DOT);
            this.state = 396;
            this.match(GrammarParser.IDENTIFIER);
            this.state = 401;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.integerLiteral = function() {
    return this.getTypedRuleContext(IntegerLiteralContext,0);
};

LiteralContext.prototype.floatLiteral = function() {
    return this.getTypedRuleContext(FloatLiteralContext,0);
};

LiteralContext.prototype.CHAR_LITERAL = function() {
    return this.getToken(GrammarParser.CHAR_LITERAL, 0);
};

LiteralContext.prototype.STRING_LITERAL = function() {
    return this.getToken(GrammarParser.STRING_LITERAL, 0);
};

LiteralContext.prototype.BOOL_LITERAL = function() {
    return this.getToken(GrammarParser.BOOL_LITERAL, 0);
};

LiteralContext.prototype.NULL_LITERAL = function() {
    return this.getToken(GrammarParser.NULL_LITERAL, 0);
};

LiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterLiteral(this);
	}
};

LiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitLiteral(this);
	}
};

LiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.LiteralContext = LiteralContext;

GrammarParser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, GrammarParser.RULE_literal);
    try {
        this.state = 408;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GrammarParser.DECIMAL_LITERAL:
        case GrammarParser.HEX_LITERAL:
        case GrammarParser.OCT_LITERAL:
        case GrammarParser.BINARY_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 402;
            this.integerLiteral();
            break;
        case GrammarParser.FLOAT_LITERAL:
        case GrammarParser.HEX_FLOAT_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 403;
            this.floatLiteral();
            break;
        case GrammarParser.CHAR_LITERAL:
            this.enterOuterAlt(localctx, 3);
            this.state = 404;
            this.match(GrammarParser.CHAR_LITERAL);
            break;
        case GrammarParser.STRING_LITERAL:
            this.enterOuterAlt(localctx, 4);
            this.state = 405;
            this.match(GrammarParser.STRING_LITERAL);
            break;
        case GrammarParser.BOOL_LITERAL:
            this.enterOuterAlt(localctx, 5);
            this.state = 406;
            this.match(GrammarParser.BOOL_LITERAL);
            break;
        case GrammarParser.NULL_LITERAL:
            this.enterOuterAlt(localctx, 6);
            this.state = 407;
            this.match(GrammarParser.NULL_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IntegerLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_integerLiteral;
    return this;
}

IntegerLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntegerLiteralContext.prototype.constructor = IntegerLiteralContext;

IntegerLiteralContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(GrammarParser.DECIMAL_LITERAL, 0);
};

IntegerLiteralContext.prototype.HEX_LITERAL = function() {
    return this.getToken(GrammarParser.HEX_LITERAL, 0);
};

IntegerLiteralContext.prototype.OCT_LITERAL = function() {
    return this.getToken(GrammarParser.OCT_LITERAL, 0);
};

IntegerLiteralContext.prototype.BINARY_LITERAL = function() {
    return this.getToken(GrammarParser.BINARY_LITERAL, 0);
};

IntegerLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterIntegerLiteral(this);
	}
};

IntegerLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitIntegerLiteral(this);
	}
};

IntegerLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitIntegerLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.IntegerLiteralContext = IntegerLiteralContext;

GrammarParser.prototype.integerLiteral = function() {

    var localctx = new IntegerLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, GrammarParser.RULE_integerLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 410;
        _la = this._input.LA(1);
        if(!(((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (GrammarParser.DECIMAL_LITERAL - 37)) | (1 << (GrammarParser.HEX_LITERAL - 37)) | (1 << (GrammarParser.OCT_LITERAL - 37)) | (1 << (GrammarParser.BINARY_LITERAL - 37)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FloatLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_floatLiteral;
    return this;
}

FloatLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FloatLiteralContext.prototype.constructor = FloatLiteralContext;

FloatLiteralContext.prototype.FLOAT_LITERAL = function() {
    return this.getToken(GrammarParser.FLOAT_LITERAL, 0);
};

FloatLiteralContext.prototype.HEX_FLOAT_LITERAL = function() {
    return this.getToken(GrammarParser.HEX_FLOAT_LITERAL, 0);
};

FloatLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterFloatLiteral(this);
	}
};

FloatLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitFloatLiteral(this);
	}
};

FloatLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitFloatLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.FloatLiteralContext = FloatLiteralContext;

GrammarParser.prototype.floatLiteral = function() {

    var localctx = new FloatLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, GrammarParser.RULE_floatLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 412;
        _la = this._input.LA(1);
        if(!(_la===GrammarParser.FLOAT_LITERAL || _la===GrammarParser.HEX_FLOAT_LITERAL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnnotationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_annotation;
    return this;
}

AnnotationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationContext.prototype.constructor = AnnotationContext;

AnnotationContext.prototype.AT = function() {
    return this.getToken(GrammarParser.AT, 0);
};

AnnotationContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

AnnotationContext.prototype.LPAREN = function() {
    return this.getToken(GrammarParser.LPAREN, 0);
};

AnnotationContext.prototype.RPAREN = function() {
    return this.getToken(GrammarParser.RPAREN, 0);
};

AnnotationContext.prototype.elementValuePairs = function() {
    return this.getTypedRuleContext(ElementValuePairsContext,0);
};

AnnotationContext.prototype.elementValue = function() {
    return this.getTypedRuleContext(ElementValueContext,0);
};

AnnotationContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterAnnotation(this);
	}
};

AnnotationContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitAnnotation(this);
	}
};

AnnotationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitAnnotation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.AnnotationContext = AnnotationContext;

GrammarParser.prototype.annotation = function() {

    var localctx = new AnnotationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, GrammarParser.RULE_annotation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 414;
        this.match(GrammarParser.AT);
        this.state = 415;
        this.qualifiedName();
        this.state = 422;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===GrammarParser.LPAREN) {
            this.state = 416;
            this.match(GrammarParser.LPAREN);
            this.state = 419;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
            if(la_===1) {
                this.state = 417;
                this.elementValuePairs();

            } else if(la_===2) {
                this.state = 418;
                this.elementValue();

            }
            this.state = 421;
            this.match(GrammarParser.RPAREN);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ElementValuePairsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_elementValuePairs;
    return this;
}

ElementValuePairsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementValuePairsContext.prototype.constructor = ElementValuePairsContext;

ElementValuePairsContext.prototype.elementValuePair = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ElementValuePairContext);
    } else {
        return this.getTypedRuleContext(ElementValuePairContext,i);
    }
};

ElementValuePairsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.COMMA);
    } else {
        return this.getToken(GrammarParser.COMMA, i);
    }
};


ElementValuePairsContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterElementValuePairs(this);
	}
};

ElementValuePairsContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitElementValuePairs(this);
	}
};

ElementValuePairsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitElementValuePairs(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ElementValuePairsContext = ElementValuePairsContext;

GrammarParser.prototype.elementValuePairs = function() {

    var localctx = new ElementValuePairsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, GrammarParser.RULE_elementValuePairs);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 424;
        this.elementValuePair();
        this.state = 429;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GrammarParser.COMMA) {
            this.state = 425;
            this.match(GrammarParser.COMMA);
            this.state = 426;
            this.elementValuePair();
            this.state = 431;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ElementValuePairContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_elementValuePair;
    return this;
}

ElementValuePairContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementValuePairContext.prototype.constructor = ElementValuePairContext;

ElementValuePairContext.prototype.IDENTIFIER = function() {
    return this.getToken(GrammarParser.IDENTIFIER, 0);
};

ElementValuePairContext.prototype.ASSIGN = function() {
    return this.getToken(GrammarParser.ASSIGN, 0);
};

ElementValuePairContext.prototype.elementValue = function() {
    return this.getTypedRuleContext(ElementValueContext,0);
};

ElementValuePairContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterElementValuePair(this);
	}
};

ElementValuePairContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitElementValuePair(this);
	}
};

ElementValuePairContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitElementValuePair(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ElementValuePairContext = ElementValuePairContext;

GrammarParser.prototype.elementValuePair = function() {

    var localctx = new ElementValuePairContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, GrammarParser.RULE_elementValuePair);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 432;
        this.match(GrammarParser.IDENTIFIER);
        this.state = 433;
        this.match(GrammarParser.ASSIGN);
        this.state = 434;
        this.elementValue();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ElementValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_elementValue;
    return this;
}

ElementValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementValueContext.prototype.constructor = ElementValueContext;

ElementValueContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ElementValueContext.prototype.annotation = function() {
    return this.getTypedRuleContext(AnnotationContext,0);
};

ElementValueContext.prototype.elementValueArrayInitializer = function() {
    return this.getTypedRuleContext(ElementValueArrayInitializerContext,0);
};

ElementValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterElementValue(this);
	}
};

ElementValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitElementValue(this);
	}
};

ElementValueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitElementValue(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ElementValueContext = ElementValueContext;

GrammarParser.prototype.elementValue = function() {

    var localctx = new ElementValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, GrammarParser.RULE_elementValue);
    try {
        this.state = 439;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GrammarParser.BOOLEAN:
        case GrammarParser.BYTE:
        case GrammarParser.CHAR:
        case GrammarParser.DOUBLE:
        case GrammarParser.FLOAT:
        case GrammarParser.INT:
        case GrammarParser.LONG:
        case GrammarParser.SHORT:
        case GrammarParser.VOID:
        case GrammarParser.DECIMAL_LITERAL:
        case GrammarParser.HEX_LITERAL:
        case GrammarParser.OCT_LITERAL:
        case GrammarParser.BINARY_LITERAL:
        case GrammarParser.FLOAT_LITERAL:
        case GrammarParser.HEX_FLOAT_LITERAL:
        case GrammarParser.BOOL_LITERAL:
        case GrammarParser.CHAR_LITERAL:
        case GrammarParser.STRING_LITERAL:
        case GrammarParser.NULL_LITERAL:
        case GrammarParser.LPAREN:
        case GrammarParser.BANG:
        case GrammarParser.TILDE:
        case GrammarParser.INC:
        case GrammarParser.DEC:
        case GrammarParser.ADD:
        case GrammarParser.SUB:
        case GrammarParser.COLONCOLON:
        case GrammarParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 436;
            this.expression(0);
            break;
        case GrammarParser.AT:
            this.enterOuterAlt(localctx, 2);
            this.state = 437;
            this.annotation();
            break;
        case GrammarParser.LBRACE:
            this.enterOuterAlt(localctx, 3);
            this.state = 438;
            this.elementValueArrayInitializer();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ElementValueArrayInitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_elementValueArrayInitializer;
    return this;
}

ElementValueArrayInitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementValueArrayInitializerContext.prototype.constructor = ElementValueArrayInitializerContext;

ElementValueArrayInitializerContext.prototype.LBRACE = function() {
    return this.getToken(GrammarParser.LBRACE, 0);
};

ElementValueArrayInitializerContext.prototype.RBRACE = function() {
    return this.getToken(GrammarParser.RBRACE, 0);
};

ElementValueArrayInitializerContext.prototype.elementValue = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ElementValueContext);
    } else {
        return this.getTypedRuleContext(ElementValueContext,i);
    }
};

ElementValueArrayInitializerContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.COMMA);
    } else {
        return this.getToken(GrammarParser.COMMA, i);
    }
};


ElementValueArrayInitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterElementValueArrayInitializer(this);
	}
};

ElementValueArrayInitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitElementValueArrayInitializer(this);
	}
};

ElementValueArrayInitializerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitElementValueArrayInitializer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ElementValueArrayInitializerContext = ElementValueArrayInitializerContext;

GrammarParser.prototype.elementValueArrayInitializer = function() {

    var localctx = new ElementValueArrayInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, GrammarParser.RULE_elementValueArrayInitializer);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 441;
        this.match(GrammarParser.LBRACE);
        this.state = 450;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GrammarParser.BOOLEAN) | (1 << GrammarParser.BYTE) | (1 << GrammarParser.CHAR) | (1 << GrammarParser.DOUBLE) | (1 << GrammarParser.FLOAT) | (1 << GrammarParser.INT) | (1 << GrammarParser.LONG) | (1 << GrammarParser.SHORT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (GrammarParser.VOID - 32)) | (1 << (GrammarParser.DECIMAL_LITERAL - 32)) | (1 << (GrammarParser.HEX_LITERAL - 32)) | (1 << (GrammarParser.OCT_LITERAL - 32)) | (1 << (GrammarParser.BINARY_LITERAL - 32)) | (1 << (GrammarParser.FLOAT_LITERAL - 32)) | (1 << (GrammarParser.HEX_FLOAT_LITERAL - 32)) | (1 << (GrammarParser.BOOL_LITERAL - 32)) | (1 << (GrammarParser.CHAR_LITERAL - 32)) | (1 << (GrammarParser.STRING_LITERAL - 32)) | (1 << (GrammarParser.NULL_LITERAL - 32)) | (1 << (GrammarParser.LPAREN - 32)) | (1 << (GrammarParser.LBRACE - 32)) | (1 << (GrammarParser.BANG - 32)) | (1 << (GrammarParser.TILDE - 32)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (GrammarParser.INC - 69)) | (1 << (GrammarParser.DEC - 69)) | (1 << (GrammarParser.ADD - 69)) | (1 << (GrammarParser.SUB - 69)) | (1 << (GrammarParser.COLONCOLON - 69)) | (1 << (GrammarParser.AT - 69)) | (1 << (GrammarParser.IDENTIFIER - 69)))) !== 0)) {
            this.state = 442;
            this.elementValue();
            this.state = 447;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,42,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 443;
                    this.match(GrammarParser.COMMA);
                    this.state = 444;
                    this.elementValue(); 
                }
                this.state = 449;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,42,this._ctx);
            }

        }

        this.state = 453;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===GrammarParser.COMMA) {
            this.state = 452;
            this.match(GrammarParser.COMMA);
        }

        this.state = 455;
        this.match(GrammarParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DefaultValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_defaultValue;
    return this;
}

DefaultValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefaultValueContext.prototype.constructor = DefaultValueContext;

DefaultValueContext.prototype.DEFAULT = function() {
    return this.getToken(GrammarParser.DEFAULT, 0);
};

DefaultValueContext.prototype.elementValue = function() {
    return this.getTypedRuleContext(ElementValueContext,0);
};

DefaultValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterDefaultValue(this);
	}
};

DefaultValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitDefaultValue(this);
	}
};

DefaultValueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitDefaultValue(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.DefaultValueContext = DefaultValueContext;

GrammarParser.prototype.defaultValue = function() {

    var localctx = new DefaultValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, GrammarParser.RULE_defaultValue);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 457;
        this.match(GrammarParser.DEFAULT);
        this.state = 458;
        this.elementValue();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_block;
    return this;
}

BlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockContext.prototype.constructor = BlockContext;

BlockContext.prototype.LBRACE = function() {
    return this.getToken(GrammarParser.LBRACE, 0);
};

BlockContext.prototype.RBRACE = function() {
    return this.getToken(GrammarParser.RBRACE, 0);
};

BlockContext.prototype.blockStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlockStatementContext);
    } else {
        return this.getTypedRuleContext(BlockStatementContext,i);
    }
};

BlockContext.prototype.wrongBlockStatement = function() {
    return this.getTypedRuleContext(WrongBlockStatementContext,0);
};

BlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterBlock(this);
	}
};

BlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitBlock(this);
	}
};

BlockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitBlock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.BlockContext = BlockContext;

GrammarParser.prototype.block = function() {

    var localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, GrammarParser.RULE_block);
    var _la = 0; // Token type
    try {
        this.state = 469;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 460;
            this.match(GrammarParser.LBRACE);
            this.state = 464;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GrammarParser.BOOLEAN) | (1 << GrammarParser.BREAK) | (1 << GrammarParser.BYTE) | (1 << GrammarParser.CHAR) | (1 << GrammarParser.CONTINUE) | (1 << GrammarParser.DO) | (1 << GrammarParser.DOUBLE) | (1 << GrammarParser.FINAL) | (1 << GrammarParser.FLOAT) | (1 << GrammarParser.FOR) | (1 << GrammarParser.IF) | (1 << GrammarParser.INT) | (1 << GrammarParser.LONG) | (1 << GrammarParser.RETURN) | (1 << GrammarParser.SHORT) | (1 << GrammarParser.SWITCH) | (1 << GrammarParser.SYNCHRONIZED) | (1 << GrammarParser.THROW) | (1 << GrammarParser.TRY))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (GrammarParser.VOID - 32)) | (1 << (GrammarParser.WHILE - 32)) | (1 << (GrammarParser.PRINT - 32)) | (1 << (GrammarParser.SCAN - 32)) | (1 << (GrammarParser.DECIMAL_LITERAL - 32)) | (1 << (GrammarParser.HEX_LITERAL - 32)) | (1 << (GrammarParser.OCT_LITERAL - 32)) | (1 << (GrammarParser.BINARY_LITERAL - 32)) | (1 << (GrammarParser.FLOAT_LITERAL - 32)) | (1 << (GrammarParser.HEX_FLOAT_LITERAL - 32)) | (1 << (GrammarParser.BOOL_LITERAL - 32)) | (1 << (GrammarParser.CHAR_LITERAL - 32)) | (1 << (GrammarParser.STRING_LITERAL - 32)) | (1 << (GrammarParser.NULL_LITERAL - 32)) | (1 << (GrammarParser.LPAREN - 32)) | (1 << (GrammarParser.LBRACE - 32)) | (1 << (GrammarParser.SEMI - 32)) | (1 << (GrammarParser.BANG - 32)) | (1 << (GrammarParser.TILDE - 32)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (GrammarParser.INC - 69)) | (1 << (GrammarParser.DEC - 69)) | (1 << (GrammarParser.ADD - 69)) | (1 << (GrammarParser.SUB - 69)) | (1 << (GrammarParser.COLONCOLON - 69)) | (1 << (GrammarParser.AT - 69)) | (1 << (GrammarParser.IDENTIFIER - 69)))) !== 0)) {
                this.state = 461;
                this.blockStatement();
                this.state = 466;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 467;
            this.match(GrammarParser.RBRACE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 468;
            this.wrongBlockStatement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WrongBlockStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_wrongBlockStatement;
    return this;
}

WrongBlockStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WrongBlockStatementContext.prototype.constructor = WrongBlockStatementContext;

WrongBlockStatementContext.prototype.LBRACE = function() {
    return this.getToken(GrammarParser.LBRACE, 0);
};

WrongBlockStatementContext.prototype.blockStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlockStatementContext);
    } else {
        return this.getTypedRuleContext(BlockStatementContext,i);
    }
};

WrongBlockStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterWrongBlockStatement(this);
	}
};

WrongBlockStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitWrongBlockStatement(this);
	}
};

WrongBlockStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitWrongBlockStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.WrongBlockStatementContext = WrongBlockStatementContext;

GrammarParser.prototype.wrongBlockStatement = function() {

    var localctx = new WrongBlockStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, GrammarParser.RULE_wrongBlockStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 471;
        this.match(GrammarParser.LBRACE);
        this.state = 475;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,47,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 472;
                this.blockStatement(); 
            }
            this.state = 477;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,47,this._ctx);
        }

        this.state = 478;
        this.blockStatement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BlockStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_blockStatement;
    return this;
}

BlockStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockStatementContext.prototype.constructor = BlockStatementContext;

BlockStatementContext.prototype.localVariableDeclaration = function() {
    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
};

BlockStatementContext.prototype.SEMI = function() {
    return this.getToken(GrammarParser.SEMI, 0);
};

BlockStatementContext.prototype.wrongLocalVariableDeclaration = function() {
    return this.getTypedRuleContext(WrongLocalVariableDeclarationContext,0);
};

BlockStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

BlockStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterBlockStatement(this);
	}
};

BlockStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitBlockStatement(this);
	}
};

BlockStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitBlockStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.BlockStatementContext = BlockStatementContext;

GrammarParser.prototype.blockStatement = function() {

    var localctx = new BlockStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, GrammarParser.RULE_blockStatement);
    try {
        this.state = 485;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 480;
            this.localVariableDeclaration();
            this.state = 481;
            this.match(GrammarParser.SEMI);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 483;
            this.wrongLocalVariableDeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 484;
            this.statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WrongLocalVariableDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_wrongLocalVariableDeclaration;
    return this;
}

WrongLocalVariableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WrongLocalVariableDeclarationContext.prototype.constructor = WrongLocalVariableDeclarationContext;

WrongLocalVariableDeclarationContext.prototype.typeType = function() {
    return this.getTypedRuleContext(TypeTypeContext,0);
};

WrongLocalVariableDeclarationContext.prototype.variableDeclarators = function() {
    return this.getTypedRuleContext(VariableDeclaratorsContext,0);
};

WrongLocalVariableDeclarationContext.prototype.variableModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableModifierContext);
    } else {
        return this.getTypedRuleContext(VariableModifierContext,i);
    }
};

WrongLocalVariableDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterWrongLocalVariableDeclaration(this);
	}
};

WrongLocalVariableDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitWrongLocalVariableDeclaration(this);
	}
};

WrongLocalVariableDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitWrongLocalVariableDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.WrongLocalVariableDeclarationContext = WrongLocalVariableDeclarationContext;

GrammarParser.prototype.wrongLocalVariableDeclaration = function() {

    var localctx = new WrongLocalVariableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, GrammarParser.RULE_wrongLocalVariableDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 490;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GrammarParser.FINAL || _la===GrammarParser.AT) {
            this.state = 487;
            this.variableModifier();
            this.state = 492;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 493;
        this.typeType();
        this.state = 494;
        this.variableDeclarators();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LocalVariableDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_localVariableDeclaration;
    return this;
}

LocalVariableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LocalVariableDeclarationContext.prototype.constructor = LocalVariableDeclarationContext;

LocalVariableDeclarationContext.prototype.typeType = function() {
    return this.getTypedRuleContext(TypeTypeContext,0);
};

LocalVariableDeclarationContext.prototype.variableDeclarators = function() {
    return this.getTypedRuleContext(VariableDeclaratorsContext,0);
};

LocalVariableDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterLocalVariableDeclaration(this);
	}
};

LocalVariableDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitLocalVariableDeclaration(this);
	}
};

LocalVariableDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitLocalVariableDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.LocalVariableDeclarationContext = LocalVariableDeclarationContext;

GrammarParser.prototype.localVariableDeclaration = function() {

    var localctx = new LocalVariableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, GrammarParser.RULE_localVariableDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 496;
        this.typeType();
        this.state = 497;
        this.variableDeclarators();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_statement;
    this.blockLabel = null; // BlockContext
    this.statementExpression = null; // ExpressionContext
    this.identifierLabel = null; // Token
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

StatementContext.prototype.IF = function() {
    return this.getToken(GrammarParser.IF, 0);
};

StatementContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

StatementContext.prototype.parExpression = function() {
    return this.getTypedRuleContext(ParExpressionContext,0);
};

StatementContext.prototype.excessLParenExpression = function() {
    return this.getTypedRuleContext(ExcessLParenExpressionContext,0);
};

StatementContext.prototype.excessRParenExpression = function() {
    return this.getTypedRuleContext(ExcessRParenExpressionContext,0);
};

StatementContext.prototype.ELSE = function() {
    return this.getToken(GrammarParser.ELSE, 0);
};

StatementContext.prototype.FOR = function() {
    return this.getToken(GrammarParser.FOR, 0);
};

StatementContext.prototype.LPAREN = function() {
    return this.getToken(GrammarParser.LPAREN, 0);
};

StatementContext.prototype.forControl = function() {
    return this.getTypedRuleContext(ForControlContext,0);
};

StatementContext.prototype.RPAREN = function() {
    return this.getToken(GrammarParser.RPAREN, 0);
};

StatementContext.prototype.printStatement = function() {
    return this.getTypedRuleContext(PrintStatementContext,0);
};

StatementContext.prototype.printWithIdentifier = function() {
    return this.getTypedRuleContext(PrintWithIdentifierContext,0);
};

StatementContext.prototype.wrongPrintStatement = function() {
    return this.getTypedRuleContext(WrongPrintStatementContext,0);
};

StatementContext.prototype.scanMissingIdentifierError = function() {
    return this.getTypedRuleContext(ScanMissingIdentifierErrorContext,0);
};

StatementContext.prototype.SCAN = function() {
    return this.getToken(GrammarParser.SCAN, 0);
};

StatementContext.prototype.IDENTIFIER = function() {
    return this.getToken(GrammarParser.IDENTIFIER, 0);
};

StatementContext.prototype.WHILE = function() {
    return this.getToken(GrammarParser.WHILE, 0);
};

StatementContext.prototype.DO = function() {
    return this.getToken(GrammarParser.DO, 0);
};

StatementContext.prototype.SEMI = function() {
    return this.getToken(GrammarParser.SEMI, 0);
};

StatementContext.prototype.TRY = function() {
    return this.getToken(GrammarParser.TRY, 0);
};

StatementContext.prototype.finallyBlock = function() {
    return this.getTypedRuleContext(FinallyBlockContext,0);
};

StatementContext.prototype.catchClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CatchClauseContext);
    } else {
        return this.getTypedRuleContext(CatchClauseContext,i);
    }
};

StatementContext.prototype.resourceSpecification = function() {
    return this.getTypedRuleContext(ResourceSpecificationContext,0);
};

StatementContext.prototype.SWITCH = function() {
    return this.getToken(GrammarParser.SWITCH, 0);
};

StatementContext.prototype.LBRACE = function() {
    return this.getToken(GrammarParser.LBRACE, 0);
};

StatementContext.prototype.RBRACE = function() {
    return this.getToken(GrammarParser.RBRACE, 0);
};

StatementContext.prototype.switchBlockStatementGroup = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SwitchBlockStatementGroupContext);
    } else {
        return this.getTypedRuleContext(SwitchBlockStatementGroupContext,i);
    }
};

StatementContext.prototype.switchLabel = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SwitchLabelContext);
    } else {
        return this.getTypedRuleContext(SwitchLabelContext,i);
    }
};

StatementContext.prototype.SYNCHRONIZED = function() {
    return this.getToken(GrammarParser.SYNCHRONIZED, 0);
};

StatementContext.prototype.RETURN = function() {
    return this.getToken(GrammarParser.RETURN, 0);
};

StatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

StatementContext.prototype.returnPrimitiveTypeError = function() {
    return this.getTypedRuleContext(ReturnPrimitiveTypeErrorContext,0);
};

StatementContext.prototype.returnMissingError = function() {
    return this.getTypedRuleContext(ReturnMissingErrorContext,0);
};

StatementContext.prototype.THROW = function() {
    return this.getToken(GrammarParser.THROW, 0);
};

StatementContext.prototype.BREAK = function() {
    return this.getToken(GrammarParser.BREAK, 0);
};

StatementContext.prototype.CONTINUE = function() {
    return this.getToken(GrammarParser.CONTINUE, 0);
};

StatementContext.prototype.COLON = function() {
    return this.getToken(GrammarParser.COLON, 0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitStatement(this);
	}
};

StatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.StatementContext = StatementContext;

GrammarParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, GrammarParser.RULE_statement);
    var _la = 0; // Token type
    try {
        this.state = 625;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 499;
            localctx.blockLabel = this.block();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 500;
            this.match(GrammarParser.IF);
            this.state = 504;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
            switch(la_) {
            case 1:
                this.state = 501;
                this.parExpression();
                break;

            case 2:
                this.state = 502;
                this.excessLParenExpression();
                break;

            case 3:
                this.state = 503;
                this.excessRParenExpression();
                break;

            }
            this.state = 506;
            this.statement();
            this.state = 509;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
            if(la_===1) {
                this.state = 507;
                this.match(GrammarParser.ELSE);
                this.state = 508;
                this.statement();

            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 511;
            this.match(GrammarParser.FOR);
            this.state = 512;
            this.match(GrammarParser.LPAREN);
            this.state = 513;
            this.forControl();
            this.state = 514;
            this.match(GrammarParser.RPAREN);
            this.state = 515;
            this.statement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 517;
            this.printStatement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 518;
            this.printWithIdentifier();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 519;
            this.wrongPrintStatement();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 520;
            this.scanMissingIdentifierError();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 521;
            this.match(GrammarParser.SCAN);
            this.state = 522;
            this.match(GrammarParser.LPAREN);
            this.state = 523;
            this.match(GrammarParser.IDENTIFIER);
            this.state = 524;
            this.match(GrammarParser.RPAREN);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 525;
            this.match(GrammarParser.WHILE);
            this.state = 529;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
            switch(la_) {
            case 1:
                this.state = 526;
                this.parExpression();
                break;

            case 2:
                this.state = 527;
                this.excessLParenExpression();
                break;

            case 3:
                this.state = 528;
                this.excessRParenExpression();
                break;

            }
            this.state = 531;
            this.statement();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 533;
            this.match(GrammarParser.DO);
            this.state = 534;
            this.statement();
            this.state = 535;
            this.match(GrammarParser.WHILE);
            this.state = 539;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
            switch(la_) {
            case 1:
                this.state = 536;
                this.parExpression();
                break;

            case 2:
                this.state = 537;
                this.excessLParenExpression();
                break;

            case 3:
                this.state = 538;
                this.excessRParenExpression();
                break;

            }
            this.state = 541;
            this.match(GrammarParser.SEMI);
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 543;
            this.match(GrammarParser.TRY);
            this.state = 544;
            this.block();
            this.state = 554;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case GrammarParser.CATCH:
                this.state = 546; 
                this._errHandler.sync(this);
                var _alt = 1;
                do {
                	switch (_alt) {
                	case 1:
                		this.state = 545;
                		this.catchClause();
                		break;
                	default:
                		throw new antlr4.error.NoViableAltException(this);
                	}
                	this.state = 548; 
                	this._errHandler.sync(this);
                	_alt = this._interp.adaptivePredict(this._input,54, this._ctx);
                } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
                this.state = 551;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
                if(la_===1) {
                    this.state = 550;
                    this.finallyBlock();

                }
                break;
            case GrammarParser.FINALLY:
                this.state = 553;
                this.finallyBlock();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 556;
            this.match(GrammarParser.TRY);
            this.state = 557;
            this.resourceSpecification();
            this.state = 558;
            this.block();
            this.state = 562;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,57,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 559;
                    this.catchClause(); 
                }
                this.state = 564;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,57,this._ctx);
            }

            this.state = 566;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
            if(la_===1) {
                this.state = 565;
                this.finallyBlock();

            }
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 568;
            this.match(GrammarParser.SWITCH);
            this.state = 572;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
            switch(la_) {
            case 1:
                this.state = 569;
                this.parExpression();
                break;

            case 2:
                this.state = 570;
                this.excessLParenExpression();
                break;

            case 3:
                this.state = 571;
                this.excessRParenExpression();
                break;

            }
            this.state = 574;
            this.match(GrammarParser.LBRACE);
            this.state = 578;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,60,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 575;
                    this.switchBlockStatementGroup(); 
                }
                this.state = 580;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,60,this._ctx);
            }

            this.state = 584;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===GrammarParser.CASE || _la===GrammarParser.DEFAULT) {
                this.state = 581;
                this.switchLabel();
                this.state = 586;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 587;
            this.match(GrammarParser.RBRACE);
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 589;
            this.match(GrammarParser.SYNCHRONIZED);
            this.state = 593;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
            switch(la_) {
            case 1:
                this.state = 590;
                this.parExpression();
                break;

            case 2:
                this.state = 591;
                this.excessLParenExpression();
                break;

            case 3:
                this.state = 592;
                this.excessRParenExpression();
                break;

            }
            this.state = 595;
            this.block();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 597;
            this.match(GrammarParser.RETURN);
            this.state = 599;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GrammarParser.BOOLEAN) | (1 << GrammarParser.BYTE) | (1 << GrammarParser.CHAR) | (1 << GrammarParser.DOUBLE) | (1 << GrammarParser.FLOAT) | (1 << GrammarParser.INT) | (1 << GrammarParser.LONG) | (1 << GrammarParser.SHORT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (GrammarParser.VOID - 32)) | (1 << (GrammarParser.DECIMAL_LITERAL - 32)) | (1 << (GrammarParser.HEX_LITERAL - 32)) | (1 << (GrammarParser.OCT_LITERAL - 32)) | (1 << (GrammarParser.BINARY_LITERAL - 32)) | (1 << (GrammarParser.FLOAT_LITERAL - 32)) | (1 << (GrammarParser.HEX_FLOAT_LITERAL - 32)) | (1 << (GrammarParser.BOOL_LITERAL - 32)) | (1 << (GrammarParser.CHAR_LITERAL - 32)) | (1 << (GrammarParser.STRING_LITERAL - 32)) | (1 << (GrammarParser.NULL_LITERAL - 32)) | (1 << (GrammarParser.LPAREN - 32)) | (1 << (GrammarParser.BANG - 32)) | (1 << (GrammarParser.TILDE - 32)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (GrammarParser.INC - 69)) | (1 << (GrammarParser.DEC - 69)) | (1 << (GrammarParser.ADD - 69)) | (1 << (GrammarParser.SUB - 69)) | (1 << (GrammarParser.COLONCOLON - 69)) | (1 << (GrammarParser.IDENTIFIER - 69)))) !== 0)) {
                this.state = 598;
                this.expression(0);
            }

            this.state = 601;
            this.match(GrammarParser.SEMI);
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 602;
            this.returnPrimitiveTypeError();
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 603;
            this.returnMissingError();
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 604;
            this.match(GrammarParser.THROW);
            this.state = 605;
            this.expression(0);
            this.state = 606;
            this.match(GrammarParser.SEMI);
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 608;
            this.match(GrammarParser.BREAK);
            this.state = 610;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===GrammarParser.IDENTIFIER) {
                this.state = 609;
                this.match(GrammarParser.IDENTIFIER);
            }

            this.state = 612;
            this.match(GrammarParser.SEMI);
            break;

        case 20:
            this.enterOuterAlt(localctx, 20);
            this.state = 613;
            this.match(GrammarParser.CONTINUE);
            this.state = 615;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===GrammarParser.IDENTIFIER) {
                this.state = 614;
                this.match(GrammarParser.IDENTIFIER);
            }

            this.state = 617;
            this.match(GrammarParser.SEMI);
            break;

        case 21:
            this.enterOuterAlt(localctx, 21);
            this.state = 618;
            this.match(GrammarParser.SEMI);
            break;

        case 22:
            this.enterOuterAlt(localctx, 22);
            this.state = 619;
            localctx.statementExpression = this.expression(0);
            this.state = 620;
            this.match(GrammarParser.SEMI);
            break;

        case 23:
            this.enterOuterAlt(localctx, 23);
            this.state = 622;
            localctx.identifierLabel = this.match(GrammarParser.IDENTIFIER);
            this.state = 623;
            this.match(GrammarParser.COLON);
            this.state = 624;
            this.statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrintStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_printStatement;
    return this;
}

PrintStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrintStatementContext.prototype.constructor = PrintStatementContext;

PrintStatementContext.prototype.PRINT = function() {
    return this.getToken(GrammarParser.PRINT, 0);
};

PrintStatementContext.prototype.LPAREN = function() {
    return this.getToken(GrammarParser.LPAREN, 0);
};

PrintStatementContext.prototype.RPAREN = function() {
    return this.getToken(GrammarParser.RPAREN, 0);
};

PrintStatementContext.prototype.SEMI = function() {
    return this.getToken(GrammarParser.SEMI, 0);
};

PrintStatementContext.prototype.STRING_LITERAL = function() {
    return this.getToken(GrammarParser.STRING_LITERAL, 0);
};

PrintStatementContext.prototype.IDENTIFIER = function() {
    return this.getToken(GrammarParser.IDENTIFIER, 0);
};

PrintStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterPrintStatement(this);
	}
};

PrintStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitPrintStatement(this);
	}
};

PrintStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitPrintStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.PrintStatementContext = PrintStatementContext;

GrammarParser.prototype.printStatement = function() {

    var localctx = new PrintStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, GrammarParser.RULE_printStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 627;
        this.match(GrammarParser.PRINT);
        this.state = 628;
        this.match(GrammarParser.LPAREN);
        this.state = 629;
        _la = this._input.LA(1);
        if(!(_la===GrammarParser.STRING_LITERAL || _la===GrammarParser.IDENTIFIER)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 630;
        this.match(GrammarParser.RPAREN);
        this.state = 631;
        this.match(GrammarParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrintWithIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_printWithIdentifier;
    return this;
}

PrintWithIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrintWithIdentifierContext.prototype.constructor = PrintWithIdentifierContext;

PrintWithIdentifierContext.prototype.PRINT = function() {
    return this.getToken(GrammarParser.PRINT, 0);
};

PrintWithIdentifierContext.prototype.LPAREN = function() {
    return this.getToken(GrammarParser.LPAREN, 0);
};

PrintWithIdentifierContext.prototype.STRING_LITERAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.STRING_LITERAL);
    } else {
        return this.getToken(GrammarParser.STRING_LITERAL, i);
    }
};


PrintWithIdentifierContext.prototype.ADD = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.ADD);
    } else {
        return this.getToken(GrammarParser.ADD, i);
    }
};


PrintWithIdentifierContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.IDENTIFIER);
    } else {
        return this.getToken(GrammarParser.IDENTIFIER, i);
    }
};


PrintWithIdentifierContext.prototype.RPAREN = function() {
    return this.getToken(GrammarParser.RPAREN, 0);
};

PrintWithIdentifierContext.prototype.SEMI = function() {
    return this.getToken(GrammarParser.SEMI, 0);
};

PrintWithIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterPrintWithIdentifier(this);
	}
};

PrintWithIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitPrintWithIdentifier(this);
	}
};

PrintWithIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitPrintWithIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.PrintWithIdentifierContext = PrintWithIdentifierContext;

GrammarParser.prototype.printWithIdentifier = function() {

    var localctx = new PrintWithIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, GrammarParser.RULE_printWithIdentifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 633;
        this.match(GrammarParser.PRINT);
        this.state = 634;
        this.match(GrammarParser.LPAREN);
        this.state = 635;
        this.match(GrammarParser.STRING_LITERAL);
        this.state = 636;
        this.match(GrammarParser.ADD);
        this.state = 637;
        this.match(GrammarParser.IDENTIFIER);
        this.state = 644;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GrammarParser.ADD) {
            this.state = 638;
            this.match(GrammarParser.ADD);
            this.state = 639;
            this.match(GrammarParser.STRING_LITERAL);
            this.state = 640;
            this.match(GrammarParser.ADD);
            this.state = 641;
            this.match(GrammarParser.IDENTIFIER);
            this.state = 646;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 647;
        this.match(GrammarParser.RPAREN);
        this.state = 648;
        this.match(GrammarParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ScanMissingIdentifierErrorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_scanMissingIdentifierError;
    return this;
}

ScanMissingIdentifierErrorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ScanMissingIdentifierErrorContext.prototype.constructor = ScanMissingIdentifierErrorContext;

ScanMissingIdentifierErrorContext.prototype.SCAN = function() {
    return this.getToken(GrammarParser.SCAN, 0);
};

ScanMissingIdentifierErrorContext.prototype.LPAREN = function() {
    return this.getToken(GrammarParser.LPAREN, 0);
};

ScanMissingIdentifierErrorContext.prototype.RPAREN = function() {
    return this.getToken(GrammarParser.RPAREN, 0);
};

ScanMissingIdentifierErrorContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterScanMissingIdentifierError(this);
	}
};

ScanMissingIdentifierErrorContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitScanMissingIdentifierError(this);
	}
};

ScanMissingIdentifierErrorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitScanMissingIdentifierError(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ScanMissingIdentifierErrorContext = ScanMissingIdentifierErrorContext;

GrammarParser.prototype.scanMissingIdentifierError = function() {

    var localctx = new ScanMissingIdentifierErrorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, GrammarParser.RULE_scanMissingIdentifierError);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 650;
        this.match(GrammarParser.SCAN);
        this.state = 651;
        this.match(GrammarParser.LPAREN);
        this.state = 652;
        this.match(GrammarParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CompareExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_compareExpression;
    this.bop = null; // Token
    return this;
}

CompareExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CompareExpressionContext.prototype.constructor = CompareExpressionContext;

CompareExpressionContext.prototype.primary = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PrimaryContext);
    } else {
        return this.getTypedRuleContext(PrimaryContext,i);
    }
};

CompareExpressionContext.prototype.AND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.AND);
    } else {
        return this.getToken(GrammarParser.AND, i);
    }
};


CompareExpressionContext.prototype.OR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.OR);
    } else {
        return this.getToken(GrammarParser.OR, i);
    }
};


CompareExpressionContext.prototype.LE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.LE);
    } else {
        return this.getToken(GrammarParser.LE, i);
    }
};


CompareExpressionContext.prototype.GE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.GE);
    } else {
        return this.getToken(GrammarParser.GE, i);
    }
};


CompareExpressionContext.prototype.GT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.GT);
    } else {
        return this.getToken(GrammarParser.GT, i);
    }
};


CompareExpressionContext.prototype.LT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.LT);
    } else {
        return this.getToken(GrammarParser.LT, i);
    }
};


CompareExpressionContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.EQUAL);
    } else {
        return this.getToken(GrammarParser.EQUAL, i);
    }
};


CompareExpressionContext.prototype.NOTEQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.NOTEQUAL);
    } else {
        return this.getToken(GrammarParser.NOTEQUAL, i);
    }
};


CompareExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterCompareExpression(this);
	}
};

CompareExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitCompareExpression(this);
	}
};

CompareExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitCompareExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.CompareExpressionContext = CompareExpressionContext;

GrammarParser.prototype.compareExpression = function() {

    var localctx = new CompareExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, GrammarParser.RULE_compareExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 654;
        this.primary();
        this.state = 655;
        localctx.bop = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (GrammarParser.GT - 57)) | (1 << (GrammarParser.LT - 57)) | (1 << (GrammarParser.EQUAL - 57)) | (1 << (GrammarParser.LE - 57)) | (1 << (GrammarParser.GE - 57)) | (1 << (GrammarParser.NOTEQUAL - 57)))) !== 0))) {
            localctx.bop = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 656;
        this.primary();
        this.state = 665;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GrammarParser.AND || _la===GrammarParser.OR) {
            this.state = 663;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case GrammarParser.AND:
                this.state = 658;
                this.match(GrammarParser.AND);
                break;
            case GrammarParser.OR:
                this.state = 659;
                this.match(GrammarParser.OR);
                this.state = 660;
                this.primary();
                this.state = 661;
                localctx.bop = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (GrammarParser.GT - 57)) | (1 << (GrammarParser.LT - 57)) | (1 << (GrammarParser.EQUAL - 57)) | (1 << (GrammarParser.LE - 57)) | (1 << (GrammarParser.GE - 57)) | (1 << (GrammarParser.NOTEQUAL - 57)))) !== 0))) {
                    localctx.bop = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 667;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrintMissingQuotesErrorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_printMissingQuotesError;
    return this;
}

PrintMissingQuotesErrorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrintMissingQuotesErrorContext.prototype.constructor = PrintMissingQuotesErrorContext;

PrintMissingQuotesErrorContext.prototype.PRINT = function() {
    return this.getToken(GrammarParser.PRINT, 0);
};

PrintMissingQuotesErrorContext.prototype.LPAREN = function() {
    return this.getToken(GrammarParser.LPAREN, 0);
};

PrintMissingQuotesErrorContext.prototype.ERROR_STRING_LITERAL = function() {
    return this.getToken(GrammarParser.ERROR_STRING_LITERAL, 0);
};

PrintMissingQuotesErrorContext.prototype.RPAREN = function() {
    return this.getToken(GrammarParser.RPAREN, 0);
};

PrintMissingQuotesErrorContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterPrintMissingQuotesError(this);
	}
};

PrintMissingQuotesErrorContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitPrintMissingQuotesError(this);
	}
};

PrintMissingQuotesErrorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitPrintMissingQuotesError(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.PrintMissingQuotesErrorContext = PrintMissingQuotesErrorContext;

GrammarParser.prototype.printMissingQuotesError = function() {

    var localctx = new PrintMissingQuotesErrorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, GrammarParser.RULE_printMissingQuotesError);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 668;
        this.match(GrammarParser.PRINT);
        this.state = 669;
        this.match(GrammarParser.LPAREN);
        this.state = 670;
        this.match(GrammarParser.ERROR_STRING_LITERAL);
        this.state = 671;
        this.match(GrammarParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WrongPrintStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_wrongPrintStatement;
    return this;
}

WrongPrintStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WrongPrintStatementContext.prototype.constructor = WrongPrintStatementContext;

WrongPrintStatementContext.prototype.PRINT = function() {
    return this.getToken(GrammarParser.PRINT, 0);
};

WrongPrintStatementContext.prototype.LPAREN = function() {
    return this.getToken(GrammarParser.LPAREN, 0);
};

WrongPrintStatementContext.prototype.ADD = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.ADD);
    } else {
        return this.getToken(GrammarParser.ADD, i);
    }
};


WrongPrintStatementContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.IDENTIFIER);
    } else {
        return this.getToken(GrammarParser.IDENTIFIER, i);
    }
};


WrongPrintStatementContext.prototype.RPAREN = function() {
    return this.getToken(GrammarParser.RPAREN, 0);
};

WrongPrintStatementContext.prototype.SEMI = function() {
    return this.getToken(GrammarParser.SEMI, 0);
};

WrongPrintStatementContext.prototype.STRING_LITERAL = function() {
    return this.getToken(GrammarParser.STRING_LITERAL, 0);
};

WrongPrintStatementContext.prototype.SUB = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.SUB);
    } else {
        return this.getToken(GrammarParser.SUB, i);
    }
};


WrongPrintStatementContext.prototype.DIV = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.DIV);
    } else {
        return this.getToken(GrammarParser.DIV, i);
    }
};


WrongPrintStatementContext.prototype.MUL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.MUL);
    } else {
        return this.getToken(GrammarParser.MUL, i);
    }
};


WrongPrintStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterWrongPrintStatement(this);
	}
};

WrongPrintStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitWrongPrintStatement(this);
	}
};

WrongPrintStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitWrongPrintStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.WrongPrintStatementContext = WrongPrintStatementContext;

GrammarParser.prototype.wrongPrintStatement = function() {

    var localctx = new WrongPrintStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, GrammarParser.RULE_wrongPrintStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 673;
        this.match(GrammarParser.PRINT);
        this.state = 674;
        this.match(GrammarParser.LPAREN);
        this.state = 675;
        _la = this._input.LA(1);
        if(!(_la===GrammarParser.STRING_LITERAL || _la===GrammarParser.IDENTIFIER)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 676;
        this.match(GrammarParser.ADD);
        this.state = 677;
        this.match(GrammarParser.IDENTIFIER);
        this.state = 679; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 678;
            _la = this._input.LA(1);
            if(!(((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (GrammarParser.ADD - 71)) | (1 << (GrammarParser.SUB - 71)) | (1 << (GrammarParser.MUL - 71)) | (1 << (GrammarParser.DIV - 71)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 681; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (GrammarParser.ADD - 71)) | (1 << (GrammarParser.SUB - 71)) | (1 << (GrammarParser.MUL - 71)) | (1 << (GrammarParser.DIV - 71)))) !== 0));
        this.state = 683;
        this.match(GrammarParser.RPAREN);
        this.state = 684;
        this.match(GrammarParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReturnPrimitiveTypeErrorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_returnPrimitiveTypeError;
    return this;
}

ReturnPrimitiveTypeErrorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnPrimitiveTypeErrorContext.prototype.constructor = ReturnPrimitiveTypeErrorContext;

ReturnPrimitiveTypeErrorContext.prototype.RETURN = function() {
    return this.getToken(GrammarParser.RETURN, 0);
};

ReturnPrimitiveTypeErrorContext.prototype.primitiveType = function() {
    return this.getTypedRuleContext(PrimitiveTypeContext,0);
};

ReturnPrimitiveTypeErrorContext.prototype.SEMI = function() {
    return this.getToken(GrammarParser.SEMI, 0);
};

ReturnPrimitiveTypeErrorContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterReturnPrimitiveTypeError(this);
	}
};

ReturnPrimitiveTypeErrorContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitReturnPrimitiveTypeError(this);
	}
};

ReturnPrimitiveTypeErrorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitReturnPrimitiveTypeError(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ReturnPrimitiveTypeErrorContext = ReturnPrimitiveTypeErrorContext;

GrammarParser.prototype.returnPrimitiveTypeError = function() {

    var localctx = new ReturnPrimitiveTypeErrorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, GrammarParser.RULE_returnPrimitiveTypeError);
    try {
        this.state = 692;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 686;
            this.match(GrammarParser.RETURN);
            this.state = 687;
            this.primitiveType();
            this.state = 688;
            this.match(GrammarParser.SEMI);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 690;
            this.match(GrammarParser.RETURN);
            this.state = 691;
            this.primitiveType();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReturnMissingErrorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_returnMissingError;
    return this;
}

ReturnMissingErrorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnMissingErrorContext.prototype.constructor = ReturnMissingErrorContext;

ReturnMissingErrorContext.prototype.RETURN = function() {
    return this.getToken(GrammarParser.RETURN, 0);
};

ReturnMissingErrorContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ReturnMissingErrorContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterReturnMissingError(this);
	}
};

ReturnMissingErrorContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitReturnMissingError(this);
	}
};

ReturnMissingErrorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitReturnMissingError(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ReturnMissingErrorContext = ReturnMissingErrorContext;

GrammarParser.prototype.returnMissingError = function() {

    var localctx = new ReturnMissingErrorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, GrammarParser.RULE_returnMissingError);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 694;
        this.match(GrammarParser.RETURN);
        this.state = 696;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
        if(la_===1) {
            this.state = 695;
            this.expression(0);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ForErrorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_forError;
    return this;
}

ForErrorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForErrorContext.prototype.constructor = ForErrorContext;

ForErrorContext.prototype.FOR = function() {
    return this.getToken(GrammarParser.FOR, 0);
};

ForErrorContext.prototype.LPAREN = function() {
    return this.getToken(GrammarParser.LPAREN, 0);
};

ForErrorContext.prototype.forControl = function() {
    return this.getTypedRuleContext(ForControlContext,0);
};

ForErrorContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

ForErrorContext.prototype.RPAREN = function() {
    return this.getToken(GrammarParser.RPAREN, 0);
};

ForErrorContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterForError(this);
	}
};

ForErrorContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitForError(this);
	}
};

ForErrorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitForError(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ForErrorContext = ForErrorContext;

GrammarParser.prototype.forError = function() {

    var localctx = new ForErrorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, GrammarParser.RULE_forError);
    try {
        this.state = 708;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 698;
            this.match(GrammarParser.FOR);
            this.state = 699;
            this.match(GrammarParser.LPAREN);
            this.state = 700;
            this.forControl();
            this.state = 701;
            this.statement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 703;
            this.match(GrammarParser.FOR);
            this.state = 704;
            this.forControl();
            this.state = 705;
            this.match(GrammarParser.RPAREN);
            this.state = 706;
            this.statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CatchClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_catchClause;
    return this;
}

CatchClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CatchClauseContext.prototype.constructor = CatchClauseContext;

CatchClauseContext.prototype.CATCH = function() {
    return this.getToken(GrammarParser.CATCH, 0);
};

CatchClauseContext.prototype.LPAREN = function() {
    return this.getToken(GrammarParser.LPAREN, 0);
};

CatchClauseContext.prototype.catchType = function() {
    return this.getTypedRuleContext(CatchTypeContext,0);
};

CatchClauseContext.prototype.IDENTIFIER = function() {
    return this.getToken(GrammarParser.IDENTIFIER, 0);
};

CatchClauseContext.prototype.RPAREN = function() {
    return this.getToken(GrammarParser.RPAREN, 0);
};

CatchClauseContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

CatchClauseContext.prototype.variableModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableModifierContext);
    } else {
        return this.getTypedRuleContext(VariableModifierContext,i);
    }
};

CatchClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterCatchClause(this);
	}
};

CatchClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitCatchClause(this);
	}
};

CatchClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitCatchClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.CatchClauseContext = CatchClauseContext;

GrammarParser.prototype.catchClause = function() {

    var localctx = new CatchClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, GrammarParser.RULE_catchClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 710;
        this.match(GrammarParser.CATCH);
        this.state = 711;
        this.match(GrammarParser.LPAREN);
        this.state = 715;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GrammarParser.FINAL || _la===GrammarParser.AT) {
            this.state = 712;
            this.variableModifier();
            this.state = 717;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 718;
        this.catchType();
        this.state = 719;
        this.match(GrammarParser.IDENTIFIER);
        this.state = 720;
        this.match(GrammarParser.RPAREN);
        this.state = 721;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CatchTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_catchType;
    return this;
}

CatchTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CatchTypeContext.prototype.constructor = CatchTypeContext;

CatchTypeContext.prototype.qualifiedName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QualifiedNameContext);
    } else {
        return this.getTypedRuleContext(QualifiedNameContext,i);
    }
};

CatchTypeContext.prototype.BITOR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.BITOR);
    } else {
        return this.getToken(GrammarParser.BITOR, i);
    }
};


CatchTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterCatchType(this);
	}
};

CatchTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitCatchType(this);
	}
};

CatchTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitCatchType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.CatchTypeContext = CatchTypeContext;

GrammarParser.prototype.catchType = function() {

    var localctx = new CatchTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, GrammarParser.RULE_catchType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 723;
        this.qualifiedName();
        this.state = 728;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GrammarParser.BITOR) {
            this.state = 724;
            this.match(GrammarParser.BITOR);
            this.state = 725;
            this.qualifiedName();
            this.state = 730;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FinallyBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_finallyBlock;
    return this;
}

FinallyBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FinallyBlockContext.prototype.constructor = FinallyBlockContext;

FinallyBlockContext.prototype.FINALLY = function() {
    return this.getToken(GrammarParser.FINALLY, 0);
};

FinallyBlockContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

FinallyBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterFinallyBlock(this);
	}
};

FinallyBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitFinallyBlock(this);
	}
};

FinallyBlockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitFinallyBlock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.FinallyBlockContext = FinallyBlockContext;

GrammarParser.prototype.finallyBlock = function() {

    var localctx = new FinallyBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, GrammarParser.RULE_finallyBlock);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 731;
        this.match(GrammarParser.FINALLY);
        this.state = 732;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ResourceSpecificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_resourceSpecification;
    return this;
}

ResourceSpecificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResourceSpecificationContext.prototype.constructor = ResourceSpecificationContext;

ResourceSpecificationContext.prototype.LPAREN = function() {
    return this.getToken(GrammarParser.LPAREN, 0);
};

ResourceSpecificationContext.prototype.resources = function() {
    return this.getTypedRuleContext(ResourcesContext,0);
};

ResourceSpecificationContext.prototype.RPAREN = function() {
    return this.getToken(GrammarParser.RPAREN, 0);
};

ResourceSpecificationContext.prototype.SEMI = function() {
    return this.getToken(GrammarParser.SEMI, 0);
};

ResourceSpecificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterResourceSpecification(this);
	}
};

ResourceSpecificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitResourceSpecification(this);
	}
};

ResourceSpecificationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitResourceSpecification(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ResourceSpecificationContext = ResourceSpecificationContext;

GrammarParser.prototype.resourceSpecification = function() {

    var localctx = new ResourceSpecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, GrammarParser.RULE_resourceSpecification);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 734;
        this.match(GrammarParser.LPAREN);
        this.state = 735;
        this.resources();
        this.state = 737;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===GrammarParser.SEMI) {
            this.state = 736;
            this.match(GrammarParser.SEMI);
        }

        this.state = 739;
        this.match(GrammarParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ResourcesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_resources;
    return this;
}

ResourcesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResourcesContext.prototype.constructor = ResourcesContext;

ResourcesContext.prototype.resource = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ResourceContext);
    } else {
        return this.getTypedRuleContext(ResourceContext,i);
    }
};

ResourcesContext.prototype.SEMI = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.SEMI);
    } else {
        return this.getToken(GrammarParser.SEMI, i);
    }
};


ResourcesContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterResources(this);
	}
};

ResourcesContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitResources(this);
	}
};

ResourcesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitResources(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ResourcesContext = ResourcesContext;

GrammarParser.prototype.resources = function() {

    var localctx = new ResourcesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, GrammarParser.RULE_resources);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 741;
        this.resource();
        this.state = 746;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,77,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 742;
                this.match(GrammarParser.SEMI);
                this.state = 743;
                this.resource(); 
            }
            this.state = 748;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,77,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ResourceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_resource;
    return this;
}

ResourceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResourceContext.prototype.constructor = ResourceContext;

ResourceContext.prototype.classOrInterfaceType = function() {
    return this.getTypedRuleContext(ClassOrInterfaceTypeContext,0);
};

ResourceContext.prototype.variableDeclaratorId = function() {
    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
};

ResourceContext.prototype.ASSIGN = function() {
    return this.getToken(GrammarParser.ASSIGN, 0);
};

ResourceContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ResourceContext.prototype.variableModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableModifierContext);
    } else {
        return this.getTypedRuleContext(VariableModifierContext,i);
    }
};

ResourceContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterResource(this);
	}
};

ResourceContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitResource(this);
	}
};

ResourceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitResource(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ResourceContext = ResourceContext;

GrammarParser.prototype.resource = function() {

    var localctx = new ResourceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, GrammarParser.RULE_resource);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 752;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GrammarParser.FINAL || _la===GrammarParser.AT) {
            this.state = 749;
            this.variableModifier();
            this.state = 754;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 755;
        this.classOrInterfaceType();
        this.state = 756;
        this.variableDeclaratorId();
        this.state = 757;
        this.match(GrammarParser.ASSIGN);
        this.state = 758;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SwitchBlockStatementGroupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_switchBlockStatementGroup;
    return this;
}

SwitchBlockStatementGroupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SwitchBlockStatementGroupContext.prototype.constructor = SwitchBlockStatementGroupContext;

SwitchBlockStatementGroupContext.prototype.switchLabel = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SwitchLabelContext);
    } else {
        return this.getTypedRuleContext(SwitchLabelContext,i);
    }
};

SwitchBlockStatementGroupContext.prototype.blockStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlockStatementContext);
    } else {
        return this.getTypedRuleContext(BlockStatementContext,i);
    }
};

SwitchBlockStatementGroupContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterSwitchBlockStatementGroup(this);
	}
};

SwitchBlockStatementGroupContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitSwitchBlockStatementGroup(this);
	}
};

SwitchBlockStatementGroupContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitSwitchBlockStatementGroup(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.SwitchBlockStatementGroupContext = SwitchBlockStatementGroupContext;

GrammarParser.prototype.switchBlockStatementGroup = function() {

    var localctx = new SwitchBlockStatementGroupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, GrammarParser.RULE_switchBlockStatementGroup);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 761; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 760;
            this.switchLabel();
            this.state = 763; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===GrammarParser.CASE || _la===GrammarParser.DEFAULT);
        this.state = 766; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 765;
            this.blockStatement();
            this.state = 768; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GrammarParser.BOOLEAN) | (1 << GrammarParser.BREAK) | (1 << GrammarParser.BYTE) | (1 << GrammarParser.CHAR) | (1 << GrammarParser.CONTINUE) | (1 << GrammarParser.DO) | (1 << GrammarParser.DOUBLE) | (1 << GrammarParser.FINAL) | (1 << GrammarParser.FLOAT) | (1 << GrammarParser.FOR) | (1 << GrammarParser.IF) | (1 << GrammarParser.INT) | (1 << GrammarParser.LONG) | (1 << GrammarParser.RETURN) | (1 << GrammarParser.SHORT) | (1 << GrammarParser.SWITCH) | (1 << GrammarParser.SYNCHRONIZED) | (1 << GrammarParser.THROW) | (1 << GrammarParser.TRY))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (GrammarParser.VOID - 32)) | (1 << (GrammarParser.WHILE - 32)) | (1 << (GrammarParser.PRINT - 32)) | (1 << (GrammarParser.SCAN - 32)) | (1 << (GrammarParser.DECIMAL_LITERAL - 32)) | (1 << (GrammarParser.HEX_LITERAL - 32)) | (1 << (GrammarParser.OCT_LITERAL - 32)) | (1 << (GrammarParser.BINARY_LITERAL - 32)) | (1 << (GrammarParser.FLOAT_LITERAL - 32)) | (1 << (GrammarParser.HEX_FLOAT_LITERAL - 32)) | (1 << (GrammarParser.BOOL_LITERAL - 32)) | (1 << (GrammarParser.CHAR_LITERAL - 32)) | (1 << (GrammarParser.STRING_LITERAL - 32)) | (1 << (GrammarParser.NULL_LITERAL - 32)) | (1 << (GrammarParser.LPAREN - 32)) | (1 << (GrammarParser.LBRACE - 32)) | (1 << (GrammarParser.SEMI - 32)) | (1 << (GrammarParser.BANG - 32)) | (1 << (GrammarParser.TILDE - 32)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (GrammarParser.INC - 69)) | (1 << (GrammarParser.DEC - 69)) | (1 << (GrammarParser.ADD - 69)) | (1 << (GrammarParser.SUB - 69)) | (1 << (GrammarParser.COLONCOLON - 69)) | (1 << (GrammarParser.AT - 69)) | (1 << (GrammarParser.IDENTIFIER - 69)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SwitchLabelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_switchLabel;
    this.constantExpression = null; // ExpressionContext
    this.enumConstantName = null; // Token
    return this;
}

SwitchLabelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SwitchLabelContext.prototype.constructor = SwitchLabelContext;

SwitchLabelContext.prototype.CASE = function() {
    return this.getToken(GrammarParser.CASE, 0);
};

SwitchLabelContext.prototype.COLON = function() {
    return this.getToken(GrammarParser.COLON, 0);
};

SwitchLabelContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SwitchLabelContext.prototype.IDENTIFIER = function() {
    return this.getToken(GrammarParser.IDENTIFIER, 0);
};

SwitchLabelContext.prototype.DEFAULT = function() {
    return this.getToken(GrammarParser.DEFAULT, 0);
};

SwitchLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterSwitchLabel(this);
	}
};

SwitchLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitSwitchLabel(this);
	}
};

SwitchLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitSwitchLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.SwitchLabelContext = SwitchLabelContext;

GrammarParser.prototype.switchLabel = function() {

    var localctx = new SwitchLabelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, GrammarParser.RULE_switchLabel);
    try {
        this.state = 778;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GrammarParser.CASE:
            this.enterOuterAlt(localctx, 1);
            this.state = 770;
            this.match(GrammarParser.CASE);
            this.state = 773;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
            switch(la_) {
            case 1:
                this.state = 771;
                localctx.constantExpression = this.expression(0);
                break;

            case 2:
                this.state = 772;
                localctx.enumConstantName = this.match(GrammarParser.IDENTIFIER);
                break;

            }
            this.state = 775;
            this.match(GrammarParser.COLON);
            break;
        case GrammarParser.DEFAULT:
            this.enterOuterAlt(localctx, 2);
            this.state = 776;
            this.match(GrammarParser.DEFAULT);
            this.state = 777;
            this.match(GrammarParser.COLON);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ForControlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_forControl;
    this.forUpdate = null; // ExpressionListContext
    return this;
}

ForControlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForControlContext.prototype.constructor = ForControlContext;

ForControlContext.prototype.enhancedForControl = function() {
    return this.getTypedRuleContext(EnhancedForControlContext,0);
};

ForControlContext.prototype.SEMI = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.SEMI);
    } else {
        return this.getToken(GrammarParser.SEMI, i);
    }
};


ForControlContext.prototype.forInit = function() {
    return this.getTypedRuleContext(ForInitContext,0);
};

ForControlContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ForControlContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ForControlContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterForControl(this);
	}
};

ForControlContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitForControl(this);
	}
};

ForControlContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitForControl(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ForControlContext = ForControlContext;

GrammarParser.prototype.forControl = function() {

    var localctx = new ForControlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, GrammarParser.RULE_forControl);
    var _la = 0; // Token type
    try {
        this.state = 792;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 780;
            this.enhancedForControl();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 782;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GrammarParser.BOOLEAN) | (1 << GrammarParser.BYTE) | (1 << GrammarParser.CHAR) | (1 << GrammarParser.DOUBLE) | (1 << GrammarParser.FLOAT) | (1 << GrammarParser.INT) | (1 << GrammarParser.LONG) | (1 << GrammarParser.SHORT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (GrammarParser.VOID - 32)) | (1 << (GrammarParser.DECIMAL_LITERAL - 32)) | (1 << (GrammarParser.HEX_LITERAL - 32)) | (1 << (GrammarParser.OCT_LITERAL - 32)) | (1 << (GrammarParser.BINARY_LITERAL - 32)) | (1 << (GrammarParser.FLOAT_LITERAL - 32)) | (1 << (GrammarParser.HEX_FLOAT_LITERAL - 32)) | (1 << (GrammarParser.BOOL_LITERAL - 32)) | (1 << (GrammarParser.CHAR_LITERAL - 32)) | (1 << (GrammarParser.STRING_LITERAL - 32)) | (1 << (GrammarParser.NULL_LITERAL - 32)) | (1 << (GrammarParser.LPAREN - 32)) | (1 << (GrammarParser.BANG - 32)) | (1 << (GrammarParser.TILDE - 32)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (GrammarParser.INC - 69)) | (1 << (GrammarParser.DEC - 69)) | (1 << (GrammarParser.ADD - 69)) | (1 << (GrammarParser.SUB - 69)) | (1 << (GrammarParser.COLONCOLON - 69)) | (1 << (GrammarParser.IDENTIFIER - 69)))) !== 0)) {
                this.state = 781;
                this.forInit();
            }

            this.state = 784;
            this.match(GrammarParser.SEMI);
            this.state = 786;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GrammarParser.BOOLEAN) | (1 << GrammarParser.BYTE) | (1 << GrammarParser.CHAR) | (1 << GrammarParser.DOUBLE) | (1 << GrammarParser.FLOAT) | (1 << GrammarParser.INT) | (1 << GrammarParser.LONG) | (1 << GrammarParser.SHORT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (GrammarParser.VOID - 32)) | (1 << (GrammarParser.DECIMAL_LITERAL - 32)) | (1 << (GrammarParser.HEX_LITERAL - 32)) | (1 << (GrammarParser.OCT_LITERAL - 32)) | (1 << (GrammarParser.BINARY_LITERAL - 32)) | (1 << (GrammarParser.FLOAT_LITERAL - 32)) | (1 << (GrammarParser.HEX_FLOAT_LITERAL - 32)) | (1 << (GrammarParser.BOOL_LITERAL - 32)) | (1 << (GrammarParser.CHAR_LITERAL - 32)) | (1 << (GrammarParser.STRING_LITERAL - 32)) | (1 << (GrammarParser.NULL_LITERAL - 32)) | (1 << (GrammarParser.LPAREN - 32)) | (1 << (GrammarParser.BANG - 32)) | (1 << (GrammarParser.TILDE - 32)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (GrammarParser.INC - 69)) | (1 << (GrammarParser.DEC - 69)) | (1 << (GrammarParser.ADD - 69)) | (1 << (GrammarParser.SUB - 69)) | (1 << (GrammarParser.COLONCOLON - 69)) | (1 << (GrammarParser.IDENTIFIER - 69)))) !== 0)) {
                this.state = 785;
                this.expression(0);
            }

            this.state = 788;
            this.match(GrammarParser.SEMI);
            this.state = 790;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
            if(la_===1) {
                this.state = 789;
                localctx.forUpdate = this.expressionList();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ForInitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_forInit;
    return this;
}

ForInitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForInitContext.prototype.constructor = ForInitContext;

ForInitContext.prototype.localVariableDeclaration = function() {
    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
};

ForInitContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ForInitContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterForInit(this);
	}
};

ForInitContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitForInit(this);
	}
};

ForInitContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitForInit(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ForInitContext = ForInitContext;

GrammarParser.prototype.forInit = function() {

    var localctx = new ForInitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, GrammarParser.RULE_forInit);
    try {
        this.state = 796;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 794;
            this.localVariableDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 795;
            this.expressionList();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnhancedForControlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_enhancedForControl;
    return this;
}

EnhancedForControlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnhancedForControlContext.prototype.constructor = EnhancedForControlContext;

EnhancedForControlContext.prototype.typeType = function() {
    return this.getTypedRuleContext(TypeTypeContext,0);
};

EnhancedForControlContext.prototype.variableDeclaratorId = function() {
    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
};

EnhancedForControlContext.prototype.COLON = function() {
    return this.getToken(GrammarParser.COLON, 0);
};

EnhancedForControlContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

EnhancedForControlContext.prototype.variableModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableModifierContext);
    } else {
        return this.getTypedRuleContext(VariableModifierContext,i);
    }
};

EnhancedForControlContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterEnhancedForControl(this);
	}
};

EnhancedForControlContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitEnhancedForControl(this);
	}
};

EnhancedForControlContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitEnhancedForControl(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.EnhancedForControlContext = EnhancedForControlContext;

GrammarParser.prototype.enhancedForControl = function() {

    var localctx = new EnhancedForControlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, GrammarParser.RULE_enhancedForControl);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 801;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GrammarParser.FINAL || _la===GrammarParser.AT) {
            this.state = 798;
            this.variableModifier();
            this.state = 803;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 804;
        this.typeType();
        this.state = 805;
        this.variableDeclaratorId();
        this.state = 806;
        this.match(GrammarParser.COLON);
        this.state = 807;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_parExpression;
    return this;
}

ParExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParExpressionContext.prototype.constructor = ParExpressionContext;

ParExpressionContext.prototype.LPAREN = function() {
    return this.getToken(GrammarParser.LPAREN, 0);
};

ParExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ParExpressionContext.prototype.RPAREN = function() {
    return this.getToken(GrammarParser.RPAREN, 0);
};

ParExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterParExpression(this);
	}
};

ParExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitParExpression(this);
	}
};

ParExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitParExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ParExpressionContext = ParExpressionContext;

GrammarParser.prototype.parExpression = function() {

    var localctx = new ParExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, GrammarParser.RULE_parExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 809;
        this.match(GrammarParser.LPAREN);
        this.state = 810;
        this.expression(0);
        this.state = 811;
        this.match(GrammarParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExcessLParenExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_excessLParenExpression;
    return this;
}

ExcessLParenExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExcessLParenExpressionContext.prototype.constructor = ExcessLParenExpressionContext;

ExcessLParenExpressionContext.prototype.LPAREN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.LPAREN);
    } else {
        return this.getToken(GrammarParser.LPAREN, i);
    }
};


ExcessLParenExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ExcessLParenExpressionContext.prototype.RPAREN = function() {
    return this.getToken(GrammarParser.RPAREN, 0);
};

ExcessLParenExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterExcessLParenExpression(this);
	}
};

ExcessLParenExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitExcessLParenExpression(this);
	}
};

ExcessLParenExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitExcessLParenExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ExcessLParenExpressionContext = ExcessLParenExpressionContext;

GrammarParser.prototype.excessLParenExpression = function() {

    var localctx = new ExcessLParenExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, GrammarParser.RULE_excessLParenExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 813;
        this.match(GrammarParser.LPAREN);
        this.state = 814;
        this.match(GrammarParser.LPAREN);
        this.state = 815;
        this.expression(0);
        this.state = 816;
        this.match(GrammarParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExcessRParenExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_excessRParenExpression;
    return this;
}

ExcessRParenExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExcessRParenExpressionContext.prototype.constructor = ExcessRParenExpressionContext;

ExcessRParenExpressionContext.prototype.LPAREN = function() {
    return this.getToken(GrammarParser.LPAREN, 0);
};

ExcessRParenExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ExcessRParenExpressionContext.prototype.RPAREN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.RPAREN);
    } else {
        return this.getToken(GrammarParser.RPAREN, i);
    }
};


ExcessRParenExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterExcessRParenExpression(this);
	}
};

ExcessRParenExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitExcessRParenExpression(this);
	}
};

ExcessRParenExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitExcessRParenExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ExcessRParenExpressionContext = ExcessRParenExpressionContext;

GrammarParser.prototype.excessRParenExpression = function() {

    var localctx = new ExcessRParenExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, GrammarParser.RULE_excessRParenExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 818;
        this.match(GrammarParser.LPAREN);
        this.state = 819;
        this.expression(0);
        this.state = 820;
        this.match(GrammarParser.RPAREN);
        this.state = 821;
        this.match(GrammarParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_expressionList;
    return this;
}

ExpressionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionListContext.prototype.constructor = ExpressionListContext;

ExpressionListContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.COMMA);
    } else {
        return this.getToken(GrammarParser.COMMA, i);
    }
};


ExpressionListContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterExpressionList(this);
	}
};

ExpressionListContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitExpressionList(this);
	}
};

ExpressionListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitExpressionList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ExpressionListContext = ExpressionListContext;

GrammarParser.prototype.expressionList = function() {

    var localctx = new ExpressionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, GrammarParser.RULE_expressionList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 823;
        this.expression(0);
        this.state = 828;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GrammarParser.COMMA) {
            this.state = 824;
            this.match(GrammarParser.COMMA);
            this.state = 825;
            this.expression(0);
            this.state = 830;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MethodCallContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_methodCall;
    return this;
}

MethodCallContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodCallContext.prototype.constructor = MethodCallContext;

MethodCallContext.prototype.IDENTIFIER = function() {
    return this.getToken(GrammarParser.IDENTIFIER, 0);
};

MethodCallContext.prototype.LPAREN = function() {
    return this.getToken(GrammarParser.LPAREN, 0);
};

MethodCallContext.prototype.RPAREN = function() {
    return this.getToken(GrammarParser.RPAREN, 0);
};

MethodCallContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

MethodCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterMethodCall(this);
	}
};

MethodCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitMethodCall(this);
	}
};

MethodCallContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitMethodCall(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.MethodCallContext = MethodCallContext;

GrammarParser.prototype.methodCall = function() {

    var localctx = new MethodCallContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, GrammarParser.RULE_methodCall);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 831;
        this.match(GrammarParser.IDENTIFIER);
        this.state = 832;
        this.match(GrammarParser.LPAREN);
        this.state = 834;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GrammarParser.BOOLEAN) | (1 << GrammarParser.BYTE) | (1 << GrammarParser.CHAR) | (1 << GrammarParser.DOUBLE) | (1 << GrammarParser.FLOAT) | (1 << GrammarParser.INT) | (1 << GrammarParser.LONG) | (1 << GrammarParser.SHORT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (GrammarParser.VOID - 32)) | (1 << (GrammarParser.DECIMAL_LITERAL - 32)) | (1 << (GrammarParser.HEX_LITERAL - 32)) | (1 << (GrammarParser.OCT_LITERAL - 32)) | (1 << (GrammarParser.BINARY_LITERAL - 32)) | (1 << (GrammarParser.FLOAT_LITERAL - 32)) | (1 << (GrammarParser.HEX_FLOAT_LITERAL - 32)) | (1 << (GrammarParser.BOOL_LITERAL - 32)) | (1 << (GrammarParser.CHAR_LITERAL - 32)) | (1 << (GrammarParser.STRING_LITERAL - 32)) | (1 << (GrammarParser.NULL_LITERAL - 32)) | (1 << (GrammarParser.LPAREN - 32)) | (1 << (GrammarParser.BANG - 32)) | (1 << (GrammarParser.TILDE - 32)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (GrammarParser.INC - 69)) | (1 << (GrammarParser.DEC - 69)) | (1 << (GrammarParser.ADD - 69)) | (1 << (GrammarParser.SUB - 69)) | (1 << (GrammarParser.COLONCOLON - 69)) | (1 << (GrammarParser.IDENTIFIER - 69)))) !== 0)) {
            this.state = 833;
            this.expressionList();
        }

        this.state = 836;
        this.match(GrammarParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_expression;
    this.prefix = null; // Token
    this.postfix = null; // Token
    this.bop = null; // Token
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.primary = function() {
    return this.getTypedRuleContext(PrimaryContext,0);
};

ExpressionContext.prototype.primaryError = function() {
    return this.getTypedRuleContext(PrimaryErrorContext,0);
};

ExpressionContext.prototype.methodCall = function() {
    return this.getTypedRuleContext(MethodCallContext,0);
};

ExpressionContext.prototype.LPAREN = function() {
    return this.getToken(GrammarParser.LPAREN, 0);
};

ExpressionContext.prototype.typeType = function() {
    return this.getTypedRuleContext(TypeTypeContext,0);
};

ExpressionContext.prototype.RPAREN = function() {
    return this.getToken(GrammarParser.RPAREN, 0);
};

ExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionContext.prototype.ADD = function() {
    return this.getToken(GrammarParser.ADD, 0);
};

ExpressionContext.prototype.SUB = function() {
    return this.getToken(GrammarParser.SUB, 0);
};

ExpressionContext.prototype.INC = function() {
    return this.getToken(GrammarParser.INC, 0);
};

ExpressionContext.prototype.DEC = function() {
    return this.getToken(GrammarParser.DEC, 0);
};

ExpressionContext.prototype.TILDE = function() {
    return this.getToken(GrammarParser.TILDE, 0);
};

ExpressionContext.prototype.BANG = function() {
    return this.getToken(GrammarParser.BANG, 0);
};

ExpressionContext.prototype.IDENTIFIER = function() {
    return this.getToken(GrammarParser.IDENTIFIER, 0);
};

ExpressionContext.prototype.expressionError = function() {
    return this.getTypedRuleContext(ExpressionErrorContext,0);
};

ExpressionContext.prototype.expressionAdditionError = function() {
    return this.getTypedRuleContext(ExpressionAdditionErrorContext,0);
};

ExpressionContext.prototype.expressionSubtractionError = function() {
    return this.getTypedRuleContext(ExpressionSubtractionErrorContext,0);
};

ExpressionContext.prototype.COLONCOLON = function() {
    return this.getToken(GrammarParser.COLONCOLON, 0);
};

ExpressionContext.prototype.typeArguments = function() {
    return this.getTypedRuleContext(TypeArgumentsContext,0);
};

ExpressionContext.prototype.MUL = function() {
    return this.getToken(GrammarParser.MUL, 0);
};

ExpressionContext.prototype.DIV = function() {
    return this.getToken(GrammarParser.DIV, 0);
};

ExpressionContext.prototype.MOD = function() {
    return this.getToken(GrammarParser.MOD, 0);
};

ExpressionContext.prototype.LT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.LT);
    } else {
        return this.getToken(GrammarParser.LT, i);
    }
};


ExpressionContext.prototype.GT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.GT);
    } else {
        return this.getToken(GrammarParser.GT, i);
    }
};


ExpressionContext.prototype.LE = function() {
    return this.getToken(GrammarParser.LE, 0);
};

ExpressionContext.prototype.GE = function() {
    return this.getToken(GrammarParser.GE, 0);
};

ExpressionContext.prototype.EQUAL = function() {
    return this.getToken(GrammarParser.EQUAL, 0);
};

ExpressionContext.prototype.NOTEQUAL = function() {
    return this.getToken(GrammarParser.NOTEQUAL, 0);
};

ExpressionContext.prototype.BITAND = function() {
    return this.getToken(GrammarParser.BITAND, 0);
};

ExpressionContext.prototype.CARET = function() {
    return this.getToken(GrammarParser.CARET, 0);
};

ExpressionContext.prototype.BITOR = function() {
    return this.getToken(GrammarParser.BITOR, 0);
};

ExpressionContext.prototype.AND = function() {
    return this.getToken(GrammarParser.AND, 0);
};

ExpressionContext.prototype.OR = function() {
    return this.getToken(GrammarParser.OR, 0);
};

ExpressionContext.prototype.COLON = function() {
    return this.getToken(GrammarParser.COLON, 0);
};

ExpressionContext.prototype.QUESTION = function() {
    return this.getToken(GrammarParser.QUESTION, 0);
};

ExpressionContext.prototype.ASSIGN = function() {
    return this.getToken(GrammarParser.ASSIGN, 0);
};

ExpressionContext.prototype.ADD_ASSIGN = function() {
    return this.getToken(GrammarParser.ADD_ASSIGN, 0);
};

ExpressionContext.prototype.SUB_ASSIGN = function() {
    return this.getToken(GrammarParser.SUB_ASSIGN, 0);
};

ExpressionContext.prototype.MUL_ASSIGN = function() {
    return this.getToken(GrammarParser.MUL_ASSIGN, 0);
};

ExpressionContext.prototype.DIV_ASSIGN = function() {
    return this.getToken(GrammarParser.DIV_ASSIGN, 0);
};

ExpressionContext.prototype.AND_ASSIGN = function() {
    return this.getToken(GrammarParser.AND_ASSIGN, 0);
};

ExpressionContext.prototype.OR_ASSIGN = function() {
    return this.getToken(GrammarParser.OR_ASSIGN, 0);
};

ExpressionContext.prototype.XOR_ASSIGN = function() {
    return this.getToken(GrammarParser.XOR_ASSIGN, 0);
};

ExpressionContext.prototype.RSHIFT_ASSIGN = function() {
    return this.getToken(GrammarParser.RSHIFT_ASSIGN, 0);
};

ExpressionContext.prototype.URSHIFT_ASSIGN = function() {
    return this.getToken(GrammarParser.URSHIFT_ASSIGN, 0);
};

ExpressionContext.prototype.LSHIFT_ASSIGN = function() {
    return this.getToken(GrammarParser.LSHIFT_ASSIGN, 0);
};

ExpressionContext.prototype.MOD_ASSIGN = function() {
    return this.getToken(GrammarParser.MOD_ASSIGN, 0);
};

ExpressionContext.prototype.DOT = function() {
    return this.getToken(GrammarParser.DOT, 0);
};

ExpressionContext.prototype.LBRACK = function() {
    return this.getToken(GrammarParser.LBRACK, 0);
};

ExpressionContext.prototype.RBRACK = function() {
    return this.getToken(GrammarParser.RBRACK, 0);
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitExpression(this);
	}
};

ExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



GrammarParser.prototype.expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 132;
    this.enterRecursionRule(localctx, 132, GrammarParser.RULE_expression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 867;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
        switch(la_) {
        case 1:
            this.state = 839;
            this.primary();
            break;

        case 2:
            this.state = 840;
            this.primaryError();
            break;

        case 3:
            this.state = 841;
            this.methodCall();
            break;

        case 4:
            this.state = 842;
            this.match(GrammarParser.LPAREN);
            this.state = 843;
            this.typeType();
            this.state = 844;
            this.match(GrammarParser.RPAREN);
            this.state = 845;
            this.expression(22);
            break;

        case 5:
            this.state = 847;
            localctx.prefix = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (GrammarParser.INC - 69)) | (1 << (GrammarParser.DEC - 69)) | (1 << (GrammarParser.ADD - 69)) | (1 << (GrammarParser.SUB - 69)))) !== 0))) {
                localctx.prefix = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 848;
            this.expression(21);
            break;

        case 6:
            this.state = 849;
            localctx.prefix = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===GrammarParser.BANG || _la===GrammarParser.TILDE)) {
                localctx.prefix = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 850;
            this.expression(20);
            break;

        case 7:
            this.state = 851;
            this.match(GrammarParser.IDENTIFIER);
            this.state = 852;
            localctx.postfix = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===GrammarParser.INC || _la===GrammarParser.DEC)) {
                localctx.postfix = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 8:
            this.state = 853;
            this.expressionError();
            break;

        case 9:
            this.state = 854;
            this.expressionAdditionError();
            break;

        case 10:
            this.state = 855;
            this.expressionSubtractionError();
            break;

        case 11:
            this.state = 856;
            this.typeType();
            this.state = 857;
            this.match(GrammarParser.COLONCOLON);

            this.state = 859;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===GrammarParser.LT) {
                this.state = 858;
                this.typeArguments();
            }

            this.state = 861;
            this.match(GrammarParser.IDENTIFIER);
            break;

        case 12:
            this.state = 863;
            this.match(GrammarParser.COLONCOLON);
            this.state = 865;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
            if(la_===1) {
                this.state = 864;
                this.typeArguments();

            }
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 935;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,98,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 933;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,97,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, GrammarParser.RULE_expression);
                    this.state = 869;
                    if (!( this.precpred(this._ctx, 15))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
                    }
                    this.state = 870;
                    localctx.bop = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (GrammarParser.MUL - 73)) | (1 << (GrammarParser.DIV - 73)) | (1 << (GrammarParser.MOD - 73)))) !== 0))) {
                        localctx.bop = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 871;
                    this.expression(16);
                    break;

                case 2:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, GrammarParser.RULE_expression);
                    this.state = 872;
                    if (!( this.precpred(this._ctx, 14))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
                    }
                    this.state = 873;
                    localctx.bop = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===GrammarParser.ADD || _la===GrammarParser.SUB)) {
                        localctx.bop = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 874;
                    this.expression(15);
                    break;

                case 3:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, GrammarParser.RULE_expression);
                    this.state = 875;
                    if (!( this.precpred(this._ctx, 13))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                    }
                    this.state = 883;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 876;
                        this.match(GrammarParser.LT);
                        this.state = 877;
                        this.match(GrammarParser.LT);
                        break;

                    case 2:
                        this.state = 878;
                        this.match(GrammarParser.GT);
                        this.state = 879;
                        this.match(GrammarParser.GT);
                        this.state = 880;
                        this.match(GrammarParser.GT);
                        break;

                    case 3:
                        this.state = 881;
                        this.match(GrammarParser.GT);
                        this.state = 882;
                        this.match(GrammarParser.GT);
                        break;

                    }
                    this.state = 885;
                    this.expression(14);
                    break;

                case 4:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, GrammarParser.RULE_expression);
                    this.state = 886;
                    if (!( this.precpred(this._ctx, 12))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                    }
                    this.state = 887;
                    localctx.bop = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (GrammarParser.GT - 57)) | (1 << (GrammarParser.LT - 57)) | (1 << (GrammarParser.LE - 57)) | (1 << (GrammarParser.GE - 57)))) !== 0))) {
                        localctx.bop = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 888;
                    this.expression(13);
                    break;

                case 5:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, GrammarParser.RULE_expression);
                    this.state = 889;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 890;
                    localctx.bop = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===GrammarParser.EQUAL || _la===GrammarParser.NOTEQUAL)) {
                        localctx.bop = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 891;
                    this.expression(12);
                    break;

                case 6:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, GrammarParser.RULE_expression);
                    this.state = 892;
                    if (!( this.precpred(this._ctx, 10))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                    }
                    this.state = 893;
                    localctx.bop = this.match(GrammarParser.BITAND);
                    this.state = 894;
                    this.expression(11);
                    break;

                case 7:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, GrammarParser.RULE_expression);
                    this.state = 895;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 896;
                    localctx.bop = this.match(GrammarParser.CARET);
                    this.state = 897;
                    this.expression(10);
                    break;

                case 8:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, GrammarParser.RULE_expression);
                    this.state = 898;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 899;
                    localctx.bop = this.match(GrammarParser.BITOR);
                    this.state = 900;
                    this.expression(9);
                    break;

                case 9:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, GrammarParser.RULE_expression);
                    this.state = 901;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 902;
                    localctx.bop = this.match(GrammarParser.AND);
                    this.state = 903;
                    this.expression(8);
                    break;

                case 10:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, GrammarParser.RULE_expression);
                    this.state = 904;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 905;
                    localctx.bop = this.match(GrammarParser.OR);
                    this.state = 906;
                    this.expression(7);
                    break;

                case 11:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, GrammarParser.RULE_expression);
                    this.state = 907;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 908;
                    localctx.bop = this.match(GrammarParser.QUESTION);
                    this.state = 909;
                    this.expression(0);
                    this.state = 910;
                    this.match(GrammarParser.COLON);
                    this.state = 911;
                    this.expression(5);
                    break;

                case 12:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, GrammarParser.RULE_expression);
                    this.state = 913;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 914;
                    localctx.bop = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (GrammarParser.ASSIGN - 56)) | (1 << (GrammarParser.ADD_ASSIGN - 56)) | (1 << (GrammarParser.SUB_ASSIGN - 56)) | (1 << (GrammarParser.MUL_ASSIGN - 56)) | (1 << (GrammarParser.DIV_ASSIGN - 56)) | (1 << (GrammarParser.AND_ASSIGN - 56)) | (1 << (GrammarParser.OR_ASSIGN - 56)) | (1 << (GrammarParser.XOR_ASSIGN - 56)) | (1 << (GrammarParser.MOD_ASSIGN - 56)) | (1 << (GrammarParser.LSHIFT_ASSIGN - 56)))) !== 0) || _la===GrammarParser.RSHIFT_ASSIGN || _la===GrammarParser.URSHIFT_ASSIGN)) {
                        localctx.bop = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 915;
                    this.expression(4);
                    break;

                case 13:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, GrammarParser.RULE_expression);
                    this.state = 916;
                    if (!( this.precpred(this._ctx, 25))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
                    }
                    this.state = 917;
                    localctx.bop = this.match(GrammarParser.DOT);
                    this.state = 920;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 918;
                        this.match(GrammarParser.IDENTIFIER);
                        break;

                    case 2:
                        this.state = 919;
                        this.methodCall();
                        break;

                    }
                    break;

                case 14:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, GrammarParser.RULE_expression);
                    this.state = 922;
                    if (!( this.precpred(this._ctx, 24))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
                    }
                    this.state = 923;
                    this.match(GrammarParser.LBRACK);
                    this.state = 924;
                    this.expression(0);
                    this.state = 925;
                    this.match(GrammarParser.RBRACK);
                    break;

                case 15:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, GrammarParser.RULE_expression);
                    this.state = 927;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 928;
                    this.match(GrammarParser.COLONCOLON);
                    this.state = 930;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===GrammarParser.LT) {
                        this.state = 929;
                        this.typeArguments();
                    }

                    this.state = 932;
                    this.match(GrammarParser.IDENTIFIER);
                    break;

                } 
            }
            this.state = 937;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,98,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function PrimaryErrorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_primaryError;
    return this;
}

PrimaryErrorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryErrorContext.prototype.constructor = PrimaryErrorContext;

PrimaryErrorContext.prototype.LPAREN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.LPAREN);
    } else {
        return this.getToken(GrammarParser.LPAREN, i);
    }
};


PrimaryErrorContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PrimaryErrorContext.prototype.RPAREN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.RPAREN);
    } else {
        return this.getToken(GrammarParser.RPAREN, i);
    }
};


PrimaryErrorContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterPrimaryError(this);
	}
};

PrimaryErrorContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitPrimaryError(this);
	}
};

PrimaryErrorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitPrimaryError(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.PrimaryErrorContext = PrimaryErrorContext;

GrammarParser.prototype.primaryError = function() {

    var localctx = new PrimaryErrorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, GrammarParser.RULE_primaryError);
    try {
        this.state = 955;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 938;
            this.match(GrammarParser.LPAREN);
            this.state = 939;
            this.expression(0);
            this.state = 940;
            this.match(GrammarParser.RPAREN);
            this.state = 944;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,99,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 941;
                    this.match(GrammarParser.RPAREN); 
                }
                this.state = 946;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,99,this._ctx);
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 947;
            this.match(GrammarParser.LPAREN);
            this.state = 951;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,100,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 948;
                    this.match(GrammarParser.LPAREN); 
                }
                this.state = 953;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,100,this._ctx);
            }

            this.state = 954;
            this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionErrorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_expressionError;
    this.postfix = null; // Token
    this.prefix = null; // Token
    return this;
}

ExpressionErrorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionErrorContext.prototype.constructor = ExpressionErrorContext;

ExpressionErrorContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

ExpressionErrorContext.prototype.INC = function() {
    return this.getToken(GrammarParser.INC, 0);
};

ExpressionErrorContext.prototype.DEC = function() {
    return this.getToken(GrammarParser.DEC, 0);
};

ExpressionErrorContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ExpressionErrorContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterExpressionError(this);
	}
};

ExpressionErrorContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitExpressionError(this);
	}
};

ExpressionErrorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitExpressionError(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ExpressionErrorContext = ExpressionErrorContext;

GrammarParser.prototype.expressionError = function() {

    var localctx = new ExpressionErrorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, GrammarParser.RULE_expressionError);
    var _la = 0; // Token type
    try {
        this.state = 962;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GrammarParser.DECIMAL_LITERAL:
        case GrammarParser.HEX_LITERAL:
        case GrammarParser.OCT_LITERAL:
        case GrammarParser.BINARY_LITERAL:
        case GrammarParser.FLOAT_LITERAL:
        case GrammarParser.HEX_FLOAT_LITERAL:
        case GrammarParser.BOOL_LITERAL:
        case GrammarParser.CHAR_LITERAL:
        case GrammarParser.STRING_LITERAL:
        case GrammarParser.NULL_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 957;
            this.literal();
            this.state = 958;
            localctx.postfix = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===GrammarParser.INC || _la===GrammarParser.DEC)) {
                localctx.postfix = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case GrammarParser.INC:
        case GrammarParser.DEC:
            this.enterOuterAlt(localctx, 2);
            this.state = 960;
            localctx.prefix = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===GrammarParser.INC || _la===GrammarParser.DEC)) {
                localctx.prefix = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 961;
            this.expression(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionAdditionErrorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_expressionAdditionError;
    this.postfix = null; // Token
    return this;
}

ExpressionAdditionErrorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionAdditionErrorContext.prototype.constructor = ExpressionAdditionErrorContext;

ExpressionAdditionErrorContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

ExpressionAdditionErrorContext.prototype.INC = function() {
    return this.getToken(GrammarParser.INC, 0);
};

ExpressionAdditionErrorContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterExpressionAdditionError(this);
	}
};

ExpressionAdditionErrorContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitExpressionAdditionError(this);
	}
};

ExpressionAdditionErrorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitExpressionAdditionError(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ExpressionAdditionErrorContext = ExpressionAdditionErrorContext;

GrammarParser.prototype.expressionAdditionError = function() {

    var localctx = new ExpressionAdditionErrorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, GrammarParser.RULE_expressionAdditionError);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 964;
        this.literal();
        this.state = 965;
        localctx.postfix = this.match(GrammarParser.INC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionSubtractionErrorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_expressionSubtractionError;
    this.postfix = null; // Token
    return this;
}

ExpressionSubtractionErrorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionSubtractionErrorContext.prototype.constructor = ExpressionSubtractionErrorContext;

ExpressionSubtractionErrorContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

ExpressionSubtractionErrorContext.prototype.DEC = function() {
    return this.getToken(GrammarParser.DEC, 0);
};

ExpressionSubtractionErrorContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterExpressionSubtractionError(this);
	}
};

ExpressionSubtractionErrorContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitExpressionSubtractionError(this);
	}
};

ExpressionSubtractionErrorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitExpressionSubtractionError(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ExpressionSubtractionErrorContext = ExpressionSubtractionErrorContext;

GrammarParser.prototype.expressionSubtractionError = function() {

    var localctx = new ExpressionSubtractionErrorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, GrammarParser.RULE_expressionSubtractionError);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 967;
        this.literal();
        this.state = 968;
        localctx.postfix = this.match(GrammarParser.DEC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrimaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_primary;
    return this;
}

PrimaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryContext.prototype.constructor = PrimaryContext;

PrimaryContext.prototype.LPAREN = function() {
    return this.getToken(GrammarParser.LPAREN, 0);
};

PrimaryContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PrimaryContext.prototype.RPAREN = function() {
    return this.getToken(GrammarParser.RPAREN, 0);
};

PrimaryContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

PrimaryContext.prototype.IDENTIFIER = function() {
    return this.getToken(GrammarParser.IDENTIFIER, 0);
};

PrimaryContext.prototype.typeTypeOrVoid = function() {
    return this.getTypedRuleContext(TypeTypeOrVoidContext,0);
};

PrimaryContext.prototype.DOT = function() {
    return this.getToken(GrammarParser.DOT, 0);
};

PrimaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterPrimary(this);
	}
};

PrimaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitPrimary(this);
	}
};

PrimaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitPrimary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.PrimaryContext = PrimaryContext;

GrammarParser.prototype.primary = function() {

    var localctx = new PrimaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, GrammarParser.RULE_primary);
    try {
        this.state = 979;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GrammarParser.LPAREN:
            this.enterOuterAlt(localctx, 1);
            this.state = 970;
            this.match(GrammarParser.LPAREN);
            this.state = 971;
            this.expression(0);
            this.state = 972;
            this.match(GrammarParser.RPAREN);
            break;
        case GrammarParser.DECIMAL_LITERAL:
        case GrammarParser.HEX_LITERAL:
        case GrammarParser.OCT_LITERAL:
        case GrammarParser.BINARY_LITERAL:
        case GrammarParser.FLOAT_LITERAL:
        case GrammarParser.HEX_FLOAT_LITERAL:
        case GrammarParser.BOOL_LITERAL:
        case GrammarParser.CHAR_LITERAL:
        case GrammarParser.STRING_LITERAL:
        case GrammarParser.NULL_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 974;
            this.literal();
            break;
        case GrammarParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 3);
            this.state = 975;
            this.match(GrammarParser.IDENTIFIER);
            break;
        case GrammarParser.BOOLEAN:
        case GrammarParser.BYTE:
        case GrammarParser.CHAR:
        case GrammarParser.DOUBLE:
        case GrammarParser.FLOAT:
        case GrammarParser.INT:
        case GrammarParser.LONG:
        case GrammarParser.SHORT:
        case GrammarParser.VOID:
            this.enterOuterAlt(localctx, 4);
            this.state = 976;
            this.typeTypeOrVoid();
            this.state = 977;
            this.match(GrammarParser.DOT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArrayCreatorRestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_arrayCreatorRest;
    return this;
}

ArrayCreatorRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayCreatorRestContext.prototype.constructor = ArrayCreatorRestContext;

ArrayCreatorRestContext.prototype.LBRACK = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.LBRACK);
    } else {
        return this.getToken(GrammarParser.LBRACK, i);
    }
};


ArrayCreatorRestContext.prototype.RBRACK = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.RBRACK);
    } else {
        return this.getToken(GrammarParser.RBRACK, i);
    }
};


ArrayCreatorRestContext.prototype.arrayInitializer = function() {
    return this.getTypedRuleContext(ArrayInitializerContext,0);
};

ArrayCreatorRestContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ArrayCreatorRestContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterArrayCreatorRest(this);
	}
};

ArrayCreatorRestContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitArrayCreatorRest(this);
	}
};

ArrayCreatorRestContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitArrayCreatorRest(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ArrayCreatorRestContext = ArrayCreatorRestContext;

GrammarParser.prototype.arrayCreatorRest = function() {

    var localctx = new ArrayCreatorRestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, GrammarParser.RULE_arrayCreatorRest);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 981;
        this.match(GrammarParser.LBRACK);
        this.state = 1009;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GrammarParser.RBRACK:
            this.state = 982;
            this.match(GrammarParser.RBRACK);
            this.state = 987;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===GrammarParser.LBRACK) {
                this.state = 983;
                this.match(GrammarParser.LBRACK);
                this.state = 984;
                this.match(GrammarParser.RBRACK);
                this.state = 989;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 990;
            this.arrayInitializer();
            break;
        case GrammarParser.BOOLEAN:
        case GrammarParser.BYTE:
        case GrammarParser.CHAR:
        case GrammarParser.DOUBLE:
        case GrammarParser.FLOAT:
        case GrammarParser.INT:
        case GrammarParser.LONG:
        case GrammarParser.SHORT:
        case GrammarParser.VOID:
        case GrammarParser.DECIMAL_LITERAL:
        case GrammarParser.HEX_LITERAL:
        case GrammarParser.OCT_LITERAL:
        case GrammarParser.BINARY_LITERAL:
        case GrammarParser.FLOAT_LITERAL:
        case GrammarParser.HEX_FLOAT_LITERAL:
        case GrammarParser.BOOL_LITERAL:
        case GrammarParser.CHAR_LITERAL:
        case GrammarParser.STRING_LITERAL:
        case GrammarParser.NULL_LITERAL:
        case GrammarParser.LPAREN:
        case GrammarParser.BANG:
        case GrammarParser.TILDE:
        case GrammarParser.INC:
        case GrammarParser.DEC:
        case GrammarParser.ADD:
        case GrammarParser.SUB:
        case GrammarParser.COLONCOLON:
        case GrammarParser.IDENTIFIER:
            this.state = 991;
            this.expression(0);
            this.state = 992;
            this.match(GrammarParser.RBRACK);
            this.state = 999;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,105,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 993;
                    this.match(GrammarParser.LBRACK);
                    this.state = 994;
                    this.expression(0);
                    this.state = 995;
                    this.match(GrammarParser.RBRACK); 
                }
                this.state = 1001;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,105,this._ctx);
            }

            this.state = 1006;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===GrammarParser.LBRACK) {
                this.state = 1002;
                this.match(GrammarParser.LBRACK);
                this.state = 1003;
                this.match(GrammarParser.RBRACK);
                this.state = 1008;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_typeList;
    return this;
}

TypeListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeListContext.prototype.constructor = TypeListContext;

TypeListContext.prototype.typeType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeTypeContext);
    } else {
        return this.getTypedRuleContext(TypeTypeContext,i);
    }
};

TypeListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.COMMA);
    } else {
        return this.getToken(GrammarParser.COMMA, i);
    }
};


TypeListContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterTypeList(this);
	}
};

TypeListContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitTypeList(this);
	}
};

TypeListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitTypeList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.TypeListContext = TypeListContext;

GrammarParser.prototype.typeList = function() {

    var localctx = new TypeListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, GrammarParser.RULE_typeList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1011;
        this.typeType();
        this.state = 1016;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GrammarParser.COMMA) {
            this.state = 1012;
            this.match(GrammarParser.COMMA);
            this.state = 1013;
            this.typeType();
            this.state = 1018;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_typeType;
    return this;
}

TypeTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeTypeContext.prototype.constructor = TypeTypeContext;

TypeTypeContext.prototype.primitiveType = function() {
    return this.getTypedRuleContext(PrimitiveTypeContext,0);
};

TypeTypeContext.prototype.LBRACK = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.LBRACK);
    } else {
        return this.getToken(GrammarParser.LBRACK, i);
    }
};


TypeTypeContext.prototype.DECIMAL_LITERAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.DECIMAL_LITERAL);
    } else {
        return this.getToken(GrammarParser.DECIMAL_LITERAL, i);
    }
};


TypeTypeContext.prototype.RBRACK = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.RBRACK);
    } else {
        return this.getToken(GrammarParser.RBRACK, i);
    }
};


TypeTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterTypeType(this);
	}
};

TypeTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitTypeType(this);
	}
};

TypeTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitTypeType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.TypeTypeContext = TypeTypeContext;

GrammarParser.prototype.typeType = function() {

    var localctx = new TypeTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, GrammarParser.RULE_typeType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1019;
        this.primitiveType();
        this.state = 1025;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GrammarParser.LBRACK) {
            this.state = 1020;
            this.match(GrammarParser.LBRACK);
            this.state = 1021;
            this.match(GrammarParser.DECIMAL_LITERAL);
            this.state = 1022;
            this.match(GrammarParser.RBRACK);
            this.state = 1027;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrimitiveTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_primitiveType;
    return this;
}

PrimitiveTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimitiveTypeContext.prototype.constructor = PrimitiveTypeContext;

PrimitiveTypeContext.prototype.BOOLEAN = function() {
    return this.getToken(GrammarParser.BOOLEAN, 0);
};

PrimitiveTypeContext.prototype.CHAR = function() {
    return this.getToken(GrammarParser.CHAR, 0);
};

PrimitiveTypeContext.prototype.BYTE = function() {
    return this.getToken(GrammarParser.BYTE, 0);
};

PrimitiveTypeContext.prototype.SHORT = function() {
    return this.getToken(GrammarParser.SHORT, 0);
};

PrimitiveTypeContext.prototype.INT = function() {
    return this.getToken(GrammarParser.INT, 0);
};

PrimitiveTypeContext.prototype.LONG = function() {
    return this.getToken(GrammarParser.LONG, 0);
};

PrimitiveTypeContext.prototype.FLOAT = function() {
    return this.getToken(GrammarParser.FLOAT, 0);
};

PrimitiveTypeContext.prototype.DOUBLE = function() {
    return this.getToken(GrammarParser.DOUBLE, 0);
};

PrimitiveTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterPrimitiveType(this);
	}
};

PrimitiveTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitPrimitiveType(this);
	}
};

PrimitiveTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitPrimitiveType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.PrimitiveTypeContext = PrimitiveTypeContext;

GrammarParser.prototype.primitiveType = function() {

    var localctx = new PrimitiveTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, GrammarParser.RULE_primitiveType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1028;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GrammarParser.BOOLEAN) | (1 << GrammarParser.BYTE) | (1 << GrammarParser.CHAR) | (1 << GrammarParser.DOUBLE) | (1 << GrammarParser.FLOAT) | (1 << GrammarParser.INT) | (1 << GrammarParser.LONG) | (1 << GrammarParser.SHORT))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_typeArguments;
    return this;
}

TypeArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeArgumentsContext.prototype.constructor = TypeArgumentsContext;

TypeArgumentsContext.prototype.LT = function() {
    return this.getToken(GrammarParser.LT, 0);
};

TypeArgumentsContext.prototype.typeArgument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeArgumentContext);
    } else {
        return this.getTypedRuleContext(TypeArgumentContext,i);
    }
};

TypeArgumentsContext.prototype.GT = function() {
    return this.getToken(GrammarParser.GT, 0);
};

TypeArgumentsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.COMMA);
    } else {
        return this.getToken(GrammarParser.COMMA, i);
    }
};


TypeArgumentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterTypeArguments(this);
	}
};

TypeArgumentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitTypeArguments(this);
	}
};

TypeArgumentsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitTypeArguments(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.TypeArgumentsContext = TypeArgumentsContext;

GrammarParser.prototype.typeArguments = function() {

    var localctx = new TypeArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, GrammarParser.RULE_typeArguments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1030;
        this.match(GrammarParser.LT);
        this.state = 1031;
        this.typeArgument();
        this.state = 1036;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GrammarParser.COMMA) {
            this.state = 1032;
            this.match(GrammarParser.COMMA);
            this.state = 1033;
            this.typeArgument();
            this.state = 1038;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1039;
        this.match(GrammarParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_arguments;
    return this;
}

ArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentsContext.prototype.constructor = ArgumentsContext;

ArgumentsContext.prototype.LPAREN = function() {
    return this.getToken(GrammarParser.LPAREN, 0);
};

ArgumentsContext.prototype.RPAREN = function() {
    return this.getToken(GrammarParser.RPAREN, 0);
};

ArgumentsContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ArgumentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterArguments(this);
	}
};

ArgumentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitArguments(this);
	}
};

ArgumentsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof visitor ) {
        return visitor.visitArguments(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ArgumentsContext = ArgumentsContext;

GrammarParser.prototype.arguments = function() {

    var localctx = new ArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, GrammarParser.RULE_arguments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1041;
        this.match(GrammarParser.LPAREN);
        this.state = 1043;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GrammarParser.BOOLEAN) | (1 << GrammarParser.BYTE) | (1 << GrammarParser.CHAR) | (1 << GrammarParser.DOUBLE) | (1 << GrammarParser.FLOAT) | (1 << GrammarParser.INT) | (1 << GrammarParser.LONG) | (1 << GrammarParser.SHORT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (GrammarParser.VOID - 32)) | (1 << (GrammarParser.DECIMAL_LITERAL - 32)) | (1 << (GrammarParser.HEX_LITERAL - 32)) | (1 << (GrammarParser.OCT_LITERAL - 32)) | (1 << (GrammarParser.BINARY_LITERAL - 32)) | (1 << (GrammarParser.FLOAT_LITERAL - 32)) | (1 << (GrammarParser.HEX_FLOAT_LITERAL - 32)) | (1 << (GrammarParser.BOOL_LITERAL - 32)) | (1 << (GrammarParser.CHAR_LITERAL - 32)) | (1 << (GrammarParser.STRING_LITERAL - 32)) | (1 << (GrammarParser.NULL_LITERAL - 32)) | (1 << (GrammarParser.LPAREN - 32)) | (1 << (GrammarParser.BANG - 32)) | (1 << (GrammarParser.TILDE - 32)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (GrammarParser.INC - 69)) | (1 << (GrammarParser.DEC - 69)) | (1 << (GrammarParser.ADD - 69)) | (1 << (GrammarParser.SUB - 69)) | (1 << (GrammarParser.COLONCOLON - 69)) | (1 << (GrammarParser.IDENTIFIER - 69)))) !== 0)) {
            this.state = 1042;
            this.expressionList();
        }

        this.state = 1045;
        this.match(GrammarParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


GrammarParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 66:
			return this.expression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

GrammarParser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 15);
		case 1:
			return this.precpred(this._ctx, 14);
		case 2:
			return this.precpred(this._ctx, 13);
		case 3:
			return this.precpred(this._ctx, 12);
		case 4:
			return this.precpred(this._ctx, 11);
		case 5:
			return this.precpred(this._ctx, 10);
		case 6:
			return this.precpred(this._ctx, 9);
		case 7:
			return this.precpred(this._ctx, 8);
		case 8:
			return this.precpred(this._ctx, 7);
		case 9:
			return this.precpred(this._ctx, 6);
		case 10:
			return this.precpred(this._ctx, 5);
		case 11:
			return this.precpred(this._ctx, 4);
		case 12:
			return this.precpred(this._ctx, 25);
		case 13:
			return this.precpred(this._ctx, 24);
		case 14:
			return this.precpred(this._ctx, 3);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.GrammarParser = GrammarParser;
